#!/usr/bin/env python
"""A script to provide control over the filt daemon."""

import os
import sys

from gtecs import daemons
from gtecs import errors
from gtecs import misc
from gtecs import params


DAEMON_ID = os.path.basename(__file__)


def query(command, args, daemon_id):
    """Process a query."""
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise errors.InputError('Already in interactive mode')

    # Primary daemon control
    elif command == 'start':
        reply = daemons.start_daemon(daemon_id)
        print(reply)

    elif command == 'shutdown':
        reply = daemons.shutdown_daemon(daemon_id)
        print(reply)

    elif command == 'restart':
        reply = daemons.restart_daemon(daemon_id)
        print(reply)

    elif command == 'kill':
        reply = daemons.kill_daemon(daemon_id)
        print(reply)

    elif command in ['check', 'ping']:
        reply = daemons.check_daemon(daemon_id)
        print(reply)

    elif command in ['info', 'status']:
        # parse arguments
        if len(args) == 0:
            info_type = 'simple'
        elif len(args) == 1 and args[0] in ['v', 'V', '-v', '-V']:
            info_type = 'verbose'
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_id, 'get_info')
        # print response
        if not reply:
            raise ValueError('No info returned, check daemon')
        elif info_type == 'simple':
            print_info_s(reply)
        elif info_type == 'verbose':
            print_info(reply)

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            log_path = params.LOG_PATH + daemon_id + '-stdout.log'
            args.remove('stdout')
        else:
            log_path = params.LOG_PATH + daemon_id + '.log'
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        # send command
        misc.execute_long_command(tail_command)

    # Daemon functions
    elif command == 'set':
        # parse arguments
        if len(args) == 1:
            tel_list = sorted(params.TEL_DICT)
            new_filt = args[0].upper()
        elif len(args) == 2:
            tel_list = misc.valid_ints(args[0].split(','), sorted(params.TEL_DICT))
            new_filt = args[1].upper()
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_id, 'set_filter', [new_filt, tel_list])
        print(reply)

    elif command == 'home':
        # parse arguments
        if len(args) == 0:
            tel_list = sorted(params.TEL_DICT)
        elif len(args) == 1:
            tel_list = misc.valid_ints(args[0].split(','), sorted(params.TEL_DICT))
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_id, 'home_filter', [tel_list])
        print(reply)

    # Other functions
    elif command in ['list', 'ls']:
        print(params.FILTER_LIST)

    # Unrecognized function
    else:
        raise errors.InputError('Unrecognized command "{}"'.format(command))


def print_info(info):
    """Print the full info dict."""
    print('#### FILTER WHEEL INFO ####')
    for tel in sorted(params.TEL_DICT):
        print('FILTER WHEEL ' + str(tel) + ' (%s-%i)' % tuple(params.TEL_DICT[tel]))
        if info['status' + str(tel)] != 'Moving':
            print('Status: %s' % info['status' + str(tel)])
            if info['current_filter_num' + str(tel)] != -1:
                current_filter_num = info['current_filter_num' + str(tel)]
                current_filter = params.FILTER_LIST[current_filter_num]
                print('Current filter:     %s' % current_filter)
            else:
                print('Current filter: UNHOMED')
        else:
            print('Status: %s (%i)' % (info['status' + str(tel)], info['remaining' + str(tel)]))
            print('Current filter:     N/A')
        print('Current filter num: %s' % info['current_filter_num' + str(tel)])
        print('Current motor pos:  %s' % info['current_pos' + str(tel)])
        print('Serial number:      %s' % info['serial_number' + str(tel)])
        print('~~~~~~~')
    print('Uptime: %.1fs' % info['uptime'])
    print('Ping: %.5fs' % info['ping'])
    print('Timestamp: %s' % info['timestamp'])
    print('###########################')


def print_info_s(info):
    """Print the info dict in a compact way."""
    for tel in sorted(params.TEL_DICT):
        print('FILTER WHEEL ' + str(tel) + ' (%s-%i)' % tuple(params.TEL_DICT[tel]), end=' ')
        if info['status' + str(tel)] != 'Moving':
            if info['current_filter_num' + str(tel)] != -1:
                current_filter_num = info['current_filter_num' + str(tel)]
                current_filter = params.FILTER_LIST[current_filter_num]
                print('  Current filter: %s' % current_filter, end=' ')
            else:
                print('  Current filter: UNHOMED', end=' ')
            print('(%i)' % info['current_filter_num' + str(tel)], end=' ')
            print('  [%s]' % info['status' + str(tel)])
        else:
            print('  %s (%i)' % (info['status' + str(tel)], info['remaining' + str(tel)]))


def print_instructions():
    """Print instructions for using the daemon."""
    print('Usage: filt command [options]',
          'Daemon commands:',
          '  start                          start the daemon',
          '  shutdown                       shutdown the daemon',
          '  restart                        restart the daemon',
          '  kill                           kill the daemon',
          '  check/ping                     check the daemon for errors',
          'Filter wheel commands:',
          '  set [tels] filter              set wheel to given filter',
          '  home [tels]                    home given filter',
          '  list                           lists the possible filters',
          '  info/status [v]                report current status',
          '  log [stdout]                   print daemon log (tail alias)',
          'Control commands:',
          '  i                              enter interactive mode',
          '  q/exit                         quit interactive mode',
          '  ?/help                         print these instructions',
          sep='\n')


if __name__ == "__main__":
    if len(sys.argv) == 1:
        print_instructions()
    else:
        command, *args = sys.argv[1:]
        if command == 'i':
            while True:
                interactive_input = input('{}> '.format(DAEMON_ID)).split()
                if len(interactive_input) > 0:
                    command, *args = interactive_input
                    if command in ['q', 'exit']:
                        break
                    else:
                        with misc.print_errors():
                            query(command, args, DAEMON_ID)
        else:
            with misc.print_errors():
                query(command, args, DAEMON_ID)
