#!/usr/bin/env python

########################################################################
#                                filt.py                               #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#           G-TeCS script to provide control over filt_daemon          #
#                    Martin Dyer, Sheffield, 2015-16                   #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#                   Based on the SLODAR/pt5m system                    #
########################################################################

### Import ###
# Python modules
from __future__ import absolute_import
from __future__ import print_function
import os, sys
import readline
import time
import Pyro4
from six.moves import input
# TeCS modules
from gtecs.tecs_modules import misc
from gtecs.tecs_modules import params
from gtecs.tecs_modules import daemons

########################################################################
# Interactive functions

def interactive():
    while True:
        i_in = input('{}> '.format(daemon_ID)).split()
        if len(i_in) > 0:
            command, *args = i_in
            if command == 'q' or command == 'exit':
                return
            else:
                query(command, args)

def query(command, args):
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Primary control functions
    if command == 'start':
        daemons.start_daemon(daemon_ID)
    elif command == 'shutdown':
        daemons.shutdown_daemon(daemon_ID)
    elif command == 'kill':
        daemons.kill_daemon(daemon_ID)
    elif command == 'ping':
        daemons.ping_daemon(daemon_ID)
    elif command == 'help' or command == '?':
        print_instructions()
    elif command == 'i':
        print(misc.ERROR('Already in interactive mode'))

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Filter wheel control functions
    elif command == 'info':
        if len(args) == 0:
            info = daemons.daemon_function(daemon_ID, 'get_info')
            if info: print_info_s(info)
        elif len(args) == 1 and args[0] in ['v','V','-v','-V']:
            info = daemons.daemon_function(daemon_ID, 'get_info')
            if info: print_info(info)
        else:
            print(misc.ERROR('Invalid arguments'))

    elif command == 'set':
        if len(args) == 1:
            new_filt = args[0].upper()
            HW_list  = list(params.TEL_DICT)
            c = daemons.daemon_function(daemon_ID, 'set_filter', [new_filt, HW_list])
            if c: print(c)
        elif len(args) == 2:
            new_filt = args[1].upper()
            HW_list  = misc.valid_ints(args[0].split(','),list(params.TEL_DICT))
            if len(HW_list) > 0:
                c = daemons.daemon_function(daemon_ID, 'set_filter', [new_filt, HW_list])
                if c: print(c)
        else:
            print(misc.ERROR('Invalid arguments'))

    elif command == 'home':
        if len(args) == 0:
            HW_list  = list(params.TEL_DICT)
            c = daemons.daemon_function(daemon_ID, 'home_filter', [HW_list])
            if c: print(c)
        elif len(args) == 1:
            HW_list = misc.valid_ints(args[0].split(','),list(params.TEL_DICT))
            if len(HW_list) > 0:
                c = daemons.daemon_function(daemon_ID, 'home_filter', [HW_list])
                if c: print(c)
        else:
            print(misc.ERROR('Invalid arguments'))

    elif command == 'list':
        print(params.FILTER_LIST)

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Unrecognized function
    else:
        print(misc.ERROR('Unrecognized command "%s"' %command))

########################################################################
# Output formatting functions

def print_info(info):
    flist = params.FILTER_LIST
    print('#### FILTER WHEEL INFO ####')
    for tel in params.TEL_DICT:
        print('FILTER WHEEL ' + str(tel) + ' (%s-%i)'%tuple(params.TEL_DICT[tel]))
        if info['status'+str(tel)] != 'Moving':
            print('Status: %s' %info['status'+str(tel)])
            print('Current filter:     %s' %flist[info['current_filter_num'+str(tel)]])
        else:
            print('Status: %s (%i)' %(info['status'+str(tel)],info['remaining'+str(tel)]))
            print('Current filter:     N/A')
        print('Current filter num: %s' %info['current_filter_num'+str(tel)])
        print('Current motor pos:  %s' %info['current_pos'+str(tel)])
        print('Serial number:      %s' %info['serial_number'+str(tel)])
        print('~~~~~~~')
    print('Uptime: %.1fs' %info['uptime'])
    print('Ping: %.5fs' %info['ping'])
    print('Timestamp: %s' %info['timestamp'])
    print('###########################')

def print_info_s(info):
    flist = params.FILTER_LIST
    for tel in params.TEL_DICT:
        print('FILTER WHEEL ' + str(tel) + ' (%s-%i)'%tuple(params.TEL_DICT[tel]), end=' ')
        if info['status'+str(tel)] != 'Moving':
            print('  Current filter: %s' %flist[info['current_filter_num'+str(tel)]], end=' ')
            print('  [%s]' %info['status'+str(tel)])
        else:
            print('  %s (%i)' %(info['status'+str(tel)],info['remaining'+str(tel)]))

def print_instructions():
    help_str = misc.bold('Usage:') + ' filt [command]' + '\n' +\
    ' ' + misc.undl('Daemon commands') + ':' + '\n' +\
    '  filt ' + misc.bold('start') + '             - start the daemon' + '\n' +\
    '  filt ' + misc.bold('shutdown') + '          - shutdown the daemon' + '\n' +\
    '  filt ' + misc.bold('kill') + '              - kill the daemon (' + misc.rtxt('emergency use') + ')' + '\n' +\
    '  filt ' + misc.bold('ping') + '              - ping the daemon' + '\n' +\
    ' ' + misc.undl('Filter wheel commands') + ':' + '\n' +\
    '  filt ' + misc.bold('set') + ' [tels] filter' + ' - set wheel to given filter' + '\n' +\
    '  filt ' + misc.bold('home') + ' [tels]' + '       - home given filter' + '\n' +\
    '  filt ' + misc.bold('list') + '              - lists the possible filters' + '\n' +\
    '  filt ' + misc.bold('info') + ' [v]' + '          - report current status' + '\n' +\
    ' ' + misc.undl('Control commands') + ':' + '\n' +\
    '  filt ' + misc.bold('i') + '                 - enter interactive mode' + '\n' +\
    '  filt ' + misc.bold('q') + '/' + misc.bold('exit') + '            - quit interactive mode' + '\n' +\
    '  filt ' + misc.bold('?') + '/' + misc.bold('help') + '            - print these instructions'
    print(help_str)

########################################################################

daemon_ID = os.path.basename(__file__)

if len(sys.argv) == 1:
    print_instructions()
else:
    command, *args = sys.argv[1:]
    if command == 'i':
        interactive()
    else:
        query(command, args)
