#!/usr/bin/env python
"""
A script to provide control over the pilot
"""

import sys
import argparse

from gtecs import misc
from gtecs import params
from gtecs import errors
from gtecs.pilot import run


def query(command, args):
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    # Primary control
    elif command == 'start':
        pid = misc.get_pid('pilot')
        if pid:
            print('Pilot already running (PID {})'.format(pid))
            return

        parser = argparse.ArgumentParser()
        parser.add_argument('-t', '--test', action="store_true", default=False)
        parser.add_argument('-r', '--restart', action="store_true", default=False)
        parser.add_argument('-l', '--late', action="store_true", default=False)
        args = parser.parse_args(args).__dict__

        with misc.make_pid_file('pilot'):
            run(**args)

    elif command == 'ping':
        pid = misc.get_pid('pilot')
        if pid:
            print('Pilot is running (PID {})'.format(pid))
        else:
            print('Pilot is not running')

    elif command == 'kill':
        if not misc.get_pid('pilot'):
            print('Pilot is not running')
            return

        misc.kill_process('pilot')

    elif command in ['log', 'tail']:
        log_path = params.LOG_PATH + 'pilot.log'
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))

        misc.execute_long_command(tail_command)

    # Unrecognized function
    else:
        raise errors.InputError('Unrecognized command "{}"'.format(command))


def print_instructions():
    print("Usage: pilot command [options]",
          "The pilot is the master control program for the observatory.",
          "",
          "Commands:",
          "   start [options]        start the pilot",
          "         -l, --late       run the evening tasks even if it's too late",
          "         -r, --restart    skip the evening tasks and go straight to observing",
          "         -t, --test       start the pilot in testing mode",
          "   ping                   check if the pilot is running",
          "   kill                   kill the pilot",
          "   log [tail args]        print pilot log (alias for tail)",
          "   help                   print these instructions",
          sep='\n')


if __name__ == "__main__":
    if len(sys.argv) == 1:
        print_instructions()
    else:
        command, *args = sys.argv[1:]
        with misc.print_errors():
            query(command, args)
