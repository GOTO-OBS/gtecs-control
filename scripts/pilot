#!/usr/bin/env python3
"""A script to provide control over the pilot."""

import argparse
import sys

from gtecs.common import logging
from gtecs.control import errors
from gtecs.control import misc
from gtecs.control.flags import Status
from gtecs.control.pilot import run
from gtecs.control.slack import send_slack_msg


def query(command, args):
    """Process a query."""
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    # Primary control
    elif command == 'start':
        # Disable pilot in engineering mode or emergency shutdown
        status = Status()
        if status.mode == 'engineering':
            print('Pilot is disabled in engineering mode')
            send_slack_msg('Pilot tried to start, but system is in engineering mode')
            return
        elif status.emergency_shutdown:
            print('Pilot is disabled during emergency shutdown')
            send_slack_msg('Pilot tried to start, but system is in emergency shutdown')
            return

        # Check it it's already running
        pid = misc.get_pid('pilot')
        if pid:
            print('Pilot already running (PID {})'.format(pid))
            send_slack_msg('Pilot tried to start, but is already running')
            return

        parser = argparse.ArgumentParser()
        parser.add_argument('-t', '--test', action='store_true', default=False)
        parser.add_argument('-r', '--restart', action='store_true', default=False)
        parser.add_argument('-l', '--late', action='store_true', default=False)
        args = parser.parse_args(args).__dict__

        with misc.make_pid_file('pilot'):
            run(**args)

    elif command == 'ping':
        pid = misc.get_pid('pilot')
        if pid:
            print('Pilot is running (PID {})'.format(pid))
        else:
            print('Pilot is not running')

    elif command == 'kill':
        if not misc.get_pid('pilot'):
            print('Pilot is not running')
            return

        misc.kill_process('pilot')

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            log_file = 'pilot' + '-stdout.log'
            args.remove('stdout')
        else:
            log_file = 'pilot' + '.log'
        log_path = logging.get_log_path() / log_file
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))

        misc.execute_long_command(tail_command)

    # Unrecognized function
    else:
        raise errors.InputError('Unrecognized command "{}"'.format(command))


def print_instructions():
    """Print instructions for using the script."""
    print('Usage: pilot command [options]',
          'The pilot is the master control program for the observatory.',
          '',
          'Commands:',
          '   start [options]        start the pilot',
          '         -l, --late       run the evening tasks even if it is too late',
          '         -r, --restart    skip the evening tasks and go straight to observing',
          '         -t, --test       start the pilot in testing mode',
          '   ping                   check if the pilot is running',
          '   kill                   kill the pilot',
          '   log [tail args]        print pilot log (alias for tail)',
          '   help                   print these instructions',
          sep='\n')


if __name__ == '__main__':
    if len(sys.argv) == 1:
        print_instructions()
    else:
        command, *args = sys.argv[1:]
        query(command, args)
