#!/usr/bin/env python
# a fake pilot to test the scheduler
# heavily based on the pt5m pilot, including pointing files and html pages
# SL & MJD @ Sheffield, 2016

from __future__ import absolute_import
from __future__ import print_function

import os
import signal
import time

import george
import numpy as np
from scipy import stats

from astropy.time import Time, TimeDelta
from astropy import units as u
import astroplan

from gtecs.tecs_modules import scheduler
from gtecs.tecs_modules import misc
from gtecs.tecs_modules import params

from six.moves import zip

# catch ctrl-c
signal.signal(signal.SIGINT, misc.signal_handler)

slewrate = 5 * u.degree/u.s
readouttime = 10*u.s

weather_on = 0

fake_dt = TimeDelta(60*u.s)  # 15*u.s)


def set_pointing_status(pointing, status):
    '''Mark a pointing as completed, aborted etc'''
    if status not in ['aborted', 'completed', 'interrupted']:
        print('Illegal status:', status)
        return 1
    else:
        print('    Marking pointing', pointing.id, 'as', status)
        try:
            old_dir = os.path.join(params.QUEUE_PATH, 'todo')
            new_dir = os.path.join(params.QUEUE_PATH, status)
            filename = "ID_{:d}.dat".format(pointing.id)
            os.rename(os.path.join(old_dir, filename),
                      os.path.join(new_dir, filename))
            return 0
        except:
            return 1


class Weather(object):
    """class to simulate bad weather using Gaussian processes

    Args:
        start_time (astropy.time.Time): start of night (sunset)
        stop_time  (astropy.time.Time): end of night (sunset)
        timescale  (float): typical timescale of weather event (hours)
        frac_bad   (float): average fraction of night lost to bad weather"""
    def __init__(self, start_time, stop_time, timescale, frac_bad):
        self.start_time = start_time
        self.stop_time = stop_time
        self.kernel = george.kernels.Matern32Kernel(timescale)
        self.gp = george.GP(self.kernel)

        # evaluate guassian process on grid of hours between stop and start
        range = stop_time - start_time
        x = np.linspace(0, range.to(u.hour), 100)
        e = 0.0001*np.ones_like(x)
        # evaluate kernel of GP
        self.gp.compute(x, e)

        # now draw a sample from the GP to represent tonight's weather
        self.weather_graph = self.gp.sample(x)

        # GP follows Gaussian statistics with sigma=1.
        # for a given fraction of bad time, we can work out the amplitude
        # to use as a threshold for the GP using the percent point function
        # (the inverse of the cumulative distribution function
        # if weather_graph is below this threshold weather is bad!
        self.threshold = stats.norm.ppf(frac_bad)

    def is_bad(self, curr_time):
        if weather_on:
            x = (curr_time - self.start_time).to(u.hour)
            val, uncer = self.gp.predict(self.weather_graph, x)
            if val < self.threshold:
                return True
            else:
                return False
        else:
            return False


def get_night_times(date):
    """
    Calculate the start and stop times of a given date,
    defined as sunrise and sunset times for La Palma.
    """
    lapalma = astroplan.Observer.at_site('lapalma')
    # Time(date) gives start of date, add one day to get midnight that night
    midnight = Time(date) + TimeDelta(1*u.day)
    sunset = lapalma.sun_set_time(midnight, which="previous")
    sunrise = lapalma.sun_rise_time(midnight, which="next")
    return sunset, sunrise


def estimate_completion_time(new_pointing, current_pointing):
    """
    Extimate the exposure time for a pointing, based on the combined
    exposure times in all exposures and the time to move into position.
    """
    total_exptime = 0*u.s
    for exp in new_pointing.exposures:
        total_exptime += ((exp.exptime + readouttime) * exp.numexp)

    if current_pointing is not None:
        slew_distance = current_pointing.coord.separation(new_pointing.coord)
        slew_time = slew_distance/slewrate
    else:
        slew_time = 0*u.s

    return slew_time + total_exptime


class DummyPilot(object):
    """
    The dummy pilot simply checks to see if a more important pointing
    is available from the scheduler, or if it has finished the pointing
    it is supposed to be currently doing
    """

    def __init__(self):
        self.start_time = Time.now()

        self.current_pointing = None
        self.current_start_time = None
        self.current_min_time = None
        self.current_duration = None

        self.completed_pointings = []
        self.completed_times = []
        self.interrupted_pointings = []
        self.aborted_pointings = []

        self.dome_status = 0  # 1 = open, 0 = shut
        self.pilot_status = None

    def pause_observing(self):
        self.dome_status = 0
        self.pilot_status = 'Dome Closed'
        if self.current_pointing is not None:
            print('Aborting ID= %i due to bad weather' % self.current_pointing.id)
            self.aborted_pointings.append(self.current_pointing)
            set_pointing_status(self.current_pointing, 'aborted')
            self.current_pointing = None
            self.current_duration = None
            self.current_position = None

    def resume_observing(self):
        self.dome_status = 1
        self.pilot_status = 'Dome Open'

    def check_weather(self, weather, now):
        bad_weather = weather.is_bad(now)
        if bad_weather and self.dome_status:
            self.pause_observing()
        if not bad_weather and not self.dome_status:
            self.resume_observing()

    def log_state(self, now):
        '''Write the current state of the pilot to a log file'''
        state = 'unknown'
        if self.pilot_status == 'Suspended':
            state = 'manual'
        elif self.dome_status == 0:
            state = 'closed'
        elif self.current_pointing is not None:
            state = 'pointing:%i (p:%.11f)' %(self.current_pointing.id, self.current_pointing.priority_now)
        else:
            state = 'idle'
        fname = os.path.join(params.CONFIG_PATH, 'state_log.txt')
        with open(fname, 'a') as f:
            f.write('%s %s\n' % (now. iso, state))

    def check_current_pointing(self, now):
        if self.current_pointing is not None:
            time_elapsed = (now - self.current_start_time).to(u.s)
            if time_elapsed > self.current_duration:
                print('  Job complete!')
                self.current_pointing.priority_now += 10
                # set mintime to 0
                # then when we review_target_situation, pointing will be marked
                # as completed
                self.current_pointing.min_time = 0.0*u.s

    def review_target_situation(self, now, write_html):
        '''Check queue for a new target and, if necessary, go to it'''
        if self.current_pointing is not None:
            print('  current : ID', self.current_pointing.id)
        else:
            print('  current :', None)
        new_pointing = scheduler.check_queue(self.current_pointing, now, write_html)
        if new_pointing is not None:
            print('  queue   : ID', new_pointing.id)
        else:
            print('  queue   :', None)

        if new_pointing != self.current_pointing and new_pointing not in self.completed_pointings:
            if self.current_pointing is not None:
                # we're already doing something,
                # mark as finished or interrupted
                try:
                    time_elapsed = (now - self.current_start_time).to(u.s)
                except:
                    time_elapsed = 0.
                if time_elapsed > self.current_min_time:  # pointing complete
                    set_pointing_status(self.current_pointing, 'completed')
                    self.completed_pointings.append(self.current_pointing)
                    self.completed_times.append(now)
                else:  # pointing wasn't complete, but something else took over
                    print('  Job interrupted')
                    set_pointing_status(self.current_pointing, 'interrupted')
                    self.interrupted_pointings.append(self.current_pointing)

            if new_pointing is not None:
                self.current_min_time = new_pointing.mintime
                self.current_duration = estimate_completion_time(new_pointing,
                                                                 self.current_pointing)
                self.current_pointing = new_pointing
                self.current_start_time = now
            else:  # park scope (but remain in standby)
                self.current_pointing = None

        if new_pointing == self.current_pointing:
            self.current_pointing = new_pointing


if __name__ == "__main__":
    usage = """python fake_pilot.py date sleep_time write_html"""
    import argparse
    parser = argparse.ArgumentParser(description="run fake pilot for a night",
                                     usage=usage)
    parser.add_argument('date', help="night starting date to simulate")
    parser.add_argument('sleep_time', help="time to sleep each period")
    parser.add_argument('write_html', help="write html webpages?", type=int)
    args = parser.parse_args()

    pilot = DummyPilot()

    # weather has typical timescale = 1h and we lose 10% of time to bad weather
    sunset, sunrise = get_night_times(args.date)
    weather = Weather(sunset, sunrise, 1.0, 0.1)

    # loop until night is over
    print('Starting loop...')
    now = sunset
    ts = time.time()
    while now < sunrise:
        tprev = ts
        ts = time.time()
        now.format = 'iso'
        now.precision = 0
        print('Loop:', now, '  ---  dt:%.3fs' %(ts-tprev))
        pilot.check_weather(weather, now)
        if pilot.dome_status:  # open
            pilot.check_current_pointing(now)
            pilot.review_target_situation(now, bool(args.write_html))
        else:
            print('  dome closed')
        pilot.log_state(now)

        # increment by scheduler loop timestep
        now += fake_dt
        time.sleep(float(args.sleep_time))

    print('Listing completed pointings and time done')
    for pointing, timedone in zip(pilot.completed_pointings, pilot.completed_times):
        print(pointing.id, timedone)

    print('Listing pointings aborted due to bad weather')
    for pointing in pilot.aborted_pointings:
        print(pointing.id)

    print('Listing pointings interrupted by other pointings')
    for pointing in pilot.interrupted_pointings:
        print(pointing.id)

    # reset files
    print('Resetting pointing files')
    todo_dir = os.path.join(params.QUEUE_PATH, 'todo')
    for folder in ['aborted', 'completed', 'interrupted']:
        cur_dir = os.path.join(params.QUEUE_PATH, folder)
        for filename in os.listdir(cur_dir):
            os.rename(os.path.join(cur_dir, filename),
                      os.path.join(todo_dir, filename))
