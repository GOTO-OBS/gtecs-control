#!/usr/bin/env python3
"""A script to provide control over the OTA daemon."""

import json
import os
import sys

from gtecs.common import logging
from gtecs.common.system import execute_long_command
from gtecs.control import daemons
from gtecs.control import errors
from gtecs.control import params
from gtecs.control.style import errortxt


def query(command, args):
    """Process a query."""
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise errors.InputError('Already in interactive mode')

    # Primary daemon control
    elif command == 'start':
        reply = daemons.start_daemon('ota')
        print(reply)

    elif command == 'shutdown':
        reply = daemons.shutdown_daemon('ota')
        print(reply)

    elif command == 'restart':
        reply = daemons.restart_daemon('ota')
        print(reply)

    elif command == 'kill':
        reply = daemons.kill_daemon('ota')
        print(reply)

    elif command in ['check', 'ping']:
        reply = daemons.check_daemon('ota')
        print(reply)

    elif command in ['info', 'status']:
        # parse arguments
        if len(args) == 0:
            info_type = 'simple'
            force = False
        elif len(args) == 1 and args[0] in ['f', 'F', '-f', '-F', '--force-update']:
            info_type = 'simple'
            force = True
        elif len(args) == 1 and args[0] in ['v', 'V', '-v', '-V', '--verbose']:
            info_type = 'verbose'
            force = False
        elif len(args) == 1 and args[0] in ['r', 'R', '-r', '-R', '--raw']:
            info_type = 'raw'
            force = False
        elif (len(args) == 2 and
              ((args[0] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'verbose'
            force = True
        elif (len(args) == 2 and
              ((args[0] in ['r', 'R', '-r', '-R', '--raw'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['r', 'R', '-r', '-R', '--raw'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'raw'
            force = True
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function('ota', 'get_info', args=[force])
        # print response
        if not reply:
            raise ValueError('No info returned, check daemon')
        elif info_type == 'simple':
            print_info_s(reply)
        elif info_type == 'verbose':
            print_info(reply)
        elif info_type == 'raw':
            print(json.dumps(reply, indent=2, default=repr))

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            log_file = 'ota-stdout.log'
            args.remove('stdout')
        else:
            log_file = 'ota.log'
        log_path = logging.get_log_path() / log_file
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        # send command
        execute_long_command(tail_command)

    # Daemon functions
    elif command == 'open':
        # parse arguments
        if len(args) == 0:
            # ota open
            ut_list = params.UTS_WITH_COVERS
        elif len(args) == 1:
            # ota open <ut>[,<ut>...]
            ut_list = [int(x) for x in args[0].split(',')]
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function('ota', 'open_covers', [ut_list])
        print(reply)

    elif command == 'close':
        # parse arguments
        if len(args) == 0:
            # ota close
            ut_list = params.UTS_WITH_COVERS
        elif len(args) == 1:
            # ota close <ut>[,<ut>...]
            ut_list = [int(x) for x in args[0].split(',')]
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function('ota', 'close_covers', [ut_list])
        print(reply)

    elif command == 'stop':
        # parse arguments
        if len(args) == 0:
            # ota stop
            ut_list = params.UTS_WITH_COVERS
        elif len(args) == 1:
            # ota stop <ut>[,<ut>...]
            ut_list = [int(x) for x in args[0].split(',')]
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function('ota', 'stop_covers', [ut_list])
        print(reply)

    # Unrecognized function
    else:
        raise errors.InputError('Unrecognized command "{}"'.format(command))


def print_info(info):
    """Print the full info dict."""
    print('#### OTA INFO ####')
    for ut in info['uts']:
        if ut in info['uts_with_covers']:
            host, port = daemons.get_daemon_host(info[ut]['interface_id'])
            print('OTA {} ({}:{})'.format(ut, host, port))
        else:
            print('OTA {}                     '.format(ut))
        print('Serial number:  {}'.format(info[ut]['serial_number']))
        print('Hardware class: {}'.format(info[ut]['hw_class']))
        if ut in info['uts_with_covers']:
            print('Mirror cover:   {}'.format(info[ut]['position'].capitalize()))
        else:
            print('Mirror cover:   NA')
        print('~~~~~~~')
    print('Uptime: {:.1f}s'.format(info['uptime']))
    print('Timestamp: {}'.format(info['timestamp']))
    print('###########################')


def print_info_s(info):
    """Print the info dict in a compact way."""
    for ut in info['uts']:
        if ut in info['uts_with_covers']:
            host, port = daemons.get_daemon_host(info[ut]['interface_id'])
            print('OTA {} ({}:{})'.format(ut, host, port), end=' ')
        else:
            print('OTA {}                     '.format(ut), end=' ')
        if ut in info['uts_with_covers']:
            print('  Mirror cover: [{}]'.format(info[ut]['position'].capitalize()))
        else:
            print('  Mirror cover: [NA]')


def print_instructions():
    """Print instructions for using the daemon."""
    print('Usage: ota command [options]',
          'Daemon commands:',
          '  start                          start the daemon',
          '  shutdown                       shutdown the daemon',
          '  restart                        restart the daemon',
          '  kill                           kill the daemon',
          '  check/ping                     check the daemon for errors',
          'OTA commands:',
          '  open [uts]                     open mirror covers',
          '  close [uts]                    close mirror covers',
          '  stop [uts]                     stop mirror covers moving',
          '  info/status [-r|-v] [-f]       report current status [raw/verbose/force-update]',
          '  log [stdout]                   print daemon log (tail alias)',
          'Control commands:',
          '  i                              enter interactive mode',
          '  q/exit                         quit interactive mode',
          '  ?/help                         print these instructions',
          sep='\n')


if __name__ == '__main__':
    if len(sys.argv) == 1:
        # No command: print help and exit
        print_instructions()
        sys.exit()

    command, *args = sys.argv[1:]
    if command != 'i':
        query(command, args)
    else:
        # Interactive mode
        while True:
            try:
                interactive_input = input('{}> '.format(os.path.basename(__file__))).split()
            except EOFError:
                print()
                sys.exit()
            if len(interactive_input) > 0:
                command, *args = interactive_input
                if command in ['q', 'exit']:
                    sys.exit()
                try:
                    query(command, args)
                except Exception as error:
                    print(errortxt('"{}: {}"'.format(type(error).__name__, error)))
