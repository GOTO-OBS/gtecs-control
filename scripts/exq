#!/usr/bin/env python3
"""A script to provide control over the exq daemon."""

import os
import sys

from gtecs.common import logging
from gtecs.common.system import execute_long_command
from gtecs.control import daemons
from gtecs.control import errors
from gtecs.control import misc
from gtecs.control import params
from gtecs.control.style import errortxt


def query(command, args):
    """Process a query."""
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise errors.InputError('Already in interactive mode')

    # Primary daemon control
    elif command == 'start':
        reply = daemons.start_daemon('exq')
        print(reply)

    elif command == 'shutdown':
        reply = daemons.shutdown_daemon('exq')
        print(reply)

    elif command == 'restart':
        reply = daemons.restart_daemon('exq')
        print(reply)

    elif command == 'kill':
        reply = daemons.kill_daemon('exq')
        print(reply)

    elif command in ['check', 'ping']:
        reply = daemons.check_daemon('exq')
        print(reply)

    elif command in ['info', 'status']:
        # parse arguments
        if len(args) == 0:
            info_type = 'simple'
            force = False
        elif len(args) == 1 and args[0] in ['f', 'F', '-f', '-F', '--force-update']:
            info_type = 'simple'
            force = True
        elif len(args) == 1 and args[0] in ['v', 'V', '-v', '-V', '--verbose']:
            info_type = 'verbose'
            force = False
        elif len(args) == 1 and args[0] in ['r', 'R', '-r', '-R', '--raw']:
            info_type = 'raw'
            force = False
        elif (len(args) == 2 and
              ((args[0] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'verbose'
            force = True
        elif (len(args) == 2 and
              ((args[0] in ['r', 'R', '-r', '-R', '--raw'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['r', 'R', '-r', '-R', '--raw'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'raw'
            force = True
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function('exq', 'get_info', args=[force])
        # print response
        if not reply:
            raise ValueError('No info returned, check daemon')
        elif info_type == 'simple':
            print_info_s(reply)
        elif info_type == 'verbose':
            print_info(reply)
        elif info_type == 'raw':
            print(reply)

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            log_file = 'exq-stdout.log'
            args.remove('stdout')
        else:
            log_file = 'exq.log'
        log_path = logging.get_log_path() / log_file
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        # send command
        execute_long_command(tail_command)

    # Daemon functions
    elif command == 'image':
        # parse arguments
        if len(args) < 3:
            raise errors.InputError('Need at least: exptime filter binning')
        elif misc.is_num(args[0]) and misc.is_num(args[2]):
            # exptime filter binning [object] [imgtype]
            ut_list = params.UTS_WITH_CAMERAS
            exptime = float(args[0])
            filt_list = misc.valid_strings(args[1].split(','), params.FILTER_LIST + ['X'])
            binning = int(args[2])
            if len(args) == 3:
                target = 'NA'
                imgtype = 'SCIENCE'
            elif len(args) == 4:
                target = args[3]
                imgtype = 'SCIENCE'
            elif len(args) == 5:
                target = args[3]
                imgtype = args[4].upper()
            else:
                raise errors.InputError('Invalid arguments')
        elif misc.is_num(args[1]) and misc.is_num(args[3]):
            # uts exptime filter binning [object] [imgtype]
            ut_list = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            exptime = float(args[1])
            filt_list = misc.valid_strings(args[2].split(','), params.FILTER_LIST + ['X'])
            binning = int(args[3])
            if len(args) == 4:
                target = 'NA'
                imgtype = 'SCIENCE'
            elif len(args) == 5:
                target = args[4]
                imgtype = 'SCIENCE'
            elif len(args) == 6:
                target = args[4]
                imgtype = args[5].upper()
            else:
                raise errors.InputError('Invalid arguments')
        else:
            raise errors.InputError('Invalid arguments')
        # preset arguments
        nexp = 1
        frametype = 'normal'
        glance = False
        # send command
        for filt in filt_list:
            arg_list = [ut_list, exptime, nexp, filt, binning, frametype, target, imgtype, glance]
            reply = daemons.daemon_function('exq', 'add', arg_list)
            print(reply)

    elif command in ['multimage', 'multiimage', 'mimage']:
        # parse arguments
        if len(args) < 4:
            raise errors.InputError('Need at least: nexp exptime filter binning')
        elif misc.is_num(args[0]) and misc.is_num(args[1]) and misc.is_num(args[3]):
            # nexp exptime filter binning [object] [imgtype]
            nexp = int(args[0])
            ut_list = params.UTS_WITH_CAMERAS
            exptime = float(args[1])
            filt_list = misc.valid_strings(args[2].split(','), params.FILTER_LIST + ['X'])
            binning = int(args[3])
            if len(args) == 4:
                target = 'NA'
                imgtype = 'SCIENCE'
            elif len(args) == 5:
                target = args[4]
                imgtype = 'SCIENCE'
            elif len(args) == 6:
                target = args[4]
                imgtype = args[5].upper()
            else:
                raise errors.InputError('Invalid arguments')
        elif misc.is_num(args[0]) and misc.is_num(args[2]) and misc.is_num(args[4]):
            # nexp uts exptime filter binning [object] [imgtype]
            nexp = int(args[0])
            ut_list = misc.valid_ints(args[1].split(','), params.UTS_WITH_CAMERAS)
            exptime = float(args[2])
            filt_list = misc.valid_strings(args[3].split(','), params.FILTER_LIST + ['X'])
            binning = int(args[4])
            if len(args) == 5:
                target = 'NA'
                imgtype = 'SCIENCE'
            elif len(args) == 6:
                target = args[5]
                imgtype = 'SCIENCE'
            elif len(args) == 7:
                target = args[5]
                imgtype = args[6].upper()
            else:
                raise errors.InputError('Invalid arguments')
        else:
            raise errors.InputError('Invalid arguments')
        # preset arguments
        frametype = 'normal'
        glance = False
        # send command
        for filt in filt_list:
            arg_list = [ut_list, exptime, nexp, filt, binning, frametype, target, imgtype, glance]
            reply = daemons.daemon_function('exq', 'add', arg_list)
            print(reply)

    elif command in ['multcolimage', 'multicolimage', 'mcolimage', 'mcimage']:
        # parse arguments
        if len(args) < 4:
            raise errors.InputError('Need at least: nexp exptime filters binning')
        elif misc.is_num(args[0]) and misc.is_num(args[1]) and misc.is_num(args[3]):
            # nexp exptime filters binning [object] [imgtype]
            nexp = int(args[0])
            ut_list = params.UTS_WITH_CAMERAS
            exptime = float(args[1])
            filt_list = misc.valid_strings(args[2].split(','), params.FILTER_LIST + ['X'])
            binning = int(args[3])
            if len(args) == 4:
                target = 'NA'
                imgtype = 'SCIENCE'
            elif len(args) == 5:
                target = args[4]
                imgtype = 'SCIENCE'
            elif len(args) == 6:
                target = args[4]
                imgtype = args[5].upper()
            else:
                raise errors.InputError('Invalid arguments')
        elif misc.is_num(args[0]) and misc.is_num(args[2]) and misc.is_num(args[4]):
            # nexp uts exptime filters binning [object] [imgtype]
            nexp = int(args[0])
            ut_list = misc.valid_ints(args[1].split(','), params.UTS_WITH_CAMERAS)
            exptime = float(args[2])
            filt_list = misc.valid_strings(args[3].split(','), params.FILTER_LIST + ['X'])
            binning = int(args[4])
            if len(args) == 5:
                target = 'NA'
                imgtype = 'SCIENCE'
            elif len(args) == 6:
                target = args[5]
                imgtype = 'SCIENCE'
            elif len(args) == 7:
                target = args[5]
                imgtype = args[6].upper()
            else:
                raise errors.InputError('Invalid arguments')
        else:
            raise errors.InputError('Invalid arguments')
        # preset arguments
        frametype = 'normal'
        glance = False
        # send command
        for _ in range(nexp):
            for filt in filt_list:
                arg_list = [ut_list, exptime, nexp, filt, binning, frametype, target, imgtype,
                            glance]
                reply = daemons.daemon_function('exq', 'add', arg_list)
                print(reply)

    elif command == 'glance':
        # parse arguments
        if len(args) < 3:
            raise errors.InputError('Need at least: exptime filter binning')
        elif misc.is_num(args[0]) and misc.is_num(args[2]):
            # exptime filter binning [object]
            ut_list = params.UTS_WITH_CAMERAS
            exptime = float(args[0])
            filt_list = misc.valid_strings(args[1].split(','), params.FILTER_LIST + ['X'])
            binning = int(args[2])
            if len(args) == 3:
                target = 'NA'
            elif len(args) == 4:
                target = args[3]
            else:
                raise errors.InputError('Invalid arguments')
        elif misc.is_num(args[1]) and misc.is_num(args[3]):
            # uts exptime filter binning [object]
            ut_list = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            exptime = float(args[1])
            filt_list = misc.valid_strings(args[2].split(','), params.FILTER_LIST + ['X'])
            binning = int(args[3])
            if len(args) == 4:
                target = 'NA'
            elif len(args) == 5:
                target = args[4]
            else:
                raise errors.InputError('Invalid arguments')
        else:
            raise errors.InputError('Invalid arguments')
        # preset arguments
        nexp = 1
        frametype = 'normal'
        imgtype = 'GLANCE'
        glance = True
        # send command
        for filt in filt_list:
            arg_list = [ut_list, exptime, nexp, filt, binning, frametype, target, imgtype, glance]
            reply = daemons.daemon_function('exq', 'add', arg_list)
            print(reply)

    elif command == 'dark':
        # parse arguments
        if len(args) < 2:
            raise errors.InputError('Need at least: exptime binning')
        elif misc.is_num(args[0]) and misc.is_num(args[1]) and len(args) == 2:
            # exptime binning
            ut_list = params.UTS_WITH_CAMERAS
            exptime = float(args[0])
            binning = int(args[1])
        elif misc.is_num(args[1]) and misc.is_num(args[2]) and len(args) == 3:
            # uts exptime binning
            ut_list = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            exptime = float(args[1])
            binning = int(args[2])
        else:
            raise errors.InputError('Invalid arguments')
        # preset arguments
        nexp = 1
        filt = None
        frametype = 'dark'
        target = 'NA'
        imgtype = 'DARK'
        glance = False
        # send command
        arg_list = [ut_list, exptime, nexp, filt, binning, frametype, target, imgtype, glance]
        reply = daemons.daemon_function('exq', 'add', arg_list)
        print(reply)

    elif command in ['multdark', 'multidark', 'mdark']:
        # parse arguments
        if len(args) < 3:
            raise errors.InputError('Need at least: exptime binning')
        elif misc.is_num(args[1]) and misc.is_num(args[2]) and len(args) == 3:
            # nexp exptime binning
            nexp = int(args[0])
            ut_list = params.UTS_WITH_CAMERAS
            exptime = float(args[1])
            binning = int(args[2])
        elif misc.is_num(args[2]) and misc.is_num(args[3]) and len(args) == 4:
            # nexp uts exptime binning
            nexp = int(args[0])
            ut_list = misc.valid_ints(args[1].split(','), params.UTS_WITH_CAMERAS)
            exptime = float(args[2])
            binning = int(args[3])
        else:
            raise errors.InputError('Invalid arguments')
        # preset arguments
        filt = None
        frametype = 'dark'
        target = 'NA'
        imgtype = 'DARK'
        glance = False
        # send command
        arg_list = [ut_list, exptime, nexp, filt, binning, frametype, target, imgtype, glance]
        reply = daemons.daemon_function('exq', 'add', arg_list)
        print(reply)

    elif command == 'bias':
        # parse arguments
        if len(args) < 1:
            raise errors.InputError('Need at least: binning')
        elif misc.is_num(args[0]) and len(args) == 1:
            # binning
            ut_list = params.UTS_WITH_CAMERAS
            binning = int(args[0])
        elif misc.is_num(args[1]) and len(args) == 2:
            # uts binning
            ut_list = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            binning = int(args[1])
        else:
            raise errors.InputError('Invalid arguments')
        # preset arguments
        exptime = 0.0
        nexp = 1
        filt = None
        frametype = 'dark'
        target = 'NA'
        imgtype = 'BIAS'
        glance = False
        # send command
        arg_list = [ut_list, exptime, nexp, filt, binning, frametype, target, imgtype, glance]
        reply = daemons.daemon_function('exq', 'add', arg_list)
        print(reply)

    elif command in ['multbias', 'multibias', 'mbias']:
        # parse arguments
        if len(args) < 2:
            raise errors.InputError('Need at least: binning')
        elif misc.is_num(args[1]) and len(args) == 2:
            # nexp binning
            nexp = int(args[0])
            ut_list = params.UTS_WITH_CAMERAS
            binning = int(args[1])
        elif misc.is_num(args[2]) and len(args) == 3:
            # nexp uts binning
            nexp = int(args[0])
            ut_list = misc.valid_ints(args[1].split(','), params.UTS_WITH_CAMERAS)
            binning = int(args[2])
        else:
            raise errors.InputError('Invalid arguments')
        # preset arguments
        exptime = 0.0
        filt = None
        frametype = 'dark'
        target = 'NA'
        imgtype = 'BIAS'
        glance = False
        # send command
        arg_list = [ut_list, exptime, nexp, filt, binning, frametype, target, imgtype, glance]
        reply = daemons.daemon_function('exq', 'add', arg_list)
        print(reply)

    elif command == 'pause':
        reply = daemons.daemon_function('exq', 'pause')
        print(reply)

    elif command in ['resume', 'unpause']:
        reply = daemons.daemon_function('exq', 'resume')
        print(reply)

    elif command in ['get', 'list', 'ls']:
        # parse arguments
        if len(args) == 0:
            list_type = 'simple'
        elif len(args) == 1 and args[0] in ['v', 'V', '-v', '-V']:
            list_type = 'verbose'
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        if list_type == 'simple':
            reply = daemons.daemon_function('exq', 'get_simple')
        elif list_type == 'verbose':
            reply = daemons.daemon_function('exq', 'get')
        else:
            raise errors.InputError('Invalid arguments')
        print(reply)

    elif command == 'clear':
        reply = daemons.daemon_function('exq', 'clear')
        print(reply)

    # Unrecognized function
    else:
        raise errors.InputError('Unrecognized command "{}"'.format(command))


def print_info(info):
    """Print the full info dict."""
    print('####### QUEUE INFO #######')
    print('Status: {}'.format(info['status']))
    print('~~~~~~~')
    print('Current exposure:')
    current_exposure = info['current_exposure']
    if current_exposure is not None:
        print('   {}, {:.2f}, {}, {}, {}, {}, {}'.format(
              current_exposure['ut_list'],
              current_exposure['exptime'],
              current_exposure['filter'],
              current_exposure['binning'],
              current_exposure['frametype'],
              current_exposure['target'],
              current_exposure['imgtype']))
        print('Other items in queue:     {}'.format(info['queue_length']))
    else:
        print('   None')
        print('Items in queue:     {}'.format(info['queue_length']))
    print('Latest set number:  {:d}'.format(info['latest_set_number']))
    print('~~~~~~~')
    print('Uptime: {:.1f}s'.format(info['uptime']))
    print('Timestamp: {}'.format(info['timestamp']))
    print('###########################')


def print_info_s(info):
    """Print the info dict in a compact way."""
    print('QUEUE: [{}]'.format(info['status']))
    print('  Current exposure:', end=' ')
    current_exposure = info['current_exposure']
    if current_exposure is not None:
        print('   {}, {:.2f}, {}, {}, {}, {}, {}'.format(
              current_exposure['ut_list'],
              current_exposure['exptime'],
              current_exposure['filter'],
              current_exposure['binning'],
              current_exposure['frametype'],
              current_exposure['target'],
              current_exposure['imgtype']))
        print('  Other items in queue: {}'.format(info['queue_length']))
    else:
        print('   None')
        print('  Items in queue: {}'.format(info['queue_length']))


def print_instructions():
    """Print instructions for using the daemon."""
    print('Usage: exq command [options]',
          'Daemon commands:',
          '  start                          start the daemon',
          '  shutdown                       shutdown the daemon',
          '  restart                        restart the daemon',
          '  kill                           kill the daemon',
          '  check/ping                     check the daemon for errors',
          'Exposure queue commands:',
          '  image [uts] exptime filter[s] binning [object] [imgtype]',
          '  multimage nexp [uts] exptime filter[s] binning [object] [imgtype]',
          '  multcolimage nexp [uts] exptime filter[s] binning [object] [imgtype]',
          '  glance [uts] exptime filter[s] binning [object]',
          '  dark [uts] exptime binning',
          '  multdark nexp [uts] exptime binning',
          '  bias [uts] binning',
          '  multbias nexp [uts] binning',
          '  pause                          pause taking exposures',
          '  unpause/resume                 resumes taking exposures',
          '  list [-v]                      lists the current queue',
          '  clear                          empty the queue',
          '  info/status [-r|-v] [-f]       report current status [raw/verbose/force-update]',
          '  log [stdout]                   print daemon log (tail alias)',
          'Control commands:',
          '  i                              enter interactive mode',
          '  q/exit                         quit interactive mode',
          '  ?/help                         print these instructions',
          sep='\n')


if __name__ == '__main__':
    if len(sys.argv) == 1:
        # No command: print help and exit
        print_instructions()
        sys.exit()

    command, *args = sys.argv[1:]
    if command != 'i':
        query(command, args)
    else:
        # Interactive mode
        while True:
            try:
                interactive_input = input('{}> '.format(os.path.basename(__file__))).split()
            except EOFError:
                print()
                sys.exit()
            if len(interactive_input) > 0:
                command, *args = interactive_input
                if command in ['q', 'exit']:
                    sys.exit()
                try:
                    query(command, args)
                except Exception as error:
                    print(errortxt('"{}: {}"'.format(type(error).__name__, error)))
