#!/usr/bin/env python
"""A script to provide control over the exq daemon."""

import os
import sys

from gtecs import daemons
from gtecs import errors
from gtecs import misc
from gtecs import params


DAEMON_ID = os.path.basename(__file__)


def query(command, args, daemon_id):
    """Process a query."""
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise errors.InputError('Already in interactive mode')

    # Primary daemon control
    elif command == 'start':
        reply = daemons.start_daemon(daemon_id)
        print(reply)

    elif command == 'shutdown':
        reply = daemons.shutdown_daemon(daemon_id)
        print(reply)

    elif command == 'restart':
        reply = daemons.restart_daemon(daemon_id)
        print(reply)

    elif command == 'kill':
        reply = daemons.kill_daemon(daemon_id)
        print(reply)

    elif command in ['check', 'ping']:
        reply = daemons.check_daemon(daemon_id)
        print(reply)

    elif command in ['info', 'status']:
        # parse arguments
        if len(args) == 0:
            info_type = 'simple'
        elif len(args) == 1 and args[0] in ['v', 'V', '-v', '-V']:
            info_type = 'verbose'
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_id, 'get_info', args=[False])
        # print response
        if not reply:
            raise ValueError('No info returned, check daemon')
        elif info_type == 'simple':
            print_info_s(reply)
        elif info_type == 'verbose':
            print_info(reply)

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            log_file = daemon_id + '-stdout.log'
            args.remove('stdout')
        else:
            log_file = daemon_id + '.log'
        log_path = os.path.join(params.LOG_PATH, log_file)
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        # send command
        misc.execute_long_command(tail_command)

    # Daemon functions
    elif command == 'image':
        # parse arguments
        if len(args) < 3:
            raise errors.InputError('Need at least: exptime filter binning')
        elif misc.is_num(args[0]) and misc.is_num(args[2]):
            # exptime filter binning [object] [imgtype]
            ut_list = params.UTS
            exptime = float(args[0])
            filt_list = misc.valid_strings(args[1].split(','), params.FILTER_LIST)
            binning = int(args[2])
            frametype = 'normal'
            if len(args) == 3:
                target = 'NA'
                imgtype = 'SCIENCE'
            elif len(args) == 4:
                target = args[3]
                imgtype = 'SCIENCE'
            elif len(args) == 5:
                target = args[3]
                imgtype = args[4]
            else:
                raise errors.InputError('Invalid arguments')
        elif misc.is_num(args[1]) and misc.is_num(args[3]):
            # uts exptime filter binning [object] [imgtype]
            ut_list = misc.valid_ints(args[0].split(','), params.UTS)
            exptime = float(args[1])
            filt_list = misc.valid_strings(args[2].split(','), params.FILTER_LIST)
            binning = int(args[3])
            frametype = 'normal'
            if len(args) == 4:
                target = 'NA'
                imgtype = 'SCIENCE'
            elif len(args) == 5:
                target = args[4]
                imgtype = 'SCIENCE'
            elif len(args) == 6:
                target = args[4]
                imgtype = args[5]
            else:
                raise errors.InputError('Invalid arguments')
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        for filt in filt_list:
            arg_list = [ut_list, exptime, filt, binning, frametype, target, imgtype, False]
            reply = daemons.daemon_function(daemon_id, 'add', arg_list)
            print(reply)

    elif command in ['multimage', 'multiimage', 'mimage']:
        # parse arguments
        if len(args) < 4:
            raise errors.InputError('Need at least: nexp exptime filter binning')
        elif misc.is_num(args[0]) and misc.is_num(args[1]) and misc.is_num(args[3]):
            # nexp exptime filter binning [object] [imgtype] [db_id]
            nexp = int(args[0])
            ut_list = params.UTS
            exptime = float(args[1])
            filt_list = misc.valid_strings(args[2].split(','), params.FILTER_LIST)
            binning = int(args[3])
            frametype = 'normal'
            if len(args) == 4:
                target = 'NA'
                imgtype = 'SCIENCE'
                db_id = None
            elif len(args) == 5:
                target = args[4]
                imgtype = 'SCIENCE'
                db_id = None
            elif len(args) == 6:
                target = args[4]
                imgtype = args[5]
                db_id = None
            elif len(args) == 7:
                target = args[4]
                imgtype = args[5]
                db_id = int(args[6])
            else:
                raise errors.InputError('Invalid arguments')
        elif misc.is_num(args[0]) and misc.is_num(args[2]) and misc.is_num(args[4]):
            # nexp uts exptime filter binning [object] [imgtype] [db_id]
            nexp = int(args[0])
            ut_list = misc.valid_ints(args[1].split(','), params.UTS)
            exptime = float(args[2])
            filt_list = misc.valid_strings(args[3].split(','), params.FILTER_LIST)
            binning = int(args[4])
            frametype = 'normal'
            if len(args) == 5:
                target = 'NA'
                imgtype = 'SCIENCE'
                db_id = None
            elif len(args) == 6:
                target = args[5]
                imgtype = 'SCIENCE'
                db_id = None
            elif len(args) == 7:
                target = args[5]
                imgtype = args[6]
                db_id = None
            elif len(args) == 8:
                target = args[5]
                imgtype = args[6]
                db_id = int(args[7])
            else:
                raise errors.InputError('Invalid arguments')
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        for filt in filt_list:
            arg_list = [nexp, ut_list, exptime, filt, binning, frametype, target, imgtype, db_id]
            reply = daemons.daemon_function(daemon_id, 'add_multi', arg_list)
            print(reply)

    elif command in ['multcolimage', 'multicolimage', 'mcolimage', 'mcimage']:
        # parse arguments
        if len(args) < 4:
            raise errors.InputError('Need at least: nexp exptime filters binning')
        elif misc.is_num(args[0]) and misc.is_num(args[1]) and misc.is_num(args[3]):
            # nexp exptime filters binning [object] [imgtype]
            nexp = int(args[0])
            ut_list = params.UTS
            exptime = float(args[1])
            filt_list = misc.valid_strings(args[2].split(','), params.FILTER_LIST)
            binning = int(args[3])
            frametype = 'normal'
            if len(args) == 4:
                target = 'NA'
                imgtype = 'SCIENCE'
            elif len(args) == 5:
                target = args[4]
                imgtype = 'SCIENCE'
            elif len(args) == 6:
                target = args[4]
                imgtype = args[5]
            elif len(args) == 7:
                target = args[4]
                imgtype = args[5]
            else:
                raise errors.InputError('Invalid arguments')
        elif misc.is_num(args[0]) and misc.is_num(args[2]) and misc.is_num(args[4]):
            # nexp uts exptime filters binning [object] [imgtype]
            nexp = int(args[0])
            ut_list = misc.valid_ints(args[1].split(','), params.UTS)
            exptime = float(args[2])
            filt_list = misc.valid_strings(args[3].split(','), params.FILTER_LIST)
            binning = int(args[4])
            frametype = 'normal'
            if len(args) == 5:
                target = 'NA'
                imgtype = 'SCIENCE'
            elif len(args) == 6:
                target = args[5]
                imgtype = 'SCIENCE'
            elif len(args) == 7:
                target = args[5]
                imgtype = args[6]
            elif len(args) == 8:
                target = args[5]
                imgtype = args[6]
            else:
                raise errors.InputError('Invalid arguments')
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        for _ in range(nexp):
            for filt in filt_list:
                arg_list = [ut_list, exptime, filt, binning, frametype, target, imgtype, False]
                reply = daemons.daemon_function(daemon_id, 'add', arg_list)
                print(reply)

    elif command == 'glance':
        # parse arguments
        if len(args) < 3:
            raise errors.InputError('Need at least: exptime filter binning')
        elif misc.is_num(args[0]) and misc.is_num(args[2]):
            # exptime filter binning [object] [imgtype]
            ut_list = params.UTS
            exptime = float(args[0])
            filt_list = misc.valid_strings(args[1].split(','), params.FILTER_LIST)
            binning = int(args[2])
            frametype = 'normal'
            if len(args) == 3:
                target = 'NA'
                imgtype = 'SCIENCE'
            elif len(args) == 4:
                target = args[3]
                imgtype = 'SCIENCE'
            elif len(args) == 5:
                target = args[3]
                imgtype = args[4]
            else:
                raise errors.InputError('Invalid arguments')
        elif misc.is_num(args[1]) and misc.is_num(args[3]):
            # uts exptime filter binning [object] [imgtype]
            ut_list = misc.valid_ints(args[0].split(','), params.UTS)
            exptime = float(args[1])
            filt_list = misc.valid_strings(args[2].split(','), params.FILTER_LIST)
            binning = int(args[3])
            frametype = 'normal'
            if len(args) == 4:
                target = 'NA'
                imgtype = 'SCIENCE'
            elif len(args) == 5:
                target = args[4]
                imgtype = 'SCIENCE'
            elif len(args) == 6:
                target = args[4]
                imgtype = args[5]
            else:
                raise errors.InputError('Invalid arguments')
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        for filt in filt_list:
            arg_list = [ut_list, exptime, filt, binning, frametype, target, imgtype, True]
            reply = daemons.daemon_function(daemon_id, 'add', arg_list)
            print(reply)

    elif command == 'dark':
        # parse arguments
        if len(args) < 2:
            raise errors.InputError('Need at least: exptime binning')
        elif misc.is_num(args[0]) and misc.is_num(args[1]) and len(args) == 2:
            # exptime binning
            ut_list = params.UTS
            exptime = float(args[0])
            filt = None  # Dark
            binning = int(args[1])
            frametype = 'dark'
            target = 'NA'
            imgtype = 'DARK'
        elif misc.is_num(args[1]) and misc.is_num(args[2]) and len(args) == 3:
            # uts exptime binning
            ut_list = misc.valid_ints(args[0].split(','), params.UTS)
            exptime = float(args[1])
            filt = None  # Dark
            binning = int(args[2])
            frametype = 'dark'
            target = 'NA'
            imgtype = 'DARK'
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        arg_list = [ut_list, exptime, filt, binning, frametype, target, imgtype, False]
        reply = daemons.daemon_function(daemon_id, 'add', arg_list)
        print(reply)

    elif command in ['multdark', 'multidark', 'mdark']:
        # parse arguments
        if len(args) < 3:
            raise errors.InputError('Need at least: exptime binning')
        elif misc.is_num(args[1]) and misc.is_num(args[2]) and len(args) in [3, 4]:
            # nexp exptime binning [db_id]
            nexp = int(args[0])
            ut_list = params.UTS
            exptime = float(args[1])
            filt = None  # Dark
            binning = int(args[2])
            frametype = 'dark'
            target = 'NA'
            imgtype = 'DARK'
            if len(args) == 3:
                db_id = None
            else:
                db_id = int(args[3])
        elif misc.is_num(args[2]) and misc.is_num(args[3]) and len(args) in [4, 5]:
            # nexp uts exptime binning [db_id]
            nexp = int(args[0])
            ut_list = misc.valid_ints(args[1].split(','), params.UTS)
            exptime = float(args[2])
            filt = None  # Dark
            binning = int(args[3])
            frametype = 'dark'
            target = 'NA'
            imgtype = 'DARK'
            if len(args) == 4:
                db_id = None
            else:
                db_id = int(args[4])
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        arg_list = [nexp, ut_list, exptime, filt, binning, frametype, target, imgtype, db_id]
        reply = daemons.daemon_function(daemon_id, 'add_multi', arg_list)
        print(reply)

    elif command == 'bias':
        # parse arguments
        if len(args) < 1:
            raise errors.InputError('Need at least: binning')
        elif misc.is_num(args[0]) and len(args) == 1:
            # binning
            ut_list = params.UTS
            exptime = 0.0
            filt = None  # Dark
            binning = int(args[0])
            frametype = 'dark'
            target = 'NA'
            imgtype = 'BIAS'
        elif misc.is_num(args[1]) and len(args) == 2:
            # uts binning
            ut_list = misc.valid_ints(args[0].split(','), params.UTS)
            exptime = 0.0
            filt = None  # Dark
            binning = int(args[1])
            frametype = 'dark'
            target = 'NA'
            imgtype = 'BIAS'
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        arg_list = [ut_list, exptime, filt, binning, frametype, target, imgtype, False]
        reply = daemons.daemon_function(daemon_id, 'add', arg_list)
        print(reply)

    elif command in ['multbias', 'multibias', 'mbias']:
        # parse arguments
        if len(args) < 2:
            raise errors.InputError('Need at least: binning')
        elif misc.is_num(args[1]) and len(args) in [2, 3]:
            # nexp binning [db_id]
            nexp = int(args[0])
            ut_list = params.UTS
            exptime = 0.0
            filt = None  # Dark
            binning = int(args[1])
            frametype = 'dark'
            target = 'NA'
            imgtype = 'BIAS'
            if len(args) == 2:
                db_id = None
            else:
                db_id = int(args[2])
        elif misc.is_num(args[2]) and len(args) in [3, 4]:
            # nexp uts binning [db_id]
            nexp = int(args[0])
            ut_list = misc.valid_ints(args[1].split(','), params.UTS)
            exptime = 0.0
            filt = None  # Dark
            binning = int(args[2])
            frametype = 'dark'
            target = 'NA'
            imgtype = 'BIAS'
            if len(args) == 3:
                db_id = None
            else:
                db_id = int(args[3])
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        arg_list = [nexp, ut_list, exptime, filt, binning, frametype, target, imgtype, db_id]
        reply = daemons.daemon_function(daemon_id, 'add_multi', arg_list)
        print(reply)

    elif command == 'pause':
        reply = daemons.daemon_function(daemon_id, 'pause')
        print(reply)

    elif command in ['resume', 'unpause']:
        reply = daemons.daemon_function(daemon_id, 'resume')
        print(reply)

    elif command in ['get', 'list', 'ls']:
        # parse arguments
        if len(args) == 0:
            list_type = 'simple'
        elif len(args) == 1 and args[0] in ['v', 'V', '-v', '-V']:
            list_type = 'verbose'
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        if list_type == 'simple':
            reply = daemons.daemon_function(daemon_id, 'get_simple')
        elif list_type == 'verbose':
            reply = daemons.daemon_function(daemon_id, 'get')
        print(reply)

    elif command == 'clear':
        reply = daemons.daemon_function(daemon_id, 'clear')
        print(reply)

    # Unrecognized function
    else:
        raise errors.InputError('Unrecognized command "{}"'.format(command))


def print_info(info):
    """Print the full info dict."""
    print('####### QUEUE INFO #######')
    print('Status: {}'.format(info['status']))
    print('~~~~~~~')
    print('Current exposure:')
    try:
        print('   {}, {:.2f}, {}, {}, {}, {}, {}'.format(
              info['current_ut_list'],
              info['current_exptime'],
              info['current_filter'],
              info['current_binning'],
              info['current_frametype'],
              info['current_target'],
              info['current_imgtype']))
        print('Other items in queue:     {}'.format(info['queue_length'] - 1))
    except Exception:
        print('   None')
        print('Items in queue:     {}'.format(info['queue_length']))
    print('~~~~~~~')
    print('Uptime: {:.1f}s'.format(info['uptime']))
    print('Timestamp: {}'.format(info['timestamp']))
    print('###########################')


def print_info_s(info):
    """Print the info dict in a compact way."""
    print('QUEUE: [{}]'.format(info['status']))
    print('  Current exposure:', end=' ')
    try:
        print('   {}, {:.2f}, {}, {}, {}, {}, {}'.format(
              info['current_ut_list'],
              info['current_exptime'],
              info['current_filter'],
              info['current_binning'],
              info['current_frametype'],
              info['current_target'],
              info['current_imgtype']))
        print('  Other items in queue: {}'.format(info['queue_length'] - 1))
    except Exception:
        print('   None')
        print('  Items in queue: {}'.format(info['queue_length']))


def print_instructions():
    """Print instructions for using the daemon."""
    print('Usage: exq command [options]',
          'Daemon commands:',
          '  start                          start the daemon',
          '  shutdown                       shutdown the daemon',
          '  restart                        restart the daemon',
          '  kill                           kill the daemon',
          '  check/ping                     check the daemon for errors',
          'Exposure queue commands:',
          '  image [uts] exptime filter[s] binning [object] [imgtype]',
          '  multimage nexp [uts] exptime filter[s] binning [object] [imgtype]',
          '  multcolimage nexp [uts] exptime filter[s] binning [object] [imgtype]',
          '  glance [uts] exptime filter[s] binning [object] [imgtype]',
          '  dark [uts] exptime binning',
          '  multdark nexp [uts] exptime binning',
          '  bias [uts] binning',
          '  multbias nexp [uts] binning',
          '  pause                          pause taking exposures',
          '  unpause/resume                 resumes taking exposures',
          '  list [v]                       lists the current queue',
          '  clear                          empty the queue',
          '  info/status [v]                report current status',
          '  log [stdout]                   print daemon log (tail alias)',
          'Control commands:',
          '  i                              enter interactive mode',
          '  q/exit                         quit interactive mode',
          '  ?/help                         print these instructions',
          sep='\n')


if __name__ == "__main__":
    if len(sys.argv) == 1:
        print_instructions()
    else:
        command, *args = sys.argv[1:]
        if command == 'i':
            while True:
                interactive_input = input('{}> '.format(DAEMON_ID)).split()
                if len(interactive_input) > 0:
                    command, *args = interactive_input
                    if command in ['q', 'exit']:
                        break
                    else:
                        with misc.print_errors():
                            query(command, args, DAEMON_ID)
        else:
            with misc.print_errors():
                query(command, args, DAEMON_ID)
