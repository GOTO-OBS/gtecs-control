#!/usr/bin/env python3
"""A script to provide control over the exq daemon."""

import json
import os
import sys

from gtecs.common import logging
from gtecs.common.system import execute_long_command
from gtecs.control import daemons
from gtecs.control import misc
from gtecs.control import params
from gtecs.control.style import errortxt


def query(command, args):
    """Process a query."""
    daemon_id = os.path.basename(__file__)

    # Primary daemon control
    if command == 'start':
        host, port = daemons.get_daemon_host(daemon_id)
        pid = daemons.start_daemon(daemon_id)
        print(f'Daemon {daemon_id} started on {host}:{port} (PID {pid})')

    elif command == 'shutdown':
        host, port = daemons.get_daemon_host(daemon_id)
        daemons.shutdown_daemon(daemon_id)
        print(f'Daemon {daemon_id} shutdown on {host}:{port}')

    elif command == 'restart':
        host, port = daemons.get_daemon_host(daemon_id)
        pid = daemons.restart_daemon(daemon_id)
        print(f'Daemon {daemon_id} restarted on {host}:{port} (PID {pid})')

    elif command == 'kill':
        host, port = daemons.get_daemon_host(daemon_id)
        daemons.shutdown_daemon(daemon_id, kill=True)
        print(f'Daemon {daemon_id} killed on {host}:{port}')

    elif command in ['check', 'ping']:
        host, port = daemons.get_daemon_host(daemon_id)
        pid = daemons.check_daemon(daemon_id)
        print(f'Daemon {daemon_id} is running on {host}:{port} (PID {pid})')

    elif command in ['info', 'status']:
        if len(args) == 0:
            info_type = 'simple'
            force = False
        elif len(args) == 1 and args[0] in ['f', 'F', '-f', '-F', '--force-update']:
            info_type = 'simple'
            force = True
        elif len(args) == 1 and args[0] in ['v', 'V', '-v', '-V', '--verbose']:
            info_type = 'verbose'
            force = False
        elif len(args) == 1 and args[0] in ['r', 'R', '-r', '-R', '--raw']:
            info_type = 'raw'
            force = False
        elif (len(args) == 2 and
              ((args[0] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'verbose'
            force = True
        elif (len(args) == 2 and
              ((args[0] in ['r', 'R', '-r', '-R', '--raw'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['r', 'R', '-r', '-R', '--raw'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'raw'
            force = True
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            if info_type != 'raw':
                info_str = daemon.get_info_string(info_type == 'verbose', force)
            else:
                info = daemon.get_info(force)
                info_str = json.dumps(info, indent=2, default=repr)
        print(info_str)

    elif command in ['log', 'tail']:
        if 'stdout' in args:
            log_file = f'{daemon_id}-stdout.log'
            args.remove('stdout')
        else:
            log_file = f'{daemon_id}.log'
        log_path = logging.get_log_path() / log_file
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        execute_long_command(tail_command)

    # Daemon functions
    elif command == 'image':
        if len(args) < 3:
            raise ValueError('Need at least: exptime filter binning')
        elif misc.is_num(args[0]) and misc.is_num(args[2]):
            # exptime filter binning [object] [imgtype]
            uts = params.UTS_WITH_CAMERAS
            exptime = float(args[0])
            filt_list = misc.valid_strings(args[1].split(','), params.ALL_FILTERS + ['X'])
            binning = int(args[2])
            if len(args) == 3:
                target = 'NA'
                imgtype = 'SCIENCE'
            elif len(args) == 4:
                target = args[3]
                imgtype = 'SCIENCE'
            elif len(args) == 5:
                target = args[3]
                imgtype = args[4].upper()
            else:
                raise ValueError('Invalid arguments')
        elif misc.is_num(args[1]) and misc.is_num(args[3]):
            # uts exptime filter binning [object] [imgtype]
            uts = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            exptime = float(args[1])
            filt_list = misc.valid_strings(args[2].split(','), params.ALL_FILTERS + ['X'])
            binning = int(args[3])
            if len(args) == 4:
                target = 'NA'
                imgtype = 'SCIENCE'
            elif len(args) == 5:
                target = args[4]
                imgtype = 'SCIENCE'
            elif len(args) == 6:
                target = args[4]
                imgtype = args[5].upper()
            else:
                raise ValueError('Invalid arguments')
        else:
            raise ValueError('Invalid arguments')
        nexp = 1
        frametype = 'normal'
        glance = False
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            info = daemon.get_info(force_update=False)
            for filt in filt_list:
                daemon.add(exptime, nexp, filt, binning, frametype, target, imgtype, glance, uts)
                out_str = 'Added {}{:.0f}s {} {}{}, now {} items in queue'.format(
                    '{}x '.format(nexp) if nexp > 1 else '',
                    exptime,
                    filt if filt is not None else 'X',
                    'exposure' if not glance else 'glance',
                    's' if nexp > 1 else '',
                    len(info['queue_length']),
                )
                if info['status'] == 'Paused':
                    out_str += ' [paused]'
                print(out_str)

    elif command in ['multimage', 'multiimage', 'mimage']:
        if len(args) < 4:
            raise ValueError('Need at least: nexp exptime filter binning')
        elif misc.is_num(args[0]) and misc.is_num(args[1]) and misc.is_num(args[3]):
            # nexp exptime filter binning [object] [imgtype]
            nexp = int(args[0])
            uts = params.UTS_WITH_CAMERAS
            exptime = float(args[1])
            filt_list = misc.valid_strings(args[2].split(','), params.ALL_FILTERS + ['X'])
            binning = int(args[3])
            if len(args) == 4:
                target = 'NA'
                imgtype = 'SCIENCE'
            elif len(args) == 5:
                target = args[4]
                imgtype = 'SCIENCE'
            elif len(args) == 6:
                target = args[4]
                imgtype = args[5].upper()
            else:
                raise ValueError('Invalid arguments')
        elif misc.is_num(args[0]) and misc.is_num(args[2]) and misc.is_num(args[4]):
            # nexp uts exptime filter binning [object] [imgtype]
            nexp = int(args[0])
            uts = misc.valid_ints(args[1].split(','), params.UTS_WITH_CAMERAS)
            exptime = float(args[2])
            filt_list = misc.valid_strings(args[3].split(','), params.ALL_FILTERS + ['X'])
            binning = int(args[4])
            if len(args) == 5:
                target = 'NA'
                imgtype = 'SCIENCE'
            elif len(args) == 6:
                target = args[5]
                imgtype = 'SCIENCE'
            elif len(args) == 7:
                target = args[5]
                imgtype = args[6].upper()
            else:
                raise ValueError('Invalid arguments')
        else:
            raise ValueError('Invalid arguments')
        frametype = 'normal'
        glance = False
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            info = daemon.get_info(force_update=False)
            for filt in filt_list:
                daemon.add(exptime, nexp, filt, binning, frametype, target, imgtype, glance, uts)
                out_str = 'Added {}{:.0f}s {} {}{}, now {} items in queue'.format(
                    '{}x '.format(nexp) if nexp > 1 else '',
                    exptime,
                    filt if filt is not None else 'X',
                    'exposure' if not glance else 'glance',
                    's' if nexp > 1 else '',
                    len(info['queue_length']),
                )
                if info['status'] == 'Paused':
                    out_str += ' [paused]'
                print(out_str)

    elif command in ['multcolimage', 'multicolimage', 'mcolimage', 'mcimage']:
        if len(args) < 4:
            raise ValueError('Need at least: nexp exptime filters binning')
        elif misc.is_num(args[0]) and misc.is_num(args[1]) and misc.is_num(args[3]):
            # nexp exptime filters binning [object] [imgtype]
            nexp = int(args[0])
            uts = params.UTS_WITH_CAMERAS
            exptime = float(args[1])
            filt_list = misc.valid_strings(args[2].split(','), params.ALL_FILTERS + ['X'])
            binning = int(args[3])
            if len(args) == 4:
                target = 'NA'
                imgtype = 'SCIENCE'
            elif len(args) == 5:
                target = args[4]
                imgtype = 'SCIENCE'
            elif len(args) == 6:
                target = args[4]
                imgtype = args[5].upper()
            else:
                raise ValueError('Invalid arguments')
        elif misc.is_num(args[0]) and misc.is_num(args[2]) and misc.is_num(args[4]):
            # nexp uts exptime filters binning [object] [imgtype]
            nexp = int(args[0])
            uts = misc.valid_ints(args[1].split(','), params.UTS_WITH_CAMERAS)
            exptime = float(args[2])
            filt_list = misc.valid_strings(args[3].split(','), params.ALL_FILTERS + ['X'])
            binning = int(args[4])
            if len(args) == 5:
                target = 'NA'
                imgtype = 'SCIENCE'
            elif len(args) == 6:
                target = args[5]
                imgtype = 'SCIENCE'
            elif len(args) == 7:
                target = args[5]
                imgtype = args[6].upper()
            else:
                raise ValueError('Invalid arguments')
        else:
            raise ValueError('Invalid arguments')
        frametype = 'normal'
        glance = False
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            info = daemon.get_info(force_update=False)
            for _ in range(nexp):
                for filt in filt_list:
                    daemon.add(exptime, nexp, filt, binning, frametype, target, imgtype, glance,
                               uts)
                out_str = 'Added {}{:.0f}s {} {}{}, now {} items in queue'.format(
                    '{}x '.format(nexp) if nexp > 1 else '',
                    exptime,
                    filt if filt is not None else 'X',
                    'exposure' if not glance else 'glance',
                    's' if nexp > 1 else '',
                    len(info['queue_length']),
                )
                if info['status'] == 'Paused':
                    out_str += ' [paused]'
                print(out_str)

    elif command == 'glance':
        if len(args) < 3:
            raise ValueError('Need at least: exptime filter binning')
        elif misc.is_num(args[0]) and misc.is_num(args[2]):
            # exptime filter binning [object]
            uts = params.UTS_WITH_CAMERAS
            exptime = float(args[0])
            filt_list = misc.valid_strings(args[1].split(','), params.ALL_FILTERS + ['X'])
            binning = int(args[2])
            if len(args) == 3:
                target = 'NA'
            elif len(args) == 4:
                target = args[3]
            else:
                raise ValueError('Invalid arguments')
        elif misc.is_num(args[1]) and misc.is_num(args[3]):
            # uts exptime filter binning [object]
            uts = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            exptime = float(args[1])
            filt_list = misc.valid_strings(args[2].split(','), params.ALL_FILTERS + ['X'])
            binning = int(args[3])
            if len(args) == 4:
                target = 'NA'
            elif len(args) == 5:
                target = args[4]
            else:
                raise ValueError('Invalid arguments')
        else:
            raise ValueError('Invalid arguments')
        nexp = 1
        frametype = 'normal'
        imgtype = 'GLANCE'
        glance = True
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            info = daemon.get_info(force_update=False)
            for filt in filt_list:
                daemon.add(exptime, nexp, filt, binning, frametype, target, imgtype, glance, uts)
                out_str = 'Added {}{:.0f}s {} {}{}, now {} items in queue'.format(
                    '{}x '.format(nexp) if nexp > 1 else '',
                    exptime,
                    filt if filt is not None else 'X',
                    'exposure' if not glance else 'glance',
                    's' if nexp > 1 else '',
                    len(info['queue_length']),
                )
                if info['status'] == 'Paused':
                    out_str += ' [paused]'
                print(out_str)

    elif command == 'dark':
        if len(args) < 2:
            raise ValueError('Need at least: exptime binning')
        elif misc.is_num(args[0]) and misc.is_num(args[1]) and len(args) == 2:
            # exptime binning
            uts = params.UTS_WITH_CAMERAS
            exptime = float(args[0])
            binning = int(args[1])
        elif misc.is_num(args[1]) and misc.is_num(args[2]) and len(args) == 3:
            # uts exptime binning
            uts = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            exptime = float(args[1])
            binning = int(args[2])
        else:
            raise ValueError('Invalid arguments')
        nexp = 1
        filt = None
        frametype = 'dark'
        target = 'NA'
        imgtype = 'DARK'
        glance = False
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            info = daemon.get_info(force_update=False)
            daemon.add(exptime, nexp, filt, binning, frametype, target, imgtype, glance, uts)
        out_str = 'Added {}{:.0f}s {} {}{}, now {} items in queue'.format(
            '{}x '.format(nexp) if nexp > 1 else '',
            exptime,
            filt if filt is not None else 'X',
            'exposure' if not glance else 'glance',
            's' if nexp > 1 else '',
            len(info['queue_length']),
        )
        if info['status'] == 'Paused':
            out_str += ' [paused]'
        print(out_str)

    elif command in ['multdark', 'multidark', 'mdark']:
        if len(args) < 3:
            raise ValueError('Need at least: exptime binning')
        elif misc.is_num(args[1]) and misc.is_num(args[2]) and len(args) == 3:
            # nexp exptime binning
            nexp = int(args[0])
            uts = params.UTS_WITH_CAMERAS
            exptime = float(args[1])
            binning = int(args[2])
        elif misc.is_num(args[2]) and misc.is_num(args[3]) and len(args) == 4:
            # nexp uts exptime binning
            nexp = int(args[0])
            uts = misc.valid_ints(args[1].split(','), params.UTS_WITH_CAMERAS)
            exptime = float(args[2])
            binning = int(args[3])
        else:
            raise ValueError('Invalid arguments')
        filt = None
        frametype = 'dark'
        target = 'NA'
        imgtype = 'DARK'
        glance = False
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            info = daemon.get_info(force_update=False)
            daemon.add(exptime, nexp, filt, binning, frametype, target, imgtype, glance, uts)
        out_str = 'Added {}{:.0f}s {} {}{}, now {} items in queue'.format(
            '{}x '.format(nexp) if nexp > 1 else '',
            exptime,
            filt if filt is not None else 'X',
            'exposure' if not glance else 'glance',
            's' if nexp > 1 else '',
            len(info['queue_length']),
        )
        if info['status'] == 'Paused':
            out_str += ' [paused]'
        print(out_str)

    elif command == 'bias':
        if len(args) < 1:
            raise ValueError('Need at least: binning')
        elif misc.is_num(args[0]) and len(args) == 1:
            # binning
            uts = params.UTS_WITH_CAMERAS
            binning = int(args[0])
        elif misc.is_num(args[1]) and len(args) == 2:
            # uts binning
            uts = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            binning = int(args[1])
        else:
            raise ValueError('Invalid arguments')
        exptime = 0.0
        nexp = 1
        filt = None
        frametype = 'dark'
        target = 'NA'
        imgtype = 'BIAS'
        glance = False
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            info = daemon.get_info(force_update=False)
            daemon.add(exptime, nexp, filt, binning, frametype, target, imgtype, glance, uts)
        out_str = 'Added {}{:.0f}s {} {}{}, now {} items in queue'.format(
            '{}x '.format(nexp) if nexp > 1 else '',
            exptime,
            filt if filt is not None else 'X',
            'exposure' if not glance else 'glance',
            's' if nexp > 1 else '',
            len(info['queue_length']),
        )
        if info['status'] == 'Paused':
            out_str += ' [paused]'
        print(out_str)

    elif command in ['multbias', 'multibias', 'mbias']:
        if len(args) < 2:
            raise ValueError('Need at least: binning')
        elif misc.is_num(args[1]) and len(args) == 2:
            # nexp binning
            nexp = int(args[0])
            uts = params.UTS_WITH_CAMERAS
            binning = int(args[1])
        elif misc.is_num(args[2]) and len(args) == 3:
            # nexp uts binning
            nexp = int(args[0])
            uts = misc.valid_ints(args[1].split(','), params.UTS_WITH_CAMERAS)
            binning = int(args[2])
        else:
            raise ValueError('Invalid arguments')
        exptime = 0.0
        filt = None
        frametype = 'dark'
        target = 'NA'
        imgtype = 'BIAS'
        glance = False
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            info = daemon.get_info(force_update=False)
            daemon.add(exptime, nexp, filt, binning, frametype, target, imgtype, glance, uts)
        out_str = 'Added {}{:.0f}s {} {}{}, now {} items in queue'.format(
            '{}x '.format(nexp) if nexp > 1 else '',
            exptime,
            filt if filt is not None else 'X',
            'exposure' if not glance else 'glance',
            's' if nexp > 1 else '',
            len(info['queue_length']),
        )
        if info['status'] == 'Paused':
            out_str += ' [paused]'
        print(out_str)

    elif command == 'pause':
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.pause()
        print('Exposure queue paused')

    elif command in ['resume', 'unpause']:
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.resume()
        print('Exposure queue resumed')

    elif command in ['get', 'list', 'ls']:
        if len(args) == 0:
            list_type = 'simple'
        elif len(args) == 1 and args[0] in ['v', 'V', '-v', '-V']:
            list_type = 'verbose'
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            if list_type == 'simple':
                info = daemon.get_simple()
            else:
                info = daemon.get()
        print(info)

    elif command == 'clear':
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            queue_length = daemon.clear()
        print(f'Cleared {queue_length:.0f} items from exposure queue')

    # Unrecognized function
    else:
        raise ValueError('Unrecognized command "{}"'.format(command))


if __name__ == '__main__':
    try:
        command, *args = sys.argv[1:]
    except ValueError:
        # no command, print help and exit
        command = 'help'

    if command in ['help', '?']:
        print(
            'Usage: exq command [options]',
            'Daemon commands:',
            '  start                          start the daemon',
            '  shutdown                       shutdown the daemon',
            '  restart                        restart the daemon',
            '  kill                           kill the daemon',
            '  check/ping                     check the daemon for errors',
            'Exposure queue commands:',
            '  image [uts] exptime filter[s] binning [object] [imgtype]',
            '  multimage nexp [uts] exptime filter[s] binning [object] [imgtype]',
            '  multcolimage nexp [uts] exptime filter[s] binning [object] [imgtype]',
            '  glance [uts] exptime filter[s] binning [object]',
            '  dark [uts] exptime binning',
            '  multdark nexp [uts] exptime binning',
            '  bias [uts] binning',
            '  multbias nexp [uts] binning',
            '  pause                          pause taking exposures',
            '  unpause/resume                 resumes taking exposures',
            '  list [-v]                      lists the current queue',
            '  clear                          empty the queue',
            '  info/status [-r|-v] [-f]       report current status [raw/verbose/force-update]',
            '  log [stdout]                   print daemon log (tail alias)',
            'Control commands:',
            '  i                              enter interactive mode',
            '  q/exit                         quit interactive mode',
            '  ?/help                         print these instructions',
            sep='\n')
        sys.exit()

    if command == 'i':
        while True:
            try:
                interactive_input = input(f'{os.path.basename(__file__)}> ').split()
            except EOFError:
                print()
                sys.exit()
            if len(interactive_input) > 0:
                command, *args = interactive_input
                if command in ['q', 'exit']:
                    sys.exit()
                if command == 'i':
                    print(errortxt('"ValueError: Already in interactive mode"'))
                    continue
                try:
                    query(command, args)
                except Exception as error:
                    print(errortxt(f'"{type(error).__name__}: {error}"'))

    try:
        query(command, args)
    except Exception as error:
        print(errortxt(f'"{type(error).__name__}: {error}"'))
