#!/usr/bin/env python
"""
A script to provide control over the exq daemon
"""

import os
import sys
import time
import readline
import Pyro4

from gtecs import misc
from gtecs import params
from gtecs import daemons


def interactive():
    while True:
        i_in = input('{}> '.format(daemon_ID)).split()
        if len(i_in) > 0:
            command, *args = i_in
            if command == 'q' or command == 'exit':
                return
            else:
                with misc.print_errors():
                    query(command, args)


def query(command, args):
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise misc.InputError('Already in interactive mode')

    # Primary daemon control
    elif command == 'start':
        reply = daemons.start_daemon(daemon_ID)
        print(reply)

    elif command == 'shutdown':
        reply = daemons.shutdown_daemon(daemon_ID)
        print(reply)

    elif command == 'restart':
        reply = daemons.restart_daemon(daemon_ID)
        print(reply)

    elif command == 'kill':
        reply = daemons.kill_daemon(daemon_ID)
        print(reply)

    elif command == 'ping':
        reply = daemons.ping_daemon(daemon_ID)
        print(reply)

    elif command == 'info':
        # parse arguments
        if len(args) == 0:
            info_type = 'simple'
        elif len(args) == 1 and args[0] in ['v','V','-v','-V']:
            info_type = 'verbose'
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_ID, 'get_info')
        # print response
        if not reply:
            raise ValueError('No info returned, check daemon')
        elif info_type == 'simple':
            print_info_s(reply)
        elif info_type == 'verbose':
            print_info(reply)

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            log_path = params.LOG_PATH + daemon_ID + '-stdout.log'
            args.remove('stdout')
        else:
            log_path = params.LOG_PATH + daemon_ID + '.log'
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        # send command
        misc.execute_command(tail_command)

    # Daemon functions
    elif command == 'image':
        # parse arguments
        if len(args) < 3:
            raise misc.InputError('Need at least: exptime filter binning')
        elif misc.is_num(args[0]) and misc.is_num(args[2]):
            # exptime filter binning [object] [imgtype]
            tel_list = list(params.TEL_DICT)
            exptime = float(args[0])
            filt = args[1]
            binning = int(args[2])
            frametype = 'normal'
            if len(args) == 3:
                target = 'NA'
                imgtype = 'SCIENCE'
            elif len(args) == 4:
                target = args[3]
                imgtype = 'SCIENCE'
            elif len(args) == 5:
                target = args[3]
                imgtype = args[4]
            else:
                raise misc.InputError('Invalid arguments')
        elif misc.is_num(args[1]) and misc.is_num(args[3]):
            # tels exptime filter binning [object] [imgtype]
            tel_list = misc.valid_ints(args[0].split(','),list(params.TEL_DICT))
            exptime = float(args[1])
            filt = args[2]
            binning = int(args[3])
            frametype = 'normal'
            if len(args) == 4:
                target = 'NA'
                imgtype = 'SCIENCE'
            elif len(args) == 5:
                target = args[4]
                imgtype = 'SCIENCE'
            elif len(args) == 6:
                target = args[4]
                imgtype = args[5]
            else:
                raise misc.InputError('Invalid arguments')
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        arg_list = [tel_list, exptime, filt, binning, frametype, target, imgtype]
        reply = daemons.daemon_function(daemon_ID, 'add', arg_list)
        print(reply)

    elif command in ['multimage', 'multiimage', 'mimage']:
        # parse arguments
        if len(args) < 4:
            raise misc.InputError('Need at least: Nexp exptime filter binning')
        elif misc.is_num(args[0]) and misc.is_num(args[1]) and misc.is_num(args[3]):
            # Nexp exptime filter binning [object] [imgtype] [expID]
            Nexp = int(args[0])
            tel_list = list(params.TEL_DICT)
            exptime = float(args[1])
            filt = args[2]
            binning = int(args[3])
            frametype = 'normal'
            if len(args) == 4:
                target  = 'NA'
                imgtype = 'SCIENCE'
                expID = None
            elif len(args) == 5:
                target  = args[4]
                imgtype = 'SCIENCE'
                expID = None
            elif len(args) == 6:
                target  = args[4]
                imgtype = args[5]
                expID = None
            elif len(args) == 7:
                target  = args[4]
                imgtype = args[5]
                expID = int(args[6])
            else:
                raise misc.InputError('Invalid arguments')
        elif misc.is_num(args[0]) and misc.is_num(args[2]) and misc.is_num(args[4]):
            # Nexp tels exptime filter binning [object] [imgtype] [expID]
            Nexp      = int(args[0])
            tel_list  = misc.valid_ints(args[1].split(','),list(params.TEL_DICT))
            exptime   = float(args[2])
            filt      = args[3]
            binning   = int(args[4])
            frametype = 'normal'
            if len(args) == 5:
                target  = 'NA'
                imgtype = 'SCIENCE'
                expID = None
            elif len(args) == 6:
                target  = args[5]
                imgtype = 'SCIENCE'
                expID = None
            elif len(args) == 7:
                target  = args[5]
                imgtype = args[6]
                expID = None
            elif len(args) == 8:
                target  = args[5]
                imgtype = args[6]
                expID = int(args[7])
            else:
                raise misc.InputError('Invalid arguments')
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        arg_list = [Nexp, tel_list, exptime, filt, binning, frametype, target, imgtype, expID]
        reply = daemons.daemon_function(daemon_ID, 'add_multi', arg_list)
        print(reply)

    elif command == 'dark':
        # parse arguments
        if len(args) < 2:
            raise misc.InputError('Need at least: exptime binning')
        elif misc.is_num(args[0]) and misc.is_num(args[1]) and len(args) == 2:
            # exptime binning
            tel_list  = list(params.TEL_DICT)
            exptime   = float(args[0])
            filt      = None # Dark
            binning   = int(args[1])
            frametype = 'dark'
            target    = 'NA'
            imgtype   = 'DARK'
        elif misc.is_num(args[1]) and misc.is_num(args[2]) and len(args) == 3:
            # tels exptime binning
            tel_list  = misc.valid_ints(args[0].split(','),list(params.TEL_DICT))
            exptime   = float(args[1])
            filt      = None # Dark
            binning   = int(args[2])
            frametype = 'dark'
            target    = 'NA'
            imgtype   = 'DARK'
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        arg_list = [tel_list, exptime, filt, binning, frametype, target, imgtype]
        reply = daemons.daemon_function(daemon_ID, 'add', arg_list)
        print(reply)

    elif command in ['multdark', 'multidark', 'mdark']:
        # parse arguments
        if len(args) < 3:
            raise misc.InputError('Need at least: exptime binning')
        elif misc.is_num(args[1]) and misc.is_num(args[2]) and len(args) in [3,4]:
            # Nexp exptime binning [expID]
            Nexp      = int(args[0])
            tel_list  = list(params.TEL_DICT)
            exptime   = float(args[1])
            filt      = None # Dark
            binning   = int(args[2])
            frametype = 'dark'
            target    = 'NA'
            imgtype   = 'DARK'
            if len(args) == 3:
                expID = None
            else:
                expID = int(args[3])
        elif misc.is_num(args[2]) and misc.is_num(args[3]) and len(args) in [4,5]:
            # Nexp tels exptime binning [expID]
            Nexp      = int(args[0])
            tel_list  = misc.valid_ints(args[1].split(','),list(params.TEL_DICT))
            exptime   = float(args[2])
            filt      = None # Dark
            binning   = int(args[3])
            frametype = 'dark'
            target    = 'NA'
            imgtype   = 'DARK'
            if len(args) == 4:
                expID = None
            else:
                expID = int(args[4])
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        arg_list = [Nexp, tel_list, exptime, filt, binning, frametype, target, imgtype, expID]
        reply = daemons.daemon_function(daemon_ID, 'add_multi', arg_list)
        print(reply)

    elif command == 'bias':
        # parse arguments
        if len(args) < 1:
            raise misc.InputError('Need at least: binning')
        elif misc.is_num(args[0]) and len(args) == 1:
            # binning
            tel_list  = list(params.TEL_DICT)
            exptime   = 0.0
            filt      = None # Dark
            binning   = int(args[0])
            frametype = 'dark'
            target    = 'NA'
            imgtype   = 'BIAS'
        elif misc.is_num(args[1]) and len(args) == 2:
            # tels binning
            tel_list  = misc.valid_ints(args[0].split(','),list(params.TEL_DICT))
            exptime   = 0.0
            filt      = None # Dark
            binning   = int(args[1])
            frametype = 'dark'
            target    = 'NA'
            imgtype   = 'BIAS'
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        arg_list = [tel_list, exptime, filt, binning, frametype, target, imgtype]
        reply = daemons.daemon_function(daemon_ID, 'add', arg_list)
        print(reply)

    elif command in ['multbias', 'multibias', 'mbias']:
        # parse arguments
        if len(args) < 2:
            raise misc.InputError('Need at least: binning')
        elif misc.is_num(args[1]) and len(args) in [2,3]:
            # Nexp binning [expID]
            Nexp      = int(args[0])
            tel_list  = list(params.TEL_DICT)
            exptime   = 0.0
            filt      = None # Dark
            binning   = int(args[1])
            frametype = 'dark'
            target    = 'NA'
            imgtype   = 'BIAS'
            if len(args) == 2:
                expID = None
            else:
                expID = int(args[2])
        elif misc.is_num(args[2]) and len(args) in [3,4]:
            # Nexp tels binning [expID]
            Nexp      = int(args[0])
            tel_list  = misc.valid_ints(args[1].split(','),list(params.TEL_DICT))
            exptime   = 0.0
            filt      = None # Dark
            binning   = int(args[2])
            frametype = 'dark'
            target    = 'NA'
            imgtype   = 'BIAS'
            if len(args) == 3:
                expID = None
            else:
                expID = int(args[3])
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        arg_list = [Nexp, tel_list, exptime, filt, binning, frametype, target, imgtype, expID]
        reply = daemons.daemon_function(daemon_ID, 'add_multi', arg_list)
        print(reply)

    elif command == 'pause':
        reply = daemons.daemon_function(daemon_ID, 'pause')
        print(reply)

    elif command in ['resume', 'unpause']:
        reply = daemons.daemon_function(daemon_ID, 'resume')
        print(reply)

    elif command in ['get', 'list', 'ls']:
        # parse arguments
        if len(args) == 0:
            list_type = 'simple'
        elif len(args) == 1 and args[0] in ['v','V','-v','-V']:
            list_type = 'verbose'
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        if list_type == 'simple':
            reply = daemons.daemon_function(daemon_ID, 'get_simple')
        elif list_type == 'verbose':
            reply = daemons.daemon_function(daemon_ID, 'get')
        print(reply)

    elif command == 'clear':
        reply = daemons.daemon_function(daemon_ID, 'clear')
        print(reply)

    # Unrecognized function
    else:
        raise misc.InputError('Unrecognized command "{}"'.format(command))


def print_info(info):
    print('####### QUEUE INFO #######')
    print('Status: %s' %info['status'])
    print('~~~~~~~')
    print('Current exposure:')
    try:
        print('   %r, %i, %s, %i, %s, %s, %s' \
            %(info['current_tel_list'], info['current_exptime'], info['current_filter'], info['current_binning'], info['current_frametype'], info['current_target'], info['current_imgtype']))
    except:
        print('   None')
    print('Items in queue:     %s' %info['queue_length'])
    print('~~~~~~~')
    print('Uptime: %.1fs' %info['uptime'])
    print('Ping: %.3fs' %info['ping'])
    print('Timestamp: %s' %info['timestamp'])
    print('###########################')


def print_info_s(info):
    print('QUEUE: [%s]' %info['status'])
    print('  Current exposure:', end=' ')
    try:
        print('   %r, %i, %s, %i, %s, %s, %s' \
            %(info['current_tel_list'], info['current_exptime'], info['current_filter'], info['current_binning'], info['current_frametype'], info['current_target'], info['current_imgtype']))
    except:
        print('None')
    print('  Items in queue: %s' %info['queue_length'])


def print_instructions():
    help_str = misc.bold('Usage:') + ' exq [command]' + '\n' +\
    ' ' + misc.undl('Daemon commands') + ':' + '\n' +\
    '  exq ' + misc.bold('start') + '          - start the daemon' + '\n' +\
    '  exq ' + misc.bold('shutdown') + '       - shutdown the daemon' + '\n' +\
    '  exq ' + misc.bold('restart') + '        - restart the daemon' + '\n' +\
    '  exq ' + misc.bold('kill') + '           - kill the daemon (' + misc.rtxt('emergency use') + ')' + '\n' +\
    '  exq ' + misc.bold('ping') + '           - ping the daemon' + '\n' +\
    ' ' + misc.undl('Exposure queue commands') + ':' + '\n' +\
    '  exq ' + misc.bold('image') + ' [tels] exptime filter binning [object] [imgtype]' + '\n' +\
    '  exq ' + misc.bold('multimage') + ' Nexp [tels] exptime filter binning [object] [imgtype]' + '\n' +\
    '  exq ' + misc.bold('dark') + '  [tels] exptime binning' + '\n' +\
    '  exq ' + misc.bold('multdark') + ' Nexp [tels] exptime binning' + '\n' +\
    '  exq ' + misc.bold('bias') + '  [tels] binning' + '\n' +\
    '  exq ' + misc.bold('multbias') + ' Nexp [tels] binning' + '\n' +\
    '  exq ' + misc.bold('pause') + '          - pause taking exposures' + '\n' +\
    '  exq ' + misc.bold('unpause') + '/' + misc.bold('resume') + ' - resumes taking exposures' + '\n' +\
    '  exq ' + misc.bold('list') + ' [v]' + '       - lists the current queue' + '\n' +\
    '  exq ' + misc.bold('clear') + '          - empty the queue' + '\n' +\
    '  exq ' + misc.bold('info') + ' [v]' + '       - report current status' + '\n' +\
    '  exq ' + misc.bold('log') + ' [stdout]' + '   - print daemon log (tail alias)' + '\n' +\
    ' ' + misc.undl('Control commands') + ':' + '\n' +\
    '  exq ' + misc.bold('i') + '              - enter interactive mode' + '\n' +\
    '  exq ' + misc.bold('q') + '/' + misc.bold('exit') + '         - quit interactive mode' + '\n' +\
    '  exq ' + misc.bold('?') + '/' + misc.bold('help') + '         - print these instructions'
    print(help_str)


if __name__ == "__main__":
    daemon_ID = os.path.basename(__file__)

    if len(sys.argv) == 1:
        print_instructions()
    else:
        command, *args = sys.argv[1:]
        if command == 'i':
            interactive()
        else:
            with misc.print_errors():
                query(command, args)
