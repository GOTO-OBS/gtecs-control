#!/usr/bin/env python
"""A script to provide control over fli interface daemons."""

import os
import sys

from gtecs import daemons
from gtecs import errors
from gtecs import misc
from gtecs import params


DAEMON_ID = os.path.basename(__file__)

DAEMON_IDS = []
for daemon_id in params.DAEMONS:
    if daemon_id in params.FLI_INTERFACES:
        DAEMON_IDS.append(daemon_id)
DAEMON_IDS.sort()


def query(command, args, daemon_ids):
    """Process a query."""
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise errors.InputError('Already in interactive mode')

    # Primary daemon control
    elif command == 'start':
        for daemon_id in daemon_ids:
            with misc.print_errors():
                reply = daemons.start_daemon(daemon_id)
                print(reply)

    elif command == 'shutdown':
        for daemon_id in daemon_ids:
            with misc.print_errors():
                reply = daemons.shutdown_daemon(daemon_id)
                print(reply)

    elif command == 'restart':
        for daemon_id in daemon_ids:
            with misc.print_errors():
                reply = daemons.restart_daemon(daemon_id)
                print(reply)

    elif command == 'kill':
        for daemon_id in daemon_ids:
            with misc.print_errors():
                reply = daemons.kill_daemon(daemon_id)
                print(reply)

    elif command == 'ping':
        for daemon_id in daemon_ids:
            with misc.print_errors():
                reply = daemons.ping_daemon(daemon_id)
                print(reply)

    elif command in ['log', 'tail']:
        if 'stdout' in args:
            stdout = True
            args.remove('stdout')
        else:
            stdout = False
        for daemon_id in daemon_ids:
            # parse arguments
            if stdout:
                log_path = params.LOG_PATH + daemon_id + '-stdout.log'
            else:
                log_path = params.LOG_PATH + daemon_id + '.log'
            tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
            # send command
            misc.execute_long_command(tail_command)

    # Unrecognized function
    else:
        raise errors.InputError('Unrecognized command "{}"'.format(command))


def print_instructions():
    """Print instructions for using the daemon."""
    print('Usage: fli command [options]',
          'Daemon commands:',
          '  start                          start the interfaces',
          '  shutdown                       shutdown the interfaces',
          '  restart                        restart the interfaces',
          '  kill                           kill the interfaces',
          '  ping                           ping the interfaces',
          'Fli commands:'
          '  log [stdout]                   print daemon log (tail alias)',
          'Control commands:',
          '  i                              enter interactive mode',
          '  q/exit                         quit interactive mode',
          '  ?/help                         print these instructions',
          sep='\n')


if __name__ == "__main__":
    if len(sys.argv) == 1:
        print_instructions()
    else:
        command, *args = sys.argv[1:]
        if command == 'i':
            while True:
                interactive_input = input('{}> '.format(DAEMON_ID)).split()
                if len(interactive_input) > 0:
                    command, *args = interactive_input
                    if command in ['q', 'exit']:
                        break
                    else:
                        with misc.print_errors():
                            query(command, args, DAEMON_IDS)
        else:
            with misc.print_errors():
                query(command, args, DAEMON_IDS)
