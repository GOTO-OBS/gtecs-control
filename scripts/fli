#!/usr/bin/env python

########################################################################
#                                fli.py                                #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#     G-TeCS script to provide control over fli interface daemons      #
#                      Martin Dyer, Sheffield, 2017                    #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#                   Based on the SLODAR/pt5m system                    #
########################################################################

### Import ###
# Python modules
from __future__ import absolute_import
from __future__ import print_function
import os, sys
import readline
import time
import Pyro4
from six.moves import input
# TeCS modules
from gtecs.tecs_modules import misc
from gtecs.tecs_modules import params
from gtecs.tecs_modules import daemons

########################################################################
# Interactive functions

def interactive():
    while True:
        i_in = input('fli> ').split()
        if len(i_in) > 0:
            command, *args = i_in
            if command == 'q' or command == 'exit':
                return
            else:
                query(command, args)

def query(command, args):
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Primary control functions
    if command == 'start':
        for daemon_ID in daemon_IDs:
            with misc.print_errors():
                c = daemons.start_daemon(daemon_ID)
                if c: print(c)

    elif command == 'shutdown':
        for daemon_ID in daemon_IDs:
            with misc.print_errors():
                c = daemons.shutdown_daemon(daemon_ID)
                if c: print(c)

    elif command == 'restart':
        for daemon_ID in daemon_IDs:
            with misc.print_errors():
                c = daemons.restart_daemon(daemon_ID)
                if c: print(c)

    elif command == 'kill':
        for daemon_ID in daemon_IDs:
            with misc.print_errors():
                c = daemons.kill_daemon(daemon_ID)
                if c: print(c)

    elif command == 'ping':
        for daemon_ID in daemon_IDs:
            with misc.print_errors():
                c = daemons.ping_daemon(daemon_ID)
                if c: print(c)

    elif command == 'help' or command == '?':
        print_instructions()

    elif command == 'i':
        print(misc.ERROR('Already in interactive mode'))

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Unrecognized function
    else:
        print(misc.ERROR('Unrecognized command "%s"' %command))

########################################################################
# Output formatting functions

def print_instructions():
    help_str = misc.bold('Usage:') + ' fli [command]' + '\n' +\
    ' ' + misc.undl('Interface commands') + ':' + '\n' +\
    '  fli ' + misc.bold('start') + '             - start the interfaces' + '\n' +\
    '  fli ' + misc.bold('shutdown') + '          - shutdown the interfaces' + '\n' +\
    '  fli ' + misc.bold('restart') + '           - restart the interfaces' + '\n' +\
    '  fli ' + misc.bold('kill') + '              - kill the interfaces (' + misc.rtxt('emergency use') + ')' + '\n' +\
    '  fli ' + misc.bold('ping') + '              - ping the interfaces' + '\n' +\
    ' ' + misc.undl('Control commands') + ':' + '\n' +\
    '  fli ' + misc.bold('i') + '                 - enter interactive mode' + '\n' +\
    '  fli ' + misc.bold('q') + '/' + misc.bold('exit') + '            - quit interactive mode' + '\n' +\
    '  fli ' + misc.bold('?') + '/' + misc.bold('help') + '            - print these instructions'
    print(help_str)

########################################################################

daemon_IDs = []
for daemon_ID in params.DAEMONS:
    if daemon_ID in params.FLI_INTERFACES:
        daemon_IDs.append(daemon_ID)
daemon_IDs.sort()

if len(sys.argv) == 1:
    print_instructions()
else:
    command, *args = sys.argv[1:]
    if command == 'i':
        interactive()
    else:
        query(command, args)
