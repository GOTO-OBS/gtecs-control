#!/usr/bin/env python3
"""A script to provide control over the UT interface daemons."""

import json
import os
import sys

from gtecs.common import logging
from gtecs.common.system import execute_long_command
from gtecs.control import daemons
from gtecs.control import errors
from gtecs.control import misc
from gtecs.control import params
from gtecs.control.style import errortxt


def query(command, args):
    """Process a query."""
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise errors.InputError('Already in interactive mode')

    # Primary daemon control
    elif command == 'start':
        # parse arguments
        if len(args) == 0:
            ut_list = params.UTS
            hw_list = ['cam', 'foc', 'filt']
        elif len(args) == 1:
            if args[0] in ['cam', 'foc', 'filt']:
                ut_list = params.UTS
                hw_list = misc.valid_strings(args[0].split(','), ['cam', 'foc', 'filt'])
            else:
                ut_list = misc.valid_ints(args[0].split(','), params.UTS)
                hw_list = ['cam', 'foc', 'filt']
        elif len(args) == 2:
            ut_list = misc.valid_ints(args[0].split(','), params.UTS)
            hw_list = misc.valid_strings(args[1].split(','), ['cam', 'foc', 'filt'])
        else:
            raise errors.InputError('Invalid arguments')

        for ut in ut_list:
            for hw in hw_list:
                interface_id = f'{hw}{ut}'
                if interface_id not in params.INTERFACES:
                    continue
                try:
                    reply = daemons.start_daemon(interface_id)
                    print(reply)
                except Exception as error:
                    print(errortxt('"{}: {}"'.format(type(error).__name__, error)))

    elif command == 'shutdown':
        # parse arguments
        if len(args) == 0:
            ut_list = params.UTS
            hw_list = ['cam', 'foc', 'filt']
        elif len(args) == 1:
            if args[0] in ['cam', 'foc', 'filt']:
                ut_list = params.UTS
                hw_list = misc.valid_strings(args[0].split(','), ['cam', 'foc', 'filt'])
            else:
                ut_list = misc.valid_ints(args[0].split(','), params.UTS)
                hw_list = ['cam', 'foc', 'filt']
        elif len(args) == 2:
            ut_list = misc.valid_ints(args[0].split(','), params.UTS)
            hw_list = misc.valid_strings(args[1].split(','), ['cam', 'foc', 'filt'])
        else:
            raise errors.InputError('Invalid arguments')

        for ut in ut_list:
            for hw in hw_list:
                interface_id = f'{hw}{ut}'
                if interface_id not in params.INTERFACES:
                    continue
                try:
                    reply = daemons.shutdown_daemon(interface_id)
                    print(reply)
                except Exception as error:
                    print(errortxt('"{}: {}"'.format(type(error).__name__, error)))

    elif command == 'restart':
        # parse arguments
        if len(args) == 0:
            ut_list = params.UTS
            hw_list = ['cam', 'foc', 'filt']
        elif len(args) == 1:
            if args[0] in ['cam', 'foc', 'filt']:
                ut_list = params.UTS
                hw_list = misc.valid_strings(args[0].split(','), ['cam', 'foc', 'filt'])
            else:
                ut_list = misc.valid_ints(args[0].split(','), params.UTS)
                hw_list = ['cam', 'foc', 'filt']
        elif len(args) == 2:
            ut_list = misc.valid_ints(args[0].split(','), params.UTS)
            hw_list = misc.valid_strings(args[1].split(','), ['cam', 'foc', 'filt'])
        else:
            raise errors.InputError('Invalid arguments')

        for ut in ut_list:
            for hw in hw_list:
                interface_id = f'{hw}{ut}'
                if interface_id not in params.INTERFACES:
                    continue
                try:
                    reply = daemons.restart_daemon(interface_id)
                    print(reply)
                except Exception as error:
                    print(errortxt('"{}: {}"'.format(type(error).__name__, error)))

    elif command == 'kill':
        # parse arguments
        if len(args) == 0:
            ut_list = params.UTS
            hw_list = ['cam', 'foc', 'filt']
        elif len(args) == 1:
            if args[0] in ['cam', 'foc', 'filt']:
                ut_list = params.UTS
                hw_list = misc.valid_strings(args[0].split(','), ['cam', 'foc', 'filt'])
            else:
                ut_list = misc.valid_ints(args[0].split(','), params.UTS)
                hw_list = ['cam', 'foc', 'filt']
        elif len(args) == 2:
            ut_list = misc.valid_ints(args[0].split(','), params.UTS)
            hw_list = misc.valid_strings(args[1].split(','), ['cam', 'foc', 'filt'])
        else:
            raise errors.InputError('Invalid arguments')

        for ut in ut_list:
            for hw in hw_list:
                interface_id = f'{hw}{ut}'
                if interface_id not in params.INTERFACES:
                    continue
                try:
                    reply = daemons.kill_daemon(interface_id)
                    print(reply)
                except Exception as error:
                    print(errortxt('"{}: {}"'.format(type(error).__name__, error)))

    elif command in ['check', 'ping']:
        # parse arguments
        if len(args) == 0:
            ut_list = params.UTS
            hw_list = ['cam', 'foc', 'filt']
        elif len(args) == 1:
            if args[0] in ['cam', 'foc', 'filt']:
                ut_list = params.UTS
                hw_list = misc.valid_strings(args[0].split(','), ['cam', 'foc', 'filt'])
            else:
                ut_list = misc.valid_ints(args[0].split(','), params.UTS)
                hw_list = ['cam', 'foc', 'filt']
        elif len(args) == 2:
            ut_list = misc.valid_ints(args[0].split(','), params.UTS)
            hw_list = misc.valid_strings(args[1].split(','), ['cam', 'foc', 'filt'])
        else:
            raise errors.InputError('Invalid arguments')

        for ut in ut_list:
            for hw in hw_list:
                interface_id = f'{hw}{ut}'
                if interface_id not in params.INTERFACES:
                    continue
                try:
                    reply = daemons.check_daemon(interface_id)
                    print(reply)
                except Exception as error:
                    print(errortxt('"{}: {}"'.format(type(error).__name__, error)))

    elif command in ['info', 'status']:
        # parse arguments
        if len(args) == 0:
            info_type = 'verbose'
            force = False
        elif len(args) == 1 and args[0] in ['f', 'F', '-f', '-F', '--force-update']:
            info_type = 'verbose'
            force = True
        elif len(args) == 1 and args[0] in ['r', 'R', '-r', '-R', '--raw']:
            info_type = 'raw'
            force = False
        elif (len(args) == 2 and
              ((args[0] in ['r', 'R', '-r', '-R', '--raw'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['r', 'R', '-r', '-R', '--raw'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'raw'
            force = True
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        all_info = {}
        for ut in params.UTS:
            ut_info = []
            for hw in ['cam', 'foc', 'filt']:
                interface_id = f'{hw}{ut}'
                if interface_id not in params.INTERFACES:
                    continue
                try:
                    reply = daemons.daemon_function(interface_id, 'get_info', args=[force])
                    if not reply:
                        raise ValueError('No info returned, check daemon')
                    ut_info.append(reply)
                except Exception as error:
                    print(errortxt('"{}: {}"'.format(type(error).__name__, error)))
            all_info[ut] = ut_info
        # print response
        if info_type == 'verbose':
            print_info(all_info)
        elif info_type == 'raw':
            for ut in params.UTS:
                for reply in all_info[ut]:
                    print(json.dumps(reply, indent=2, default=repr))

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            stdout = True
            args.remove('stdout')
        else:
            stdout = False
        if args[0] in ['cam', 'foc', 'filt']:
            hw_list = [args[0]]
            args.remove(args[0])

        for i, ut in enumerate(params.UTS):
            for j, hw in enumerate(hw_list):
                interface_id = f'{hw}{ut}'
                # parse arguments
                if stdout:
                    log_file = interface_id + '-stdout.log'
                else:
                    log_file = interface_id + '.log'
                log_path = logging.get_log_path() / log_file
                tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
                # send command
                if i + j > 0:
                    print('~~~~~~~~~~~~~~~~~~~~~~')
                execute_long_command(tail_command)

    # Unrecognized function
    else:
        raise errors.InputError('Unrecognized command "{}"'.format(command))


def print_info(all_info):
    """Print the full info dict."""
    for ut in all_info:
        if len(all_info[ut]) > 0:
            print(f"UT {ut} ({params.UT_DICT[ut]['INTERFACE_HOST']}):")
        for info in all_info[ut]:
            host, port = daemons.get_daemon_host(info['daemon_id'])
            print('  {:>5} ({}:{}): {}'.format(info['daemon_id'], host, port, info['serial']))

    return


def print_instructions():
    """Print instructions for using the daemon."""
    print('Usage: intf command [options]',
          'Daemon commands:',
          '  start [uts] [cam|foc|filt]         start the interfaces',
          '  shutdown [uts] [cam|foc|filt]      shutdown the interfaces',
          '  restart  [uts] [cam|foc|filt]      restart the interfaces',
          '  kill [uts] [cam|foc|filt]          kill the interfaces',
          '  check/ping [uts] [cam|foc|filt]    check the interfaces for errors',
          'Interface commands:',
          '  info/status [-r] [-f]              report current status [raw/force-update]',
          '  log [stdout] [cam|foc|filt]        print daemon log (tail alias)',
          'Control commands:',
          '  i                                  enter interactive mode',
          '  q/exit                             quit interactive mode',
          '  ?/help                             print these instructions',
          sep='\n')


if __name__ == '__main__':
    if len(sys.argv) == 1:
        # No command: print help and exit
        print_instructions()
        sys.exit()

    command, *args = sys.argv[1:]
    if command != 'i':
        query(command, args)
    else:
        # Interactive mode
        while True:
            try:
                interactive_input = input('{}> '.format(os.path.basename(__file__))).split()
            except EOFError:
                print()
                sys.exit()
            if len(interactive_input) > 0:
                command, *args = interactive_input
                if command in ['q', 'exit']:
                    sys.exit()
                try:
                    query(command, args)
                except Exception as error:
                    print(errortxt('"{}: {}"'.format(type(error).__name__, error)))
