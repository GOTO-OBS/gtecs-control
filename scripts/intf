#!/usr/bin/env python3
"""A script to provide control over the UT interface daemons."""

import json
import os
import sys

from gtecs.control import daemons
from gtecs.control import errors
from gtecs.control import misc
from gtecs.control import params


DAEMON_ID = os.path.basename(__file__)

DAEMON_IDS = []
for daemon_id in params.DAEMONS:
    if daemon_id in params.INTERFACES:
        DAEMON_IDS.append(daemon_id)
DAEMON_IDS.sort()


def get_args(interface_id):
    """Format the arguments to send to the interface script.

    See also `parse_args()` in ut_interface.py.
    """
    args = [interface_id]
    for ut in params.INTERFACES[interface_id]:
        args.append('--ut')

        # UT number
        args.append(ut)

        # OTA details
        if params.UT_DICT[ut]['OTA'] is not None:
            hw_str = json.dumps(params.UT_DICT[ut]['OTA'], separators=(',', ':'))
            hw_str = hw_str.replace('{', '\\{')
            hw_str = hw_str.replace('}', '\\}')
            hw_str = hw_str.replace('"', '\\"')
            args.append('ota={}'.format(hw_str))

        # Camera details
        if params.UT_DICT[ut]['CAMERA'] is not None:
            hw_str = json.dumps(params.UT_DICT[ut]['CAMERA'], separators=(',', ':'))
            hw_str = hw_str.replace('{', '\\{')
            hw_str = hw_str.replace('}', '\\}')
            hw_str = hw_str.replace('"', '\\"')
            args.append('cam={}'.format(hw_str))

        # Focuser details
        if params.UT_DICT[ut]['FOCUSER'] is not None:
            hw_str = json.dumps(params.UT_DICT[ut]['FOCUSER'], separators=(',', ':'))
            hw_str = hw_str.replace('{', '\\{')
            hw_str = hw_str.replace('}', '\\}')
            hw_str = hw_str.replace('"', '\\"')
            args.append('foc={}'.format(hw_str))

        # Filter wheel details
        if params.UT_DICT[ut]['FILTERWHEEL'] is not None:
            hw_str = json.dumps(params.UT_DICT[ut]['FILTERWHEEL'], separators=(',', ':'))
            hw_str = hw_str.replace('{', '\\{')
            hw_str = hw_str.replace('}', '\\}')
            hw_str = hw_str.replace('"', '\\"')
            args.append('filt={}'.format(hw_str))

    return args


def query(command, args, daemon_ids):
    """Process a query."""
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise errors.InputError('Already in interactive mode')

    # Primary daemon control
    elif command == 'start':
        for daemon_id in daemon_ids:
            with misc.print_errors():
                reply = daemons.start_daemon(daemon_id, args=get_args(daemon_id))
                print(reply)

    elif command == 'shutdown':
        for daemon_id in daemon_ids:
            with misc.print_errors():
                reply = daemons.shutdown_daemon(daemon_id)
                print(reply)

    elif command == 'restart':
        for daemon_id in daemon_ids:
            with misc.print_errors():
                reply = daemons.restart_daemon(daemon_id, args=get_args(daemon_id))
                print(reply)

    elif command == 'kill':
        for daemon_id in daemon_ids:
            with misc.print_errors():
                reply = daemons.kill_daemon(daemon_id)
                print(reply)

    elif command in ['check', 'ping']:
        for daemon_id in daemon_ids:
            with misc.print_errors():
                reply = daemons.check_daemon(daemon_id)
                print(reply)

    elif command in ['info', 'status']:
        # parse arguments
        if len(args) == 0:
            info_type = 'verbose'
            force = False
        elif len(args) == 1 and args[0] in ['f', 'F', '-f', '-F', '--force-update']:
            info_type = 'verbose'
            force = True
        elif len(args) == 1 and args[0] in ['r', 'R', '-r', '-R', '--raw']:
            info_type = 'raw'
            force = False
        elif (len(args) == 2 and
              ((args[0] in ['r', 'R', '-r', '-R', '--raw'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['r', 'R', '-r', '-R', '--raw'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'raw'
            force = True
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply_list = []
        for daemon_id in daemon_ids:
            with misc.print_errors():
                reply = daemons.daemon_function(daemon_id, 'get_info', args=[force])
                if not reply:
                    raise ValueError('No info returned, check daemon')
                reply_list.append(reply)
        # print response
        if info_type == 'verbose':
            for reply in reply_list:
                print_info(reply)
        elif info_type == 'raw':
            print(reply_list)

    elif command in ['log', 'tail']:
        if 'stdout' in args:
            stdout = True
            args.remove('stdout')
        else:
            stdout = False
        for daemon_id in daemon_ids:
            # parse arguments
            if stdout:
                log_file = daemon_id + '-stdout.log'
            else:
                log_file = daemon_id + '.log'
            log_path = os.path.join(params.LOG_PATH, log_file)
            tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
            # send command
            misc.execute_long_command(tail_command)

    # Unrecognized function
    else:
        raise errors.InputError('Unrecognized command "{}"'.format(command))


def print_info(info):
    """Print the full info dict."""
    print('INTERFACE {} ({}):'.format(info['daemon_id'], params.DAEMONS[info['daemon_id']]['HOST']))
    if len(info['ota_serials']) > 0:
        print('   OTAs:          ', end='\t')
        for ut in info['uts']:
            if ut in info['ota_serials']:
                print('{}: {: <16}'.format(ut, info['ota_serials'][ut]), end='  ')
            else:
                print('{}: {: <16}'.format(ut, '----'), end='  ')
        print('')
    if len(info['cam_serials']) > 0:
        print('   Cameras:       ', end='\t')
        for ut in info['uts']:
            if ut in info['cam_serials']:
                print('{}: {: <16}'.format(ut, info['cam_serials'][ut]), end='  ')
            else:
                print('{}: {: <16}'.format(ut, '----'), end='  ')
        print('')
    if len(info['foc_serials']) > 0:
        print('   Focusers:      ', end='\t')
        for ut in info['uts']:
            if ut in info['foc_serials']:
                print('{}: {: <16}'.format(ut, info['foc_serials'][ut]), end='  ')
            else:
                print('{}: {: <16}'.format(ut, '----'), end='  ')
        print('')
    if len(info['filt_serials']) > 0:
        print('   Filter Wheels: ', end='\t')
        for ut in info['uts']:
            if ut in info['filt_serials']:
                print('{}: {: <16}'.format(ut, info['filt_serials'][ut]), end='  ')
            else:
                print('{}: {: <16}'.format(ut, '----'), end='  ')
        print('')


def print_instructions():
    """Print instructions for using the daemon."""
    print('Usage: intf command [options]',
          'Daemon commands:',
          '  start                          start the interfaces',
          '  shutdown                       shutdown the interfaces',
          '  restart                        restart the interfaces',
          '  kill                           kill the interfaces',
          '  check/ping                     check the interfaces for errors',
          'Interface commands:',
          '  info/status [-r] [-f]          report current status [raw/force-update]',
          '  log [stdout]                   print daemon log (tail alias)',
          'Control commands:',
          '  i                              enter interactive mode',
          '  q/exit                         quit interactive mode',
          '  ?/help                         print these instructions',
          sep='\n')


if __name__ == '__main__':
    if len(sys.argv) == 1:
        print_instructions()
    else:
        command, *args = sys.argv[1:]
        if command == 'i':
            while True:
                interactive_input = input('{}> '.format(DAEMON_ID)).split()
                if len(interactive_input) > 0:
                    command, *args = interactive_input
                    if command in ['q', 'exit']:
                        break
                    else:
                        with misc.print_errors():
                            query(command, args, DAEMON_IDS)
        else:
            with misc.print_errors():
                query(command, args, DAEMON_IDS)
