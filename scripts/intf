#!/usr/bin/env python3
"""A script to provide control over the UT interface daemons."""

import json
import os
import re
import sys

from gtecs.common import logging
from gtecs.common.style import errortxt
from gtecs.common.system import execute_long_command
from gtecs.control import daemons
from gtecs.control import params


def parse_interface_args(args, extra_args=False):
    """Parse the arguments for interface commands."""
    if len(args) == 0:
        uts = params.UTS
        hw_list = ['cam', 'foc', 'filt']
        other_args = []
    elif args[0] in ['cam', 'foc', 'filt']:
        uts = params.UTS
        hw_list = [args[0]]
        other_args = args[1:]
    elif args[0] in [str(ut) for ut in params.UTS]:
        uts = [int(args[0])]
        hw_list = ['cam', 'foc', 'filt']
        other_args = args[1:]
    elif match := re.match(r"^([a-z]+)(\d+)$", args[0]):
        if match.group(1) not in ['cam', 'foc', 'filt']:
            raise ValueError(f'Invalid interface type: {match.group(1)}')
        elif int(match.group(2)) not in params.UTS:
            raise ValueError(f'Invalid UT: {match.group(2)}')
        if args[0] not in params.INTERFACES:
            raise ValueError(f'Unknown interface: {args[0]}')
        uts = [int(match.group(2))]
        hw_list = [match.group(1)]
        other_args = args[1:]
    else:
        if extra_args is False:
            # No other arguments allowed
            raise ValueError('Invalid arguments')
        else:
            uts = params.UTS
            hw_list = ['cam', 'foc', 'filt']
            other_args = args

    interface_ids = []
    for ut in uts:
        for hw in hw_list:
            interface_id = f'{hw}{ut}'
            if interface_id not in params.INTERFACES:
                continue
            interface_ids.append(interface_id)

    if extra_args is False:
        if len(interface_ids) == 0:
            raise ValueError('No valid interfaces given')
        if len(other_args) != 0:
            raise ValueError('Invalid arguments')
        return interface_ids
    else:
        return interface_ids, other_args


def query(command, args):
    """Process a query."""
    # Primary daemon control
    if command == 'start':
        interface_ids = parse_interface_args(args)
        for interface_id in interface_ids:
            try:
                host, port = daemons.get_daemon_host(interface_id)
                pid = daemons.start_daemon(interface_id)
                print(f'Daemon {interface_id} started on {host}:{port} (PID {pid})')
            except Exception as error:
                print(errortxt('"{}: {}"'.format(type(error).__name__, error)))

    elif command == 'shutdown':
        interface_ids = parse_interface_args(args)
        for interface_id in interface_ids:
            try:
                host, port = daemons.get_daemon_host(interface_id)
                daemons.shutdown_daemon(interface_id)
                print(f'Daemon {interface_id} shutdown on {host}:{port}')
            except Exception as error:
                print(errortxt('"{}: {}"'.format(type(error).__name__, error)))

    elif command == 'restart':
        interface_ids = parse_interface_args(args)
        for interface_id in interface_ids:
            try:
                host, port = daemons.get_daemon_host(interface_id)
                pid = daemons.restart_daemon(interface_id)
                print(f'Daemon {interface_id} restarted on {host}:{port} (PID {pid})')
            except Exception as error:
                print(errortxt('"{}: {}"'.format(type(error).__name__, error)))

    elif command == 'kill':
        interface_ids = parse_interface_args(args)
        for interface_id in interface_ids:
            try:
                host, port = daemons.get_daemon_host(interface_id)
                daemons.shutdown_daemon(interface_id, kill=True)
                print(f'Daemon {interface_id} killed on {host}:{port}')
            except Exception as error:
                print(errortxt('"{}: {}"'.format(type(error).__name__, error)))

    elif command in ['check', 'ping']:
        interface_ids = parse_interface_args(args)
        for interface_id in interface_ids:
            try:
                host, port = daemons.get_daemon_host(interface_id)
                pid = daemons.check_daemon(interface_id)
                print(f'Daemon {interface_id} is running on {host}:{port} (PID {pid})')
            except Exception as error:
                print(errortxt('"{}: {}"'.format(type(error).__name__, error)))

    elif command in ['info', 'status']:
        if len(args) == 0:
            info_type = 'verbose'
            force = False
        elif len(args) == 1 and args[0] in ['f', 'F', '-f', '-F', '--force-update']:
            info_type = 'verbose'
            force = True
        elif len(args) == 1 and args[0] in ['r', 'R', '-r', '-R', '--raw']:
            info_type = 'raw'
            force = False
        elif (len(args) == 2 and
              ((args[0] in ['r', 'R', '-r', '-R', '--raw'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['r', 'R', '-r', '-R', '--raw'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'raw'
            force = True
        else:
            raise ValueError('Invalid arguments')

        for ut in params.UTS:
            if info_type == 'verbose':
                print(f"UT{ut} ({params.UT_DICT[ut]['INTERFACE_HOST']}):")

            for hw in ['cam', 'foc', 'filt']:
                interface_id = f'{hw}{ut}'
                if interface_id not in params.INTERFACES:
                    continue
                try:
                    daemons.check_daemon(interface_id)
                    with daemons.daemon_proxy(interface_id) as daemon:
                        info = daemon.get_info(force)
                    if not info:
                        raise ValueError('No info returned, check daemon')
                    if info_type == 'verbose':
                        host, port = daemons.get_daemon_host(info['daemon_id'])
                        print('  {:>5} ({}:{}): {}'.format(
                              info['daemon_id'], host, port, info['serial']))
                    elif info_type == 'raw':
                        print(json.dumps(info, indent=2, default=repr))
                except Exception as error:
                    print(errortxt('"{}: {}"'.format(type(error).__name__, error)))

    elif command in ['log', 'tail']:
        if 'stdout' in args:
            stdout = True
            args.remove('stdout')
        else:
            stdout = False
        interface_ids, tail_args = parse_interface_args(args, extra_args=True)
        for i, interface_id in enumerate(interface_ids):
            if stdout:
                log_file = interface_id + '-stdout.log'
            else:
                log_file = interface_id + '.log'
            log_path = logging.get_log_path() / log_file
            tail_command = 'tail {} {}'.format(log_path, ' '.join(tail_args))
            if i > 0:
                print('~~~~~~~~~~~~~~~~~~~~~~')
            execute_long_command(tail_command)

    # Unrecognized function
    else:
        raise ValueError('Unrecognized command "{}"'.format(command))


if __name__ == '__main__':
    daemon_id = os.path.basename(__file__)

    try:
        command, *args = sys.argv[1:]
    except ValueError:
        # no command, print help and exit
        command = 'help'

    if command in ['help', '?']:
        print(
            'Usage: intf command [options]',
            'Daemon commands:',
            '  start [uts] [cam|foc|filt]         start the interfaces',
            '  shutdown [uts] [cam|foc|filt]      shutdown the interfaces',
            '  restart  [uts] [cam|foc|filt]      restart the interfaces',
            '  kill [uts] [cam|foc|filt]          kill the interfaces',
            '  check/ping [uts] [cam|foc|filt]    check the interfaces for errors',
            'Interface commands:',
            '  info/status [-r] [-f]              report current status [raw/force-update]',
            '  log [stdout] [cam|foc|filt]        print daemon log (tail alias)',
            'Control commands:',
            '  i                                  enter interactive mode',
            '  q/exit                             quit interactive mode',
            '  ?/help                             print these instructions',
            sep='\n')
        sys.exit()

    if command == 'i':
        while True:
            try:
                interactive_input = input(f'{os.path.basename(__file__)}> ').split()
            except EOFError:
                print()
                sys.exit()
            if len(interactive_input) > 0:
                command, *args = interactive_input
                if command in ['q', 'exit']:
                    sys.exit()
                if command == 'i':
                    print(errortxt('"ValueError: Already in interactive mode"'))
                    continue
                try:
                    query(command, args)
                except Exception as error:
                    print(errortxt(f'"{type(error).__name__}: {error}"'))

    try:
        query(command, args)
    except Exception as error:
        print(errortxt(f'"{type(error).__name__}: {error}"'))
