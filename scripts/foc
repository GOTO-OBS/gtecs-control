#!/usr/bin/env python

########################################################################
#                                foc.py                                #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#           G-TeCS script to provide control over foc_daemon           #
#                    Martin Dyer, Sheffield, 2015-16                   #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#                   Based on the SLODAR/pt5m system                    #
########################################################################

### Import ###
# Python modules
from __future__ import absolute_import
from __future__ import print_function
import os, sys
import readline
import time
import Pyro4
# TeCS modules
from gtecs.tecs_modules import misc
from gtecs.tecs_modules import params
from six.moves import input

########################################################################
# Focuser control functions
def get_info():
    if not misc.daemon_is_running('foc'):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive('foc'):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as foc:
            foc._pyroTimeout = params.PROXY_TIMEOUT
            try:
                info = foc.get_info()
                return info
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

def set_focuser(pos,HW_list):
    if not misc.daemon_is_running('foc'):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive('foc'):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as foc:
            foc._pyroTimeout = params.PROXY_TIMEOUT
            try:
                c = foc.set_focuser(pos,HW_list)
                if c: print(c)
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

def move_focuser(steps,HW_list):
    if not misc.daemon_is_running('foc'):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive('foc'):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as foc:
            foc._pyroTimeout = params.PROXY_TIMEOUT
            try:
                c = foc.move_focuser(steps,HW_list)
                if c: print(c)
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

def home_focuser(HW_list):
    if not misc.daemon_is_running('foc'):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive('foc'):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as foc:
            foc._pyroTimeout = params.PROXY_TIMEOUT
            try:
                c = foc.home_focuser(HW_list)
                if c: print(c)
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

########################################################################
# Interactive mode
def interactive():
    while True:
        i_in = input('foc> ').split()
        if len(i_in) > 0:
            command, *args = i_in
            if command == 'q' or command == 'exit':
                return
            else:
                query(command, args)

def query(command, args):
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Primary control functions
    if command == 'start':
        misc.start_daemon('foc')
    elif command == 'shutdown':
        misc.shutdown_daemon('foc')
    elif command == 'kill':
        misc.kill_daemon('foc')
    elif command == 'ping':
        misc.ping_daemon('foc')
    elif command == 'help' or command == '?':
        print_instructions()
    elif command == 'i':
        print(misc.ERROR('Already in interactive mode'))

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Focuser control functions
    elif command == 'info':
        if len(args) == 0:
            info = get_info()
            if info:
                print_info_s(info)
            else:
                print(misc.ERROR('Problem retrieving info'))
        elif len(args) == 1 and args[0] in ['v','V','-v','-V']:
            info = get_info()
            if info:
                print_info(info)
            else:
                print(misc.ERROR('Problem retrieving info'))
        else:
            print(misc.ERROR('Invalid arguments'))

    elif command == 'set':
        if len(args) == 1 and misc.is_num(args[0]):
            set_focuser(int(args[0]),list(params.TEL_DICT))
        elif len(args) == 2 and misc.is_num(args[1]):
            valid = misc.valid_ints(args[0].split(','),list(params.TEL_DICT))
            if len(valid) > 0:
                set_focuser(int(args[1]),valid)
        else:
            print(misc.ERROR('Invalid arguments'))

    elif command == 'move':
        if len(args) == 1 and misc.is_num(args[0]):
            move_focuser(int(args[0]),list(params.TEL_DICT))
        elif len(args) == 2 and misc.is_num(args[1]):
            valid = misc.valid_ints(args[0].split(','),list(params.TEL_DICT))
            if len(valid) > 0:
                move_focuser(int(args[1]),valid)
        else:
            print(misc.ERROR('Invalid arguments'))

    elif command == 'home':
        if len(args) == 0:
            home_focuser(list(params.TEL_DICT))
        elif len(args) == 1:
            valid = misc.valid_ints(args[0].split(','),list(params.TEL_DICT))
            if len(valid) > 0:
                home_focuser(valid)
        else:
            print(misc.ERROR('Invalid arguments'))

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Unrecognized function
    else:
        print(misc.ERROR('Unrecognized command "%s"' %command))

def print_info(info):
    print('###### FOCUSER INFO #######')
    for tel in params.TEL_DICT:
        print('FOCUSER ' + str(tel) + ' (%s-%i)'%tuple(params.TEL_DICT[tel]))
        if info['status'+str(tel)] != 'Moving':
            print('Status: %s' %info['status'+str(tel)])
        else:
            print('Status: %s (%i)' %(info['status'+str(tel)],info['remaining'+str(tel)]))
        print('Current motor pos:    %s' %info['current_pos'+str(tel)])
        print('Maximum motor limit:  %s' %info['limit'+str(tel)])
        print('Internal temperature: %s' %info['int_temp'+str(tel)])
        print('External temperature: %s' %info['ext_temp'+str(tel)])
        print('Serial number:        %s' %info['serial_number'+str(tel)])
        print('~~~~~~~')
    print('Uptime: %.1fs' %info['uptime'])
    print('Ping: %.5fs' %info['ping'])
    print('Timestamp: %s' %info['timestamp'])
    print('###########################')

def print_info_s(info):
    for tel in params.TEL_DICT:
        print('FOCUSER ' + str(tel) + ' (%s-%i)'%tuple(params.TEL_DICT[tel]), end=' ')
        if info['status'+str(tel)] != 'Moving':
            print('  Current position: %s/%s' %(info['current_pos'+str(tel)],info['limit'+str(tel)]), end=' ')
            print('  [%s]' %info['status'+str(tel)])
        else:
            print('  %s (%i)' %(info['status'+str(tel)],info['remaining'+str(tel)]))

def print_instructions():
    help_str = misc.bold('Usage:') + ' foc [command]' + '\n' +\
    ' ' + misc.undl('Daemon commands') + ':' + '\n' +\
    '  foc ' + misc.bold('start') + '             - start the daemon' + '\n' +\
    '  foc ' + misc.bold('shutdown') + '          - shutdown the daemon' + '\n' +\
    '  foc ' + misc.bold('kill') + '              - kill the daemon (' + misc.rtxt('emergency use') + ')' + '\n' +\
    '  foc ' + misc.bold('ping') + '              - ping the daemon' + '\n' +\
    ' ' + misc.undl('Focuser commands') + ':' + '\n' +\
    '  foc ' + misc.bold('move') + ' [tels] steps' + ' - move by the given steps' + '\n' +\
    '  foc ' + misc.bold('set') + ' [tels] pos' + '    - move to the given position' + '\n' +\
    '  foc ' + misc.bold('home') + ' [tels]' + '       - move to the home position' + '\n' +\
    '  foc ' + misc.bold('info') + ' [v]' + '          - report current status' + '\n' +\
    ' ' + misc.undl('Control commands') + ':' + '\n' +\
    '  foc ' + misc.bold('i') + '                 - enter interactive mode' + '\n' +\
    '  foc ' + misc.bold('q') + '/' + misc.bold('exit') + '            - quit interactive mode' + '\n' +\
    '  foc ' + misc.bold('?') + '/' + misc.bold('help') + '            - print these instructions'
    print(help_str)

########################################################################
# Control system

if len(sys.argv) == 1:
    print_instructions()
else:
    DAEMON_ADDRESS = params.DAEMONS['foc']['ADDRESS']
    command, *args = sys.argv[1:]
    if command == 'i':
        interactive()
    else:
        query(command, args)
