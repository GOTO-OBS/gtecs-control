#!/usr/bin/env python3
"""A script to provide control over the cam daemon."""

import json
import os
import sys

from gtecs.common import logging
from gtecs.common.system import execute_long_command
from gtecs.control import daemons
from gtecs.control import errors
from gtecs.control import misc
from gtecs.control import params
from gtecs.control.style import errortxt


def query(command, args):
    """Process a query."""
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise errors.InputError('Already in interactive mode')

    # Primary daemon control
    elif command == 'start':
        reply = daemons.start_daemon('cam')
        print(reply)

    elif command == 'shutdown':
        reply = daemons.shutdown_daemon('cam')
        print(reply)

    elif command == 'restart':
        reply = daemons.restart_daemon('cam')
        print(reply)

    elif command == 'kill':
        reply = daemons.kill_daemon('cam')
        print(reply)

    elif command in ['check', 'ping']:
        reply = daemons.check_daemon('cam')
        print(reply)

    elif command in ['info', 'status']:
        # parse arguments
        if len(args) == 0:
            info_type = 'simple'
            force = False
        elif len(args) == 1 and args[0] in ['f', 'F', '-f', '-F', '--force-update']:
            info_type = 'simple'
            force = True
        elif len(args) == 1 and args[0] in ['v', 'V', '-v', '-V', '--verbose']:
            info_type = 'verbose'
            force = False
        elif len(args) == 1 and args[0] in ['r', 'R', '-r', '-R', '--raw']:
            info_type = 'raw'
            force = False
        elif (len(args) == 2 and
              ((args[0] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'verbose'
            force = True
        elif (len(args) == 2 and
              ((args[0] in ['r', 'R', '-r', '-R', '--raw'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['r', 'R', '-r', '-R', '--raw'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'raw'
            force = True
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function('cam', 'get_info', args=[force])
        # print response
        if not reply:
            raise ValueError('No info returned, check daemon')
        elif info_type == 'simple':
            print_info_s(reply)
        elif info_type == 'verbose':
            print_info(reply)
        elif info_type == 'raw':
            print(json.dumps(reply, indent=2, default=repr))

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            log_file = 'cam-stdout.log'
            args.remove('stdout')
        else:
            log_file = 'cam.log'
        log_path = logging.get_log_path() / log_file
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        # send command
        execute_long_command(tail_command)

    # Daemon functions
    elif command == 'image':
        # parse arguments
        if len(args) == 2 and misc.is_num(args[0]) and misc.is_num(args[1]):
            ut_list = params.UTS_WITH_CAMERAS
            exptime = float(args[0])
            binning = float(args[1])
            imgtype = 'MANUAL'
        elif len(args) == 3 and misc.is_num(args[1]) and misc.is_num(args[2]):
            ut_list = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            exptime = float(args[1])
            binning = float(args[2])
            imgtype = 'MANUAL'
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        arg_list = [exptime, binning, imgtype, ut_list]
        reply = daemons.daemon_function('cam', 'take_image', arg_list)
        print(reply)

    elif command == 'glance':
        # parse arguments
        if len(args) == 2 and misc.is_num(args[0]) and misc.is_num(args[1]):
            ut_list = params.UTS_WITH_CAMERAS
            exptime = float(args[0])
            binning = float(args[1])
            imgtype = 'GLANCE'
        elif len(args) == 3 and misc.is_num(args[1]) and misc.is_num(args[2]):
            ut_list = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            exptime = float(args[1])
            binning = float(args[2])
            imgtype = 'GLANCE'
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        arg_list = [exptime, binning, imgtype, ut_list]
        reply = daemons.daemon_function('cam', 'take_glance', arg_list)
        print(reply)

    elif command == 'dark':
        # parse arguments
        if len(args) == 2 and misc.is_num(args[0]) and misc.is_num(args[1]):
            ut_list = params.UTS_WITH_CAMERAS
            exptime = float(args[0])
            binning = float(args[1])
            imgtype = 'DARK'
        elif len(args) == 3 and misc.is_num(args[1]) and misc.is_num(args[2]):
            ut_list = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            exptime = float(args[1])
            binning = float(args[2])
            imgtype = 'DARK'
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        arg_list = [exptime, binning, imgtype, ut_list]
        reply = daemons.daemon_function('cam', 'take_dark', arg_list)
        print(reply)

    elif command == 'bias':
        # parse arguments
        if len(args) == 1:
            ut_list = params.UTS_WITH_CAMERAS
            exptime = 0.0
            binning = float(args[0])
            imgtype = 'BIAS'
        elif len(args) == 2:
            ut_list = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            exptime = 0.0
            binning = float(args[1])
            imgtype = 'BIAS'
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        arg_list = [exptime, binning, imgtype, ut_list]
        reply = daemons.daemon_function('cam', 'take_dark', arg_list)
        print(reply)

    elif command == 'abort':
        # parse arguments
        if len(args) == 0:
            ut_list = params.UTS_WITH_CAMERAS
        elif len(args) == 1:
            ut_list = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function('cam', 'abort_exposure', [ut_list])
        print(reply)

    elif command == 'window':
        # parse arguments
        if len(args) == 1 and args[0] in ['full', 'reset', 'clear']:
            ut_list = params.UTS_WITH_CAMERAS
            target_window = None
        elif len(args) == 2 and args[1] in ['full', 'reset', 'clear']:
            ut_list = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            target_window = None
        elif len(args) == 4 and (misc.is_num(args[0]) and misc.is_num(args[1]) and
                                 misc.is_num(args[2]) and misc.is_num(args[3])):
            ut_list = params.UTS_WITH_CAMERAS
            target_window = (int(args[0]), int(args[1]), int(args[2]), int(args[3]))
        elif len(args) == 5 and (misc.is_num(args[1]) and misc.is_num(args[2]) and
                                 misc.is_num(args[3]) and misc.is_num(args[4])):
            ut_list = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            target_window = (int(args[1]), int(args[2]), int(args[3]), int(args[4]))
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        if target_window is not None:
            reply = daemons.daemon_function('cam', 'set_window', [*target_window, ut_list])
        else:
            reply = daemons.daemon_function('cam', 'remove_window', [ut_list])
        print(reply)

    elif command == 'temp':
        # parse arguments
        if len(args) == 1:
            ut_list = params.UTS_WITH_CAMERAS
            target_temp = args[0]
        elif len(args) == 2:
            ut_list = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            target_temp = args[1]
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function('cam', 'set_temperature', [target_temp, ut_list])
        print(reply)

    # Unrecognized function
    else:
        raise errors.InputError('Unrecognized command "{}"'.format(command))


def print_info(info):
    """Print the full info dict."""
    print('####### CAMERA INFO #######')
    for ut in info['uts']:
        print('CAMERA {} ({})'.format(ut, params.UT_DICT[ut]['INTERFACE']))
        if info[ut]['status'] != 'Exposing':
            print('Status: {}'.format(info[ut]['status']))
        else:
            current_exposure = info['current_exposure']
            expstr = current_exposure['expstr']
            if 'exposure' in expstr:
                expstr = expstr.split(' ')[1]
            if current_exposure and ut in current_exposure['ut_list']:
                print('Status: {} {} ({:.2f}s)'.format(info[ut]['status'],
                                                       expstr,
                                                       info[ut]['remaining']))
                print('Exposure time:      {:.2f}s'.format(current_exposure['exptime']))
                print('Binning:            {:.0f}'.format(current_exposure['binning']))
                print('Frame type:         {}'.format(current_exposure['frametype']))
        print('Image window:       {}'.format(info[ut]['window_area']))
        print('CCD Temperature:    {:.2f}C'.format(info[ut]['ccd_temp']))
        print('Target Temperature: {:.2f}C'.format(info[ut]['target_temp']))
        print('Base Temperature:   {:.2f}C'.format(info[ut]['base_temp']))
        print('Cooler power:       {:.0f}%'.format(info[ut]['cooler_power']))
        print('Serial number:      {}'.format(info[ut]['serial_number']))
        print('Hardware class:     {}'.format(info[ut]['hw_class']))
        print('~~~~~~~')
    print('Latest run number:  {:d}'.format(info['latest_run_number']))
    print('Exposures taken:    {:d}'.format(info['num_taken']))
    print('~~~~~~~')
    print('Uptime: {:.1f}s'.format(info['uptime']))
    print('Timestamp: {}'.format(info['timestamp']))
    print('###########################')


def print_info_s(info):
    """Print the info dict in a compact way."""
    for ut in info['uts']:
        print('CAMERA {} ({})'.format(ut, params.UT_DICT[ut]['INTERFACE']), end=' ')
        if info[ut]['status'] != 'Exposing':
            print('  Temp: {:6.2f}C'.format(info[ut]['ccd_temp']), end=' ')
            print('  [{}]'.format(info[ut]['status']))
        else:
            current_exposure = info['current_exposure']
            expstr = current_exposure['expstr']
            if 'exposure' in expstr:
                expstr = expstr.split(' ')[1]
            print('  {} {} ({:.2f}s)'.format(info[ut]['status'],
                                             expstr,
                                             info[ut]['remaining']))


def print_instructions():
    """Print instructions for using the daemon."""
    print('Usage: cam command [options]',
          'Daemon commands:',
          '  start                          start the daemon',
          '  shutdown                       shutdown the daemon',
          '  restart                        restart the daemon',
          '  kill                           kill the daemon',
          '  check/ping                     check the daemon for errors',
          'Camera commands:',
          '  image [uts] exptime binning    take a normal exposure',
          '  glance [uts] exptime binning   take a temporary glance',
          '  dark [uts] exptime binning     take a dark frame',
          '  bias [uts] binning             take a bias frame',
          '  abort [uts]                    abort current exposure',
          '  window [uts] x y dx dy         set camera image window',
          '  window [uts] full|reset|clear  reset camera image window to full-frame',
          '  temp [uts] <temp>|cool|warm    set camera temperature ("cool"/"warm" are in params)',
          '  info/status [-r|-v] [-f]       report current status [raw/verbose/force-update]',
          '  log [stdout]                   print daemon log (alias for tail)',
          'Control commands:',
          '  i                              enter interactive mode',
          '  q/exit                         quit interactive mode',
          '  ?/help                         print these instructions',
          sep='\n')


if __name__ == '__main__':
    if len(sys.argv) == 1:
        # No command: print help and exit
        print_instructions()
        sys.exit()

    command, *args = sys.argv[1:]
    if command != 'i':
        query(command, args)
    else:
        # Interactive mode
        while True:
            try:
                interactive_input = input('{}> '.format(os.path.basename(__file__))).split()
            except EOFError:
                print()
                sys.exit()
            if len(interactive_input) > 0:
                command, *args = interactive_input
                if command in ['q', 'exit']:
                    sys.exit()
                try:
                    query(command, args)
                except Exception as error:
                    print(errortxt('"{}: {}"'.format(type(error).__name__, error)))
