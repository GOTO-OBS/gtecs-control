#!/usr/bin/env python3
"""A script to provide control over the cam daemon."""

import json
import os
import sys

from gtecs.common import logging
from gtecs.common.system import execute_long_command
from gtecs.control import daemons
from gtecs.control import misc
from gtecs.control import params


def query(command, args):
    """Process a query."""
    daemon_id = os.path.basename(__file__)

    # Primary daemon control
    if command == 'start':
        host, port = daemons.get_daemon_host(daemon_id)
        pid = daemons.start_daemon(daemon_id)
        print(f'Daemon {daemon_id} started on {host}:{port} (PID {pid})')

    elif command == 'shutdown':
        host, port = daemons.get_daemon_host(daemon_id)
        daemons.shutdown_daemon(daemon_id)
        print(f'Daemon {daemon_id} shutdown on {host}:{port}')

    elif command == 'restart':
        host, port = daemons.get_daemon_host(daemon_id)
        pid = daemons.restart_daemon(daemon_id)
        print(f'Daemon {daemon_id} restarted on {host}:{port} (PID {pid})')

    elif command == 'kill':
        host, port = daemons.get_daemon_host(daemon_id)
        daemons.shutdown_daemon(daemon_id, kill=True)
        print(f'Daemon {daemon_id} killed on {host}:{port}')

    elif command in ['check', 'ping']:
        host, port = daemons.get_daemon_host(daemon_id)
        pid = daemons.check_daemon(daemon_id)
        print(f'Daemon {daemon_id} is running on {host}:{port} (PID {pid})')

    elif command in ['info', 'status']:
        if len(args) == 0:
            info_type = 'simple'
            force = False
        elif len(args) == 1 and args[0] in ['f', 'F', '-f', '-F', '--force-update']:
            info_type = 'simple'
            force = True
        elif len(args) == 1 and args[0] in ['v', 'V', '-v', '-V', '--verbose']:
            info_type = 'verbose'
            force = False
        elif len(args) == 1 and args[0] in ['r', 'R', '-r', '-R', '--raw']:
            info_type = 'raw'
            force = False
        elif (len(args) == 2 and
              ((args[0] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'verbose'
            force = True
        elif (len(args) == 2 and
              ((args[0] in ['r', 'R', '-r', '-R', '--raw'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['r', 'R', '-r', '-R', '--raw'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'raw'
            force = True
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            if info_type != 'raw':
                info_str = daemon.get_info_string(info_type == 'verbose', force)
            else:
                info = daemon.get_info(force)
                info_str = json.dumps(info, indent=2, default=repr)
        print(info_str)

    elif command in ['log', 'tail']:
        if 'stdout' in args:
            log_file = f'{daemon_id}-stdout.log'
            args.remove('stdout')
        else:
            log_file = f'{daemon_id}.log'
        log_path = logging.get_log_path() / log_file
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        execute_long_command(tail_command)

    # Daemon functions
    elif command == 'image':
        if len(args) == 2 and misc.is_num(args[0]) and misc.is_num(args[1]):
            uts = params.UTS_WITH_CAMERAS
            exptime = float(args[0])
            binning = float(args[1])
            imgtype = 'MANUAL'
        elif len(args) == 3 and misc.is_num(args[1]) and misc.is_num(args[2]):
            uts = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            exptime = float(args[1])
            binning = float(args[2])
            imgtype = 'MANUAL'
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            expstr = daemon.take_image(exptime, binning, imgtype, uts)
        print(f'Taking exposure ({expstr})')

    elif command == 'glance':
        if len(args) == 2 and misc.is_num(args[0]) and misc.is_num(args[1]):
            uts = params.UTS_WITH_CAMERAS
            exptime = float(args[0])
            binning = float(args[1])
            imgtype = 'GLANCE'
        elif len(args) == 3 and misc.is_num(args[1]) and misc.is_num(args[2]):
            uts = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            exptime = float(args[1])
            binning = float(args[2])
            imgtype = 'GLANCE'
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.take_glance(exptime, binning, imgtype, uts)
        print('Taking glance exposure')

    elif command == 'dark':
        if len(args) == 2 and misc.is_num(args[0]) and misc.is_num(args[1]):
            uts = params.UTS_WITH_CAMERAS
            exptime = float(args[0])
            binning = float(args[1])
            imgtype = 'DARK'
        elif len(args) == 3 and misc.is_num(args[1]) and misc.is_num(args[2]):
            uts = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            exptime = float(args[1])
            binning = float(args[2])
            imgtype = 'DARK'
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            expstr = daemon.take_dark(exptime, binning, imgtype, uts)
        print(f'Taking dark exposure ({expstr})')

    elif command == 'bias':
        if len(args) == 1:
            uts = params.UTS_WITH_CAMERAS
            exptime = 0.0
            binning = float(args[0])
            imgtype = 'BIAS'
        elif len(args) == 2:
            uts = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            exptime = 0.0
            binning = float(args[1])
            imgtype = 'BIAS'
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            expstr = daemon.take_dark(exptime, binning, imgtype, uts)
        print(f'Taking bias exposure ({expstr})')

    elif command == 'abort':
        if len(args) == 0:
            uts = params.UTS_WITH_CAMERAS
        elif len(args) == 1:
            uts = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.abort_exposure(uts)
        print('Exposures aborted')

    elif command == 'clear':
        if len(args) == 0:
            uts = params.UTS_WITH_CAMERAS
        elif len(args) == 1:
            uts = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.clear_queue(uts)
        print('Image memory cleared')

    elif command == 'window':
        if len(args) == 1 and args[0] in ['full', 'reset', 'clear']:
            uts = params.UTS_WITH_CAMERAS
            target_window = None
        elif len(args) == 2 and args[1] in ['full', 'reset', 'clear']:
            uts = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            target_window = None
        elif len(args) == 4 and (misc.is_num(args[0]) and misc.is_num(args[1]) and
                                 misc.is_num(args[2]) and misc.is_num(args[3])):
            uts = params.UTS_WITH_CAMERAS
            target_window = (int(args[0]), int(args[1]), int(args[2]), int(args[3]))
        elif len(args) == 5 and (misc.is_num(args[1]) and misc.is_num(args[2]) and
                                 misc.is_num(args[3]) and misc.is_num(args[4])):
            uts = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            target_window = (int(args[1]), int(args[2]), int(args[3]), int(args[4]))
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        if target_window is not None:
            with daemons.daemon_proxy(daemon_id) as daemon:
                daemon.set_window(*target_window, uts)
            print('Image window set to {:.0f},{:.0f},{:.0f},{:.0f}'.format(*target_window))
        else:
            with daemons.daemon_proxy(daemon_id) as daemon:
                daemon.remove_window(uts)
            print('Image window set to full-frame')

    elif command == 'measure_hfds':
        if len(args) == 1:
            command = args[0]
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.measure_image_hfds(command)
        if command == 'on':
            out_str = 'Image HFD measurement enabled'
        elif command == 'off':
            out_str = 'Image HFD measurement disabled'
        print(out_str)

    elif command == 'temp':
        if len(args) == 1:
            uts = params.UTS_WITH_CAMERAS
            target_temp = args[0]
        elif len(args) == 2:
            uts = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            target_temp = args[1]
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.set_temperature(target_temp, uts)
        print(f'Target temperature set to {target_temp}')

    # Help
    elif command in ['help', '?']:
        print(
            'Usage: cam command [options]',
            'Daemon commands:',
            '  start                          start the daemon',
            '  shutdown                       shutdown the daemon',
            '  restart                        restart the daemon',
            '  kill                           kill the daemon',
            '  check/ping                     check the daemon for errors',
            'Camera commands:',
            '  image [uts] exptime binning    take a normal exposure',
            '  glance [uts] exptime binning   take a temporary glance',
            '  dark [uts] exptime binning     take a dark frame',
            '  bias [uts] binning             take a bias frame',
            '  abort [uts]                    abort current exposure',
            '  clear [uts]                    clear any images in the queue',
            '  window [uts] x y dx dy         set camera image window',
            '  window [uts] full|reset|clear  reset camera image window to full-frame',
            '  measure_hfds on|off            measure the image hfds?',
            '  temp [uts] <temp>|cool|warm    set camera temperature ("cool"/"warm" are in params)',
            '  info/status [-r|-v] [-f]       report current status [raw/verbose/force-update]',
            '  log [stdout]                   print daemon log (alias for tail)',
            'Control commands:',
            '  i                              enter interactive mode',
            '  q/exit                         quit interactive mode',
            '  ?/help                         print these instructions',
            sep='\n')

    # Unrecognized function
    else:
        raise ValueError('Unrecognized command "{}"'.format(command))


if __name__ == '__main__':
    try:
        command, *args = sys.argv[1:]
    except ValueError:
        command, args = 'help', None

    if command == 'i':
        while True:
            try:
                interactive_input = input(f'{os.path.basename(__file__)}> ').split()
            except EOFError:
                print()
                sys.exit()
            if len(interactive_input) > 0:
                command, *args = interactive_input
                if command in ['q', 'exit']:
                    sys.exit()
                elif command == 'i':
                    print('Already in interactive mode')
                    continue
                else:
                    query(command, args)
    else:
        query(command, args)
