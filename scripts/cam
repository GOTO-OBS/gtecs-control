#!/usr/bin/env python3
"""A script to provide control over the cam daemon."""

import os
import sys

from gtecs import daemons
from gtecs import errors
from gtecs import misc
from gtecs import params


DAEMON_ID = os.path.basename(__file__)


def query(command, args, daemon_id):
    """Process a query."""
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise errors.InputError('Already in interactive mode')

    # Primary daemon control
    elif command == 'start':
        reply = daemons.start_daemon(daemon_id)
        print(reply)

    elif command == 'shutdown':
        reply = daemons.shutdown_daemon(daemon_id)
        print(reply)

    elif command == 'restart':
        reply = daemons.restart_daemon(daemon_id)
        print(reply)

    elif command == 'kill':
        reply = daemons.kill_daemon(daemon_id)
        print(reply)

    elif command in ['check', 'ping']:
        reply = daemons.check_daemon(daemon_id)
        print(reply)

    elif command in ['info', 'status']:
        # parse arguments
        if len(args) == 0:
            info_type = 'simple'
            force = False
        elif len(args) == 1 and args[0] in ['v', 'V', '-v', '-V', '--verbose']:
            info_type = 'verbose'
            force = False
        elif len(args) == 1 and args[0] in ['f', 'F', '-f', '-F', '--force-update']:
            info_type = 'simple'
            force = True
        elif (len(args) == 2 and
              ((args[0] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'verbose'
            force = True
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_id, 'get_info', args=[force])
        # print response
        if not reply:
            raise ValueError('No info returned, check daemon')
        elif info_type == 'simple':
            print_info_s(reply)
        elif info_type == 'verbose':
            print_info(reply)

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            log_file = daemon_id + '-stdout.log'
            args.remove('stdout')
        else:
            log_file = daemon_id + '.log'
        log_path = os.path.join(params.LOG_PATH, log_file)
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        # send command
        misc.execute_long_command(tail_command)

    # Daemon functions
    elif command == 'image':
        # parse arguments
        if len(args) == 2 and misc.is_num(args[0]) and misc.is_num(args[1]):
            ut_list = params.UTS_WITH_CAMERAS
            exptime = float(args[0])
            binning = float(args[1])
            imgtype = 'SCIENCE'
        elif len(args) == 3 and misc.is_num(args[1]) and misc.is_num(args[2]):
            ut_list = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            exptime = float(args[1])
            binning = float(args[2])
            imgtype = 'SCIENCE'
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        arg_list = [exptime, binning, imgtype, ut_list]
        reply = daemons.daemon_function(daemon_id, 'take_image', arg_list)
        print(reply)

    elif command == 'glance':
        # parse arguments
        if len(args) == 2 and misc.is_num(args[0]) and misc.is_num(args[1]):
            ut_list = params.UTS_WITH_CAMERAS
            exptime = float(args[0])
            binning = float(args[1])
            imgtype = 'GLANCE'
        elif len(args) == 3 and misc.is_num(args[1]) and misc.is_num(args[2]):
            ut_list = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            exptime = float(args[1])
            binning = float(args[2])
            imgtype = 'GLANCE'
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        arg_list = [exptime, binning, imgtype, ut_list]
        reply = daemons.daemon_function(daemon_id, 'take_glance', arg_list)
        print(reply)

    elif command == 'dark':
        # parse arguments
        if len(args) == 2 and misc.is_num(args[0]) and misc.is_num(args[1]):
            ut_list = params.UTS_WITH_CAMERAS
            exptime = float(args[0])
            binning = float(args[1])
            imgtype = 'DARK'
        elif len(args) == 3 and misc.is_num(args[1]) and misc.is_num(args[2]):
            ut_list = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            exptime = float(args[1])
            binning = float(args[2])
            imgtype = 'DARK'
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        arg_list = [exptime, binning, imgtype, ut_list]
        reply = daemons.daemon_function(daemon_id, 'take_dark', arg_list)
        print(reply)

    elif command == 'bias':
        # parse arguments
        if len(args) == 1:
            ut_list = params.UTS_WITH_CAMERAS
            exptime = 0.0
            binning = float(args[0])
            imgtype = 'BIAS'
        elif len(args) == 2:
            ut_list = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            exptime = 0.0
            binning = float(args[1])
            imgtype = 'BIAS'
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        arg_list = [exptime, binning, imgtype, ut_list]
        reply = daemons.daemon_function(daemon_id, 'take_dark', arg_list)
        print(reply)

    elif command == 'abort':
        # parse arguments
        if len(args) == 0:
            ut_list = params.UTS_WITH_CAMERAS
        elif len(args) == 1:
            ut_list = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_id, 'abort_exposure', [ut_list])
        print(reply)

    elif command == 'temp':
        # parse arguments
        if len(args) == 1 and misc.is_num(args[0]):
            ut_list = params.UTS_WITH_CAMERAS
            target_temp = float(args[0])
        elif len(args) == 2 and misc.is_num(args[1]):
            ut_list = misc.valid_ints(args[0].split(','), params.UTS_WITH_CAMERAS)
            target_temp = float(args[1])
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_id, 'set_temperature', [target_temp, ut_list])
        print(reply)

    # Unrecognized function
    else:
        raise errors.InputError('Unrecognized command "{}"'.format(command))


def print_info(info):
    """Print the full info dict."""
    print('####### CAMERA INFO #######')
    for ut in params.UTS_WITH_CAMERAS:
        print('CAMERA {} ({})'.format(ut, params.UT_DICT[ut]['INTERFACE']))
        if info[ut]['status'] != 'Exposing':
            print('Status: {}'.format(info[ut]['status']))
        else:
            current_exposure = info['current_exposure']
            expstr = current_exposure['expstr']
            if 'exposure' in expstr:
                expstr = expstr.split(' ')[1]
            if current_exposure and ut in current_exposure['ut_list']:
                print('Status: {} {} ({:.2f}s)'.format(info[ut]['status'],
                                                       expstr,
                                                       info[ut]['remaining']))
                print('Exposure time:      {:.2f}s'.format(current_exposure['exptime']))
                print('Binning:            {:.0f}'.format(current_exposure['binning']))
                print('Frame type:         {}'.format(current_exposure['frametype']))
        print('CCD Temperature:    {:.2f}C'.format(info[ut]['ccd_temp']))
        print('Target Temperature: {:.2f}C'.format(info[ut]['target_temp']))
        print('Base Temperature:   {:.2f}C'.format(info[ut]['base_temp']))
        print('Cooler power:       {:.0f}%'.format(info[ut]['cooler_power']))
        print('Serial number:      {}'.format(info[ut]['serial_number']))
        print('Hardware class:     {}'.format(info[ut]['hw_class']))
        print('~~~~~~~')
    print('Latest run number:  {:d}'.format(info['latest_run_number']))
    print('Exposures taken:    {:d}'.format(info['num_taken']))
    print('~~~~~~~')
    print('Uptime: {:.1f}s'.format(info['uptime']))
    print('Timestamp: {}'.format(info['timestamp']))
    print('###########################')


def print_info_s(info):
    """Print the info dict in a compact way."""
    for ut in params.UTS_WITH_CAMERAS:
        print('CAMERA {} ({})'.format(ut, params.UT_DICT[ut]['INTERFACE']), end=' ')
        if info[ut]['status'] != 'Exposing':
            print('  Temp: {:6.2f}C'.format(info[ut]['ccd_temp']), end=' ')
            print('  [{}]'.format(info[ut]['status']))
        else:
            current_exposure = info['current_exposure']
            expstr = current_exposure['expstr']
            if 'exposure' in expstr:
                expstr = expstr.split(' ')[1]
            print('  {} {} ({:.2f}s)'.format(info[ut]['status'],
                                             expstr,
                                             info[ut]['remaining']))


def print_instructions():
    """Print instructions for using the daemon."""
    print('Usage: cam command [options]',
          'Daemon commands:',
          '  start                          start the daemon',
          '  shutdown                       shutdown the daemon',
          '  restart                        restart the daemon',
          '  kill                           kill the daemon',
          '  check/ping                     check the daemon for errors',
          'Camera commands:',
          '  image [uts] exptime binning    take a normal exposure',
          '  glance [uts] exptime binning   take a temporary glance',
          '  dark [uts] exptime binning     take a dark frame',
          '  bias [uts] binning             take a bias frame',
          '  abort [uts]                    abort current exposure',
          '  temp [uts] temp                set camera temperature',
          '  info/status [-v] [-f]          report current status [verbose/force-update]',
          '  log [stdout]                   print daemon log (alias for tail)',
          'Control commands:',
          '  i                              enter interactive mode',
          '  q/exit                         quit interactive mode',
          '  ?/help                         print these instructions',
          sep='\n')


if __name__ == '__main__':
    if len(sys.argv) == 1:
        print_instructions()
    else:
        command, *args = sys.argv[1:]
        if command == 'i':
            while True:
                interactive_input = input('{}> '.format(DAEMON_ID)).split()
                if len(interactive_input) > 0:
                    command, *args = interactive_input
                    if command in ['q', 'exit']:
                        break
                    else:
                        with misc.print_errors():
                            query(command, args, DAEMON_ID)
        else:
            with misc.print_errors():
                query(command, args, DAEMON_ID)
