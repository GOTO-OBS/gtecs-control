#!/usr/bin/env python

########################################################################
#                                cam.py                                #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#           G-TeCS script to provide control over cam_daemon           #
#                    Martin Dyer, Sheffield, 2015-16                   #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#                   Based on the SLODAR/pt5m system                    #
########################################################################

### Import ###
# Python modules
from __future__ import absolute_import
from __future__ import print_function
import os, sys
import readline
import time
import Pyro4
# TeCS modules
from gtecs.tecs_modules import misc
from gtecs.tecs_modules import params
from six.moves import input

########################################################################
# Camera control functions
def get_info():
    if not misc.daemon_is_running(daemon_ID):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive(daemon_ID):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as cam:
            cam._pyroTimeout = params.PROXY_TIMEOUT
            try:
                info = cam.get_info()
                return info
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

def take_image(exptime,HW_list):
    if not misc.daemon_is_running(daemon_ID):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive(daemon_ID):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as cam:
            cam._pyroTimeout = params.PROXY_TIMEOUT
            try:
                c = cam.take_image(exptime,HW_list)
                if c: print(c)
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

def take_dark(exptime,HW_list):
    if not misc.daemon_is_running(daemon_ID):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive(daemon_ID):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as cam:
            cam._pyroTimeout = params.PROXY_TIMEOUT
            try:
                c = cam.take_dark(exptime,HW_list)
                if c: print(c)
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

def take_bias(HW_list):
    if not misc.daemon_is_running(daemon_ID):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive(daemon_ID):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as cam:
            cam._pyroTimeout = params.PROXY_TIMEOUT
            try:
                c = cam.take_bias(HW_list)
                if c: print(c)
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

def abort_exposure(HW_list):
    if not misc.daemon_is_running(daemon_ID):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive(daemon_ID):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as cam:
            cam._pyroTimeout = params.PROXY_TIMEOUT
            try:
                c = cam.abort_exposure(HW_list)
                if c: print(c)
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

def set_temperature(target_temp, HW_list):
    if not misc.daemon_is_running(daemon_ID):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive(daemon_ID):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as cam:
            cam._pyroTimeout = params.PROXY_TIMEOUT
            try:
                c = cam.set_temperature(target_temp, HW_list)
                if c: print(c)
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

def set_flushes(target_flushes, HW_list):
    if not misc.daemon_is_running(daemon_ID):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive(daemon_ID):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as cam:
            cam._pyroTimeout = params.PROXY_TIMEOUT
            try:
                c = cam.set_flushes(target_flushes, HW_list)
                if c: print(c)
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

def set_bins(bins, HW_list):
    if not misc.daemon_is_running(daemon_ID):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive(daemon_ID):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as cam:
            cam._pyroTimeout = params.PROXY_TIMEOUT
            try:
                c = cam.set_bins(bins, HW_list)
                if c: print(c)
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

def set_area(area, HW_list):
    if not misc.daemon_is_running(daemon_ID):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive(daemon_ID):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as cam:
            cam._pyroTimeout = params.PROXY_TIMEOUT
            try:
                c = cam.set_area(area, HW_list)
                if c: print(c)
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

########################################################################
# Interactive mode
def interactive():
    while True:
        i_in = input('{}> '.format(daemon_ID)).split()
        if len(i_in) > 0:
            command, *args = i_in
            if command == 'q' or command == 'exit':
                return
            else:
                query(command, args)

def query(command, args):
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Primary control functions
    if command == 'start':
        misc.start_daemon(daemon_ID)
    elif command == 'shutdown':
        misc.shutdown_daemon(daemon_ID)
    elif command == 'kill':
        misc.kill_daemon(daemon_ID)
    elif command == 'ping':
        misc.ping_daemon(daemon_ID)
    elif command == 'help' or command == '?':
        print_instructions()
    elif command == 'i':
        print(misc.ERROR('Already in interactive mode'))

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Camera control functions
    elif command == 'info':
        if len(args) == 0:
            info = get_info()
            if info:
                print_info_s(info)
            else:
                print(misc.ERROR('Problem retrieving info'))
        elif len(args) == 1 and args[0] in ['v','V','-v','-V']:
            info = get_info()
            if info:
                print_info(info)
            else:
                print(misc.ERROR('Problem retrieving info'))
        else:
            print(misc.ERROR('Invalid arguments'))

    elif command == 'image':
        if len(args) == 1 and misc.is_num(args[0]):
            take_image(float(args[0]),list(params.TEL_DICT))
        elif len(args) == 2 and misc.is_num(args[1]):
            valid = misc.valid_ints(args[0].split(','),list(params.TEL_DICT))
            if len(valid) > 0:
                take_image(float(args[1]),valid)
        else:
            print(misc.ERROR('Invalid arguments'))

    elif command == 'dark':
        if len(args) == 1 and misc.is_num(args[0]):
            take_dark(float(args[0]),list(params.TEL_DICT))
        elif len(args) == 2 and misc.is_num(args[1]):
            valid = misc.valid_ints(args[0].split(','),list(params.TEL_DICT))
            if len(valid) > 0:
                take_dark(float(args[1]),valid)
        else:
            print(misc.ERROR('Invalid arguments'))

    elif command == 'bias':
        if len(args) == 0:
            take_bias(list(params.TEL_DICT))
        elif len(args) == 1:
            valid = misc.valid_ints(args[0].split(','),list(params.TEL_DICT))
            if len(valid) > 0:
                take_bias(valid)
        else:
            print(misc.ERROR('Invalid arguments'))

    elif command == 'abort':
        if len(args) == 0:
            abort_exposure(list(params.TEL_DICT))
        elif len(args) == 1:
            valid = misc.valid_ints(args[0].split(','),list(params.TEL_DICT))
            if len(valid) > 0:
                abort_exposure(valid)
        else:
            print(misc.ERROR('Invalid arguments'))

    elif command == 'temp':
        if len(args) == 1 and misc.is_num(args[0]):
            set_temperature(float(args[0]),list(params.TEL_DICT))
        elif len(args) == 2 and misc.is_num(args[1]):
            valid = misc.valid_ints(args[0].split(','),list(params.TEL_DICT))
            if len(valid) > 0:
                set_temperature(float(args[1]),valid)
        else:
            print(misc.ERROR('Invalid arguments'))

    elif command == 'flush':
        if len(args) == 1 and misc.is_num(args[0]):
            set_flushes(int(args[0]),list(params.TEL_DICT))
        elif len(args) == 2 and misc.is_num(args[1]):
            valid = misc.valid_ints(args[0].split(','),list(params.TEL_DICT))
            if len(valid) > 0:
                set_flushes(int(args[1]),valid)
        else:
            print(misc.ERROR('Invalid arguments'))

    elif command == 'bin':
        if len(args) == 2 and misc.is_num(args[0]) and misc.is_num(args[1]):
            set_bins([int(args[0]),int(args[1])],list(params.TEL_DICT))
        elif len(args) == 3 and misc.is_num(args[1]) and misc.is_num(args[2]):
            valid = misc.valid_ints(args[0].split(','),list(params.TEL_DICT))
            if len(valid) > 0:
                set_bins([int(args[1]),int(args[2])],valid)
        else:
            print(misc.ERROR('Invalid arguments'))

    elif command == 'area':
        if len(args) == 4 and misc.is_num(args[0]) and misc.is_num(args[1]) and misc.is_num(args[2]) and misc.is_num(args[3]):
            set_area([int(args[0]), int(args[1]), int(args[2]), int(args[3])],list(params.TEL_DICT))
        elif len(args) == 3 and misc.is_num(args[1]) and misc.is_num(args[2]) and misc.is_num(args[3]) and misc.is_num(args[4]):
            valid = misc.valid_ints(args[0].split(','),list(params.TEL_DICT))
            if len(valid) > 0:
                set_area([int(args[1]), int(args[2]), int(args[3]), int(args[4])],valid)
        else:
            print(misc.ERROR('Invalid arguments'))

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Unrecognized function
    else:
        print(misc.ERROR('Unrecognized command "%s"' %command))

def print_info(info):
    print('####### CAMERA INFO #######')
    for tel in params.TEL_DICT:
        print('CAMERA ' + str(tel) + ' (%s-%i)'%tuple(params.TEL_DICT[tel]))
        if info['status'+str(tel)] != 'Exposing':
            print('Status: %s' %info['status'+str(tel)])
        else:
            print('Status: %s %s (%.2f)' %(info['status'+str(tel)],info['run_ID'],info['remaining'+str(tel)]))
        print('Frame type:       %s' %info['frametype'+str(tel)])
        print('Exposure time:    %.2fs' %info['exptime'+str(tel)])
        print('Active area:      %s' %str(info['area'+str(tel)]))
        print('Bin factors:      %i,%i' %(info['bins'+str(tel)][0],info['bins'+str(tel)][1]))
        print('CCD Temperature:  %.2fC' %info['ccd_temp'+str(tel)])
        print('Base Temperature: %.2fC' %info['base_temp'+str(tel)])
        print('Cooler power:     %i%%' %info['cooler_power'+str(tel)])
        print('Serial number:    %s' %info['serial_number'+str(tel)])
        print('~~~~~~~')
    print('Uptime: %.1fs' %info['uptime'])
    print('Ping: %.5fs' %info['ping'])
    print('Timestamp: %s' %info['timestamp'])
    print('###########################')

def print_info_s(info):
    for tel in params.TEL_DICT:
        print('CAMERA ' + str(tel) + ' (%s-%i)'%tuple(params.TEL_DICT[tel]), end=' ')
        if info['status'+str(tel)] != 'Exposing':
            print('  Temp: %6.2fC' %info['ccd_temp'+str(tel)], end=' ')
            print('  [%s]' %info['status'+str(tel)])
        else:
            print('  %s %s (%.2f)' %(info['status'+str(tel)],info['run_ID'],info['remaining'+str(tel)]))

def print_instructions():
    help_str = misc.bold('Usage:') + ' cam [command]' + '\n' +\
    ' ' + misc.undl('Daemon commands') + ':' + '\n' +\
    '  cam ' + misc.bold('start') + '                - start the daemon' + '\n' +\
    '  cam ' + misc.bold('shutdown') + '             - shutdown the daemon' + '\n' +\
    '  cam ' + misc.bold('kill') + '                 - kill the daemon (' + misc.rtxt('emergency use') + ')' + '\n' +\
    '  cam ' + misc.bold('ping') + '                 - ping the daemon' + '\n' +\
    ' ' + misc.undl('Camera commands') + ':' + '\n' +\
    '  cam ' + misc.bold('image') + ' [tels] exptime' + ' - take a normal exposure' + '\n' +\
    '  cam ' + misc.bold('dark') + ' [tels] exptime' + '  - take a dark frame' + '\n' +\
    '  cam ' + misc.bold('bias') + ' [tels]' + '          - take a bias frame' + '\n' +\
    '  cam ' + misc.bold('abort') + ' [tels]' + '         - abort current exposure' + '\n' +\
    '  cam ' + misc.bold('bin') + ' [tels] h v' + '       - set horiz/vert binning factors' + '\n' +\
    '  cam ' + misc.bold('temp') + ' [tels] temp' + '     - set camera temperature' + '\n' +\
    '  cam ' + misc.bold('flush') + ' [tels] number' + '  - set no. of flushes before exposing' + '\n' +\
    '  cam ' + misc.bold('area') + ' [tels] x y X Y' + '  - sets the active area of the CCD' + '\n' +\
    '  cam ' + misc.bold('info') + ' [v]' + '        - report current status' + '\n' +\
    ' ' + misc.undl('Control commands') + ':' + '\n' +\
    '  cam ' + misc.bold('i') + '               - enter interactive mode' + '\n' +\
    '  cam ' + misc.bold('q') + '/' + misc.bold('exit') + '          - quit interactive mode' + '\n' +\
    '  cam ' + misc.bold('?') + '/' + misc.bold('help') + '          - print these instructions'
    print(help_str)

########################################################################
# Control system

daemon_ID = os.path.basename(__file__)

if len(sys.argv) == 1:
    print_instructions()
else:
    DAEMON_ADDRESS = params.DAEMONS[daemon_ID]['ADDRESS']
    command, *args = sys.argv[1:]
    if command == 'i':
        interactive()
    else:
        query(command, args)
