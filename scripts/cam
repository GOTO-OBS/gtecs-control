#!/usr/bin/env python
"""
A script to provide control over the cam daemon
"""

import os
import sys
import time
import readline
import Pyro4

from gtecs import misc
from gtecs import params
from gtecs import daemons


def interactive():
    while True:
        i_in = input('{}> '.format(daemon_ID)).split()
        if len(i_in) > 0:
            command, *args = i_in
            if command == 'q' or command == 'exit':
                return
            else:
                with misc.print_errors():
                    query(command, args)


def query(command, args):
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise misc.InputError('Already in interactive mode')

    # Primary daemon control
    elif command == 'start':
        reply = daemons.start_daemon(daemon_ID)
        print(reply)

    elif command == 'shutdown':
        reply = daemons.shutdown_daemon(daemon_ID)
        print(reply)

    elif command == 'restart':
        reply = daemons.restart_daemon(daemon_ID)
        print(reply)

    elif command == 'kill':
        reply = daemons.kill_daemon(daemon_ID)
        print(reply)

    elif command == 'ping':
        reply = daemons.ping_daemon(daemon_ID)
        print(reply)

    elif command == 'info':
        # parse arguments
        if len(args) == 0:
            info_type = 'simple'
        elif len(args) == 1 and args[0] in ['v','V','-v','-V']:
            info_type = 'verbose'
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_ID, 'get_info')
        # print response
        if not reply:
            raise ValueError('No info returned, check daemon')
        elif info_type == 'simple':
            print_info_s(reply)
        elif info_type == 'verbose':
            print_info(reply)

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            log_path = params.LOG_PATH + daemon_ID + '-stdout.log'
            args.remove('stdout')
        else:
            log_path = params.LOG_PATH + daemon_ID + '.log'
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        # send command
        misc.execute_command(tail_command)

    # Daemon functions
    elif command == 'image':
        # parse arguments
        if len(args) == 2 and misc.is_num(args[0]) and misc.is_num(args[1]):
            tel_list = list(params.TEL_DICT)
            exptime = float(args[0])
            binning = float(args[1])
            imgtype = 'SCIENCE'
        elif len(args) == 3 and misc.is_num(args[1]) and misc.is_num(args[2]):
            tel_list = misc.valid_ints(args[0].split(','),list(params.TEL_DICT))
            exptime = float(args[1])
            binning = float(args[2])
            imgtype = 'SCIENCE'
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        arg_list = [exptime, binning, imgtype, tel_list]
        reply = daemons.daemon_function(daemon_ID, 'take_image', arg_list)
        print(reply)

    elif command == 'dark':
        # parse arguments
        if len(args) == 2 and misc.is_num(args[0]) and misc.is_num(args[1]):
            tel_list = list(params.TEL_DICT)
            exptime = float(args[0])
            binning = float(args[1])
            imgtype = 'DARK'
        elif len(args) == 3 and misc.is_num(args[1]) and misc.is_num(args[2]):
            tel_list = misc.valid_ints(args[0].split(','),list(params.TEL_DICT))
            exptime = float(args[1])
            binning = float(args[2])
            imgtype = 'DARK'
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        arg_list = [exptime, binning, imgtype, tel_list]
        reply = daemons.daemon_function(daemon_ID, 'take_dark', arg_list)
        print(reply)

    elif command == 'bias':
        # parse arguments
        if len(args) == 1:
            tel_list = list(params.TEL_DICT)
            exptime = 0.0
            binning = float(args[0])
            imgtype = 'BIAS'
        elif len(args) == 2:
            tel_list = misc.valid_ints(args[0].split(','),list(params.TEL_DICT))
            exptime = 0.0
            binning = float(args[1])
            imgtype = 'BIAS'
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        arg_list = [exptime, binning, imgtype, tel_list]
        reply = daemons.daemon_function(daemon_ID, 'take_dark', arg_list)
        print(reply)

    elif command == 'abort':
        # parse arguments
        if len(args) == 0:
            tel_list = list(params.TEL_DICT)
        elif len(args) == 1:
            tel_list = misc.valid_ints(args[0].split(','),list(params.TEL_DICT))
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_ID, 'abort_exposure', [tel_list])
        print(reply)

    elif command == 'temp':
        # parse arguments
        if len(args) == 1 and misc.is_num(args[0]):
            tel_list = list(params.TEL_DICT)
            target_temp = float(args[0])
        elif len(args) == 2 and misc.is_num(args[1]):
            tel_list = misc.valid_ints(args[0].split(','),list(params.TEL_DICT))
            target_temp = float(args[1])
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_ID, 'set_temperature', [target_temp, tel_list])
        print(reply)

    # Unrecognized function
    else:
        raise misc.InputError('Unrecognized command "{}"'.format(command))


def print_info(info):
    print('####### CAMERA INFO #######')
    for tel in params.TEL_DICT:
        print('CAMERA ' + str(tel) + ' (%s-%i)'%tuple(params.TEL_DICT[tel]))
        if info['status'+str(tel)] != 'Exposing':
            print('Status: %s' %info['status'+str(tel)])
        else:
            print('Status: %s r%07d (%.2fs)' %(info['status'+str(tel)],info['run_number'],info['remaining'+str(tel)]))
            if info['current_exposure'] and tel in info['current_exposure'].tel_list:
                print('Exposure time:    %.2fs' %info['current_exposure'].exptime)
                print('Binning:          %i' %info['current_exposure'].binning)
                print('Frame type:       %s' %info['current_exposure'].frametype)
        print('CCD Temperature:  %.2fC' %info['ccd_temp'+str(tel)])
        print('Base Temperature: %.2fC' %info['base_temp'+str(tel)])
        print('Cooler power:     %i%%' %info['cooler_power'+str(tel)])
        print('Serial number:    %s' %info['serial_number'+str(tel)])
        print('~~~~~~~')
    print('Uptime: %.1fs' %info['uptime'])
    print('Ping: %.5fs' %info['ping'])
    print('Timestamp: %s' %info['timestamp'])
    print('###########################')


def print_info_s(info):
    for tel in params.TEL_DICT:
        print('CAMERA ' + str(tel) + ' (%s-%i)'%tuple(params.TEL_DICT[tel]), end=' ')
        if info['status'+str(tel)] != 'Exposing':
            print('  Temp: %6.2fC' %info['ccd_temp'+str(tel)], end=' ')
            print('  [%s]' %info['status'+str(tel)])
        else:
            print('  %s r%07d (%.2fs)' %(info['status'+str(tel)],info['run_number'],info['remaining'+str(tel)]))


def print_instructions():
    help_str = misc.bold('Usage:') + ' cam [command]' + '\n' +\
    ' ' + misc.undl('Daemon commands') + ':' + '\n' +\
    '  cam ' + misc.bold('start') + '                        - start the daemon' + '\n' +\
    '  cam ' + misc.bold('shutdown') + '                     - shutdown the daemon' + '\n' +\
    '  cam ' + misc.bold('restart') + '                      - restart the daemon' + '\n' +\
    '  cam ' + misc.bold('kill') + '                         - kill the daemon (' + misc.rtxt('emergency use') + ')' + '\n' +\
    '  cam ' + misc.bold('ping') + '                         - ping the daemon' + '\n' +\
    ' ' + misc.undl('Camera commands') + ':' + '\n' +\
    '  cam ' + misc.bold('image') + ' [tels] exptime binning' + ' - take a normal exposure' + '\n' +\
    '  cam ' + misc.bold('dark') + ' [tels] exptime binning' + '  - take a dark frame' + '\n' +\
    '  cam ' + misc.bold('bias') + ' [tels] binning' + '          - take a bias frame' + '\n' +\
    '  cam ' + misc.bold('abort') + ' [tels]' + '                 - abort current exposure' + '\n' +\
    '  cam ' + misc.bold('temp') + ' [tels] temp' + '             - set camera temperature' + '\n' +\
    '  cam ' + misc.bold('info') + ' [v]' + '                     - report current status' + '\n' +\
    '  cam ' + misc.bold('log') + ' [stdout]' + '                 - print daemon log (tail alias)' + '\n' +\
    ' ' + misc.undl('Control commands') + ':' + '\n' +\
    '  cam ' + misc.bold('i') + '                            - enter interactive mode' + '\n' +\
    '  cam ' + misc.bold('q') + '/' + misc.bold('exit') + '                       - quit interactive mode' + '\n' +\
    '  cam ' + misc.bold('?') + '/' + misc.bold('help') + '                       - print these instructions'
    print(help_str)


if __name__ == "__main__":
    daemon_ID = os.path.basename(__file__)

    if len(sys.argv) == 1:
        print_instructions()
    else:
        command, *args = sys.argv[1:]
        if command == 'i':
            interactive()
        else:
            with misc.print_errors():
                query(command, args)
