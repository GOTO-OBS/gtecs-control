#!/usr/bin/env python
"""Script to run in the morning to confirm the dome is closed."""

import argparse
import os
import sys
import time
from collections import Counter

import astropy.units as u
from astropy.time import Time

import gototile

from gtecs import logger
from gtecs import params
from gtecs.astronomy import night_startdate, sunalt_time
from gtecs.daemons import daemon_info
from gtecs.flags import Status
from gtecs.misc import execute_command, get_pid, make_pid_file
from gtecs.observing import wait_for_dome
from gtecs.slack import send_slack_msg

import numpy as np

import obsdb as db


def send_dome_report(msg, confirmed_closed):
    """Send Slack message with webcams attached."""
    ts = '{:.0f}'.format(time.time())
    ext_url = 'http://lapalma-observatory.warwick.ac.uk/webcam/ext2/static?' + ts
    attach_ext = {'fallback': 'External webcam view',
                  'title': 'External webcam view',
                  'title_link': 'http://lapalma-observatory.warwick.ac.uk/eastcam/',
                  'text': 'Image attached:',
                  'image_url': ext_url,
                  'color': 'good' if confirmed_closed else 'danger',
                  }
    int_url = 'http://lapalma-observatory.warwick.ac.uk/webcam/goto/static?' + ts
    attach_int = {'fallback': 'Internal webcam view',
                  'title': 'Internal webcam view',
                  'title_link': 'http://lapalma-observatory.warwick.ac.uk/goto/dome/',
                  'text': 'Image attached:',
                  'image_url': int_url,
                  'color': 'good' if confirmed_closed else 'danger',
                  }

    attachments = [attach_ext, attach_int]
    send_slack_msg(msg, attachments=attachments)


def send_coverage_plot():
    """Send Slack message with survey coverage plot."""
    with db.open_session() as session:
        # Get the base grid
        db_grid = session.query(db.Grid).all()[-1]

        # Create a query for all completed Pointings
        query = session.query(db.Pointing).filter(db.Pointing.status == 'completed')

        # Filter to the all-sky survey
        db_survey = db_grid.surveys[0]
        query = query.filter(db.Pointing.survey_tile_id.in_([i.db_id
                                                             for i in db_survey.survey_tiles]))

        # Get pointings
        pointings = query.all()

        # Get earliest and latest dates
        start = min([p.stopped_time for p in pointings]).strftime('%Y-%m-%d')
        stop = max([p.stopped_time for p in pointings]).strftime('%Y-%m-%d')

        # Count tiles
        counter = Counter([pointing.grid_tile.name for pointing in pointings])
        count_dict = dict(counter)

        # Create grid
        grid = gototile.grid.SkyGrid((db_grid.ra_fov, db_grid.dec_fov),
                                     (db_grid.ra_overlap, db_grid.dec_overlap),
                                     kind=db_grid.algorithm)

        # Create plot
        direc = os.path.join(params.FILE_PATH, 'plots')
        if not os.path.exists(direc):
            os.mkdir(direc)
        filename = 'allsky_survey_' + stop + '.png'
        filepath = os.path.join(direc, filename)

        title = 'GOTO all-sky survey coverage\nfrom {} to {}'.format(start, stop)
        grid.plot(filename=filepath,
                  color=count_dict,
                  discrete_colorbar=True,
                  alpha=0.5,
                  title=title)

        # Send the message, with the plot attached
        send_slack_msg('All-sky survey coverage plot', filepath=filepath)


def run(test=False):
    """Run morning safety checks."""
    # Log output
    log = logger.get_logger('daymarshal', log_to_file=False, log_to_stdout=True, log_stdout=True)

    # Get the current night starting date and time of sunrise
    date = night_startdate()
    log.info('Started for night of {}'.format(date))
    sunrise = sunalt_time(date, 0 * u.deg, eve=False)

    # Wait until shortly after sunrise, so the pilot should be finished
    target = sunrise + 5 * u.min
    log.info('Waiting until {}'.format(target.datetime.strftime('%H:%M:%S')))
    while True and not test:
        if Time.now() > target:
            log.info('Passed target time')
            break
        time.sleep(2)

    # Check the dome status
    msg = ''
    confirmed_closed = False
    try:
        dome_info = daemon_info('dome')
        dome_status = dome_info['dome']
        if dome_status == 'closed':
            msg = 'Day marshal confirmed dome is closed'
            log.info('Dome confirmed closed')
            confirmed_closed = True
        else:
            # Uh-oh
            msg = 'WARNING: Day marshal could not confirm dome is closed'
            log.warning('The dome is not closed!')
    except Exception:
        msg = 'WARNING: Day marshal dome status check failed'
        log.error('Error checking the dome', exc_info=True)

    # Send the report to Slack
    send_dome_report(msg, confirmed_closed)

    # It's not closed...
    # Maybe something happened to the pilot or the dome daemon
    while not confirmed_closed:
        time.sleep(30)
        try:
            # Try sending the command
            log.warning('Sending dome close command')
            execute_command('dome restart')
            time.sleep(5)
            execute_command('dome close')

            # Wait for the dome to (hopefully) close
            wait_for_dome(target_position='closed', timeout=120)

            # Check again
            dome_info = daemon_info('dome')
            dome_status = dome_info['dome']
            if dome_status == 'closed':
                msg = 'Day marshal has closed the dome'
                log.info('Dome confirmed closed')
                confirmed_closed = True
            else:
                # UH-OH
                msg = 'CRITICAL: Day marshal could not close the dome!'
                log.warning('The dome is still not closed!')

        except Exception:
            log.error('Error sending dome command', exc_info=True)
            msg = 'CRITICAL: Day marshal could not close the dome!'

        # Send the report to Slack again
        send_dome_report(msg, confirmed_closed)

    # Update IRES tables on all control machines
    hosts = np.unique([params.DAEMONS[daemon]['HOST'] for daemon in params.DAEMONS])
    for host in hosts:
        log.info('Updating IERS tables on {}'.format(host))
        # Run the command through Python, so we can do it on the remote machines
        command = '{} -m gtecs.observing_scripts.update_IERS'.format(sys.executable)
        if host == params.LOCAL_HOST:
            execute_command("{}".format(command), timeout=120)
        else:
            execute_command("ssh {} '{}'".format(host, command), timeout=120)

    # Restart the RoomAlert
    log.info('Rebooting RoomAlert')
    execute_command('power off poe')
    time.sleep(5)
    execute_command('power on poe')

    # Send the all-sky survey coverage plot
    send_coverage_plot()

    log.info('Done')


if __name__ == "__main__":
    # Disable day marshal in engineering mode
    status = Status()
    if status.mode == 'engineering':
        print('Day marshal is disabled in engineering mode')
        send_slack_msg('Day marshal tried to run, but system is in engineering mode')
        sys.exit(0)

    # Check it it's already running
    pid = get_pid('daymarshal')
    if pid:
        print('Day marshal is already running (PID {})'.format(pid))
        send_slack_msg('Day marshal tried to run, but is already running')
        sys.exit(0)

    parser = argparse.ArgumentParser(description=__doc__,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-t', '--test', action="store_true", default=False)
    args = parser.parse_args()

    with make_pid_file('daymarshal'):
        run(args.test)
