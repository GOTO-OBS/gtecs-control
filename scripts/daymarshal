#!/usr/bin/env python3
"""Script to run in the morning to confirm the dome is closed."""

import argparse
import sys
import time

import astropy.units as u
from astropy.time import Time

from gtecs.common import logging
from gtecs.common.system import execute_command, get_pid, kill_process, make_pid_file
from gtecs.control import params
from gtecs.control.astronomy import night_startdate, sunalt_time
from gtecs.control.daemons import daemon_proxy, restart_daemon
from gtecs.control.flags import Status
from gtecs.control.slack import send_dome_report, send_slack_msg

import numpy as np


def run(test=False):
    """Run morning safety checks."""
    # Log output
    log = logging.get_logger('daymarshal')

    # Get the current night starting date and time of sunrise
    date = night_startdate()
    log.info('Started for night of {}'.format(date))
    sunrise = sunalt_time(0 * u.deg, eve=False)

    # Wait until shortly after sunrise, so the pilot should be finished
    target = sunrise + 5 * u.min
    log.info('Waiting until {}'.format(target.datetime.strftime('%H:%M:%S')))
    while True and not test:
        if Time.now() > target:
            log.info('Passed target time')
            break
        time.sleep(2)

    # Check that the pilot has shutdown, and try to kill it if it hasn't
    pid = get_pid('pilot')
    if pid:
        print('Pilot is still running (PID {})'.format(pid))
        send_slack_msg('Pilot did not shut down correctly!')
        kill_process('pilot')
        time.sleep(5)
        pid = get_pid('pilot')
        if not pid:
            print('Pilot killed')
            send_slack_msg('Pilot killed')
        else:
            print('Pilot is still running (PID {})'.format(pid))
            send_slack_msg('Pilot could not be killed!')

    # Check the dome status
    confirmed_closed = False
    try:
        with daemon_proxy('dome') as daemon:
            info = daemon.get_info(force_update=True)
        dome_status = info['dome']
        if dome_status == 'closed':
            msg = '*Day marshal confirmed dome is closed*'
            log.info('Dome confirmed closed')
            confirmed_closed = True
        else:
            # Uh-oh
            msg = ':warning: *WARNING: Day marshal could not confirm dome is closed* :warning:'
            log.warning('The dome is not closed!')
    except Exception:
        msg = ':warning: *WARNING: Day marshal dome status check failed* :warning:'
        log.error('Error checking the dome', exc_info=True)

    # Send the report to Slack
    log.info('Sending status report to Slack')
    send_dome_report(msg, confirmed_closed)

    # It's not closed...
    # Maybe something happened to the pilot or the dome daemon
    # Note this deliberately keeps trying every 30 seconds and will spam Slack if the dome still
    # can't close. Hopefully this should get someone's attention!
    while not confirmed_closed:
        time.sleep(30)
        try:
            # Try sending the command
            log.warning('Sending dome close command')
            with daemon_proxy('dome') as daemon:
                daemon.close_dome()
                # TODO: blocking command with confirmation or timeout in daemon
                start_time = time.time()
                while True:
                    time.sleep(0.5)
                    info = daemon.get_info(force_update=True)
                    if info['dome'] == 'closed':
                        break
                    if (time.time() - start_time) > 120:
                        raise TimeoutError('Dome timed out')

            # If we got here and didn't time out the dome should be closed
            msg = '*Day marshal has closed the dome*'
            log.info('Dome confirmed closed')
            confirmed_closed = True

        except Exception:
            log.error('Error sending dome command', exc_info=True)
            msg = ':warning: *CRITICAL: Day marshal could not close the dome!* :warning:'
            # Try restarting the daemon before we try again
            restart_daemon('dome')

        # Send the report to Slack again
        send_dome_report(msg, confirmed_closed)

    # Update IRES tables on all control machines
    hosts = np.unique([params.DAEMONS[daemon]['HOST'] for daemon in params.DAEMONS])
    for host in hosts:
        log.info('Updating IERS tables on {}'.format(host))
        # Run the command through Python, so we can do it on the remote machines
        command = '{} -m gtecs.control._obs_scripts.update_IERS'.format(params.PYTHON_EXE)
        if host == params.LOCAL_HOST:
            execute_command(command, timeout=120)
        else:
            execute_command("ssh {} '{}'".format(host, command), timeout=120)  # TODO: use fabric?

    log.info('Done')


if __name__ == '__main__':
    # Disable day marshal in engineering mode
    status = Status()
    if status.mode == 'engineering':
        print('Day marshal is disabled in engineering mode')
        send_slack_msg('Day marshal tried to run, but system is in engineering mode')
        sys.exit(0)

    # Check it it's already running
    pid = get_pid('daymarshal')
    if pid:
        print('Day marshal is already running (PID {})'.format(pid))
        send_slack_msg('Day marshal tried to run, but is already running')
        sys.exit(0)

    parser = argparse.ArgumentParser(description=__doc__,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-t', '--test', action='store_true', default=False)
    args = parser.parse_args()

    with make_pid_file('daymarshal'):
        run(args.test)
