#!/usr/bin/env python
"""Script to run in the morning to confirm the dome is closed."""

import argparse
import datetime
import os
import sys
import time
from collections import Counter

import astropy.units as u
from astropy.time import Time

from gtecs import logger
from gtecs import params
from gtecs.astronomy import night_startdate, observatory_location, sunalt_time
from gtecs.daemons import daemon_info
from gtecs.flags import Status
from gtecs.misc import execute_command, get_pid, make_pid_file
from gtecs.observing import wait_for_dome
from gtecs.slack import send_slack_msg

import numpy as np

import obsdb as db


def send_dome_report(msg, confirmed_closed):
    """Send Slack message with webcams attached."""
    ts = '{:.0f}'.format(time.time())
    ext_url = 'http://lapalma-observatory.warwick.ac.uk/webcam/ext2/static?' + ts
    attach_ext = {'fallback': 'External webcam view',
                  'title': 'External webcam view',
                  'title_link': 'http://lapalma-observatory.warwick.ac.uk/eastcam/',
                  'text': 'Image attached:',
                  'image_url': ext_url,
                  'color': 'good' if confirmed_closed else 'danger',
                  }
    int_url = 'http://lapalma-observatory.warwick.ac.uk/webcam/goto/static?' + ts
    attach_int = {'fallback': 'Internal webcam view',
                  'title': 'Internal webcam view',
                  'title_link': 'http://lapalma-observatory.warwick.ac.uk/goto/dome/',
                  'text': 'Image attached:',
                  'image_url': int_url,
                  'color': 'good' if confirmed_closed else 'danger',
                  }

    attachments = [attach_ext, attach_int]
    send_slack_msg(msg, attachments=attachments)


def send_coverage_plots():
    """Send Slack messages with nightly coverage and updated survey coverage plots."""
    with db.open_session() as session:
        # Get the base grid
        db_grid = db.get_current_grid(session)

        # Create a SkyGrid from the database Grid
        grid = db_grid.get_skygrid()

        # Get the dates for the start and end of the night just finished
        midday_today = datetime.datetime.now().replace(hour=12, minute=0, second=0, microsecond=0)
        midday_yesterday = midday_today - datetime.timedelta(days=1)

        # Get all pointings observed last night on the grid
        query = session.query(db.Pointing).filter(
            db.Pointing.status == 'completed',
            db.Pointing.grid == db_grid,
            db.Pointing.stopped_time > midday_yesterday,
            db.Pointing.stopped_time < midday_today,
        )
        lastnight_pointings = query.all()

        # Get the tile names of the all-sky survey pointings completed last night
        db_survey = db_grid.surveys[0]
        lastnight_surveytiles = [p.grid_tile.name
                                 for p in lastnight_pointings
                                 if p.survey_tile and p.survey_tile.survey.name == db_survey.name]

        # Get the names and surveys of the other, non-all-sky pointings completed last night
        lastnight_othertiles = [p.grid_tile.name
                                for p in lastnight_pointings
                                if not p.survey_tile or p.survey_tile.survey.name != db_survey.name]
        lastnight_othersurveys = [p.survey_tile.survey.name if p.survey_tile else 'None'
                                  for p in lastnight_pointings
                                  if (not p.survey_tile or
                                      p.survey_tile.survey.name != db_survey.name)]
        lastnight_othertiles = np.array(lastnight_othertiles)
        lastnight_othersurveys = np.array(lastnight_othersurveys)
        lastnight_otherdict = {survey_name:
                               lastnight_othertiles[lastnight_othersurveys == survey_name]
                               for survey_name in set(lastnight_othersurveys)}

        # Create highlight lists for plot
        highlight_tiles = [lastnight_surveytiles]
        highlight_tiles += [lastnight_otherdict[survey] for survey in sorted(lastnight_otherdict)]
        highlight_labels = [db_survey.name]
        highlight_labels += [survey for survey in sorted(lastnight_otherdict)]

        # Use Astroplan to get all the tiles that would have been visible last night
        visible_tiles = grid.get_visible_tiles(observatory_location(),
                                               time_range=(Time(midday_yesterday),
                                                           Time(midday_today)),
                                               alt_limit=30,
                                               sun_limit=-12,
                                               )
        notvisible_tiles = [tile for tile in grid.tilenames if tile not in visible_tiles]

        # Create plot of tiles observed last night
        direc = os.path.join(params.FILE_PATH, 'plots')
        if not os.path.exists(direc):
            os.mkdir(direc)
        date = midday_yesterday.strftime('%Y-%m-%d')
        filename = '{}_observed.png'.format(date)
        filepath = os.path.join(direc, filename)

        title = 'GOTO observations for\nnight beginning {}'.format(date)
        grid.plot(filename=filepath,
                  color={tilename: '0.5' for tilename in notvisible_tiles},
                  highlight=highlight_tiles,
                  highlight_label=highlight_labels,
                  alpha=0.5,
                  title=title)

        # Send the message, with the plot attached
        send_slack_msg('Last night coverage plot', filepath=filepath)

        #########

        # Now get all completed all-sky survey pointings since it started
        query = session.query(db.Pointing).filter(
            db.Pointing.status == 'completed',
            db.Pointing.survey == db_survey,
        )
        survey_pointings = query.all()

        # Get start date of the survey
        survey_start = min([p.stopped_time for p in survey_pointings])

        # Count tiles
        counter = Counter([p.grid_tile.name for p in survey_pointings])
        count_dict = dict(counter)

        # Create plot
        direc = os.path.join(params.FILE_PATH, 'plots')
        if not os.path.exists(direc):
            os.mkdir(direc)
        filename = '{}_survey.png'.format(date)
        filepath = os.path.join(direc, filename)

        title = 'GOTO all-sky survey coverage\n'
        title += 'from {} to {}'.format(survey_start.strftime('%Y-%m-%d'), date)
        grid.plot(filename=filepath,
                  color=count_dict,
                  discrete_colorbar=True,
                  highlight=lastnight_surveytiles,
                  highlight_color='red',
                  highlight_label='observed last night',
                  alpha=0.5,
                  title=title)

        # Send the message, with the plot attached
        send_slack_msg('All-sky survey coverage plot', filepath=filepath)


def run(test=False):
    """Run morning safety checks."""
    # Log output
    log = logger.get_logger('daymarshal', log_to_file=False, log_to_stdout=True, log_stdout=True)

    # Get the current night starting date and time of sunrise
    date = night_startdate()
    log.info('Started for night of {}'.format(date))
    sunrise = sunalt_time(date, 0 * u.deg, eve=False)

    # Wait until shortly after sunrise, so the pilot should be finished
    target = sunrise + 5 * u.min
    log.info('Waiting until {}'.format(target.datetime.strftime('%H:%M:%S')))
    while True and not test:
        if Time.now() > target:
            log.info('Passed target time')
            break
        time.sleep(2)

    # Check the dome status
    msg = ''
    confirmed_closed = False
    try:
        dome_info = daemon_info('dome')
        dome_status = dome_info['dome']
        if dome_status == 'closed':
            msg = 'Day marshal confirmed dome is closed'
            log.info('Dome confirmed closed')
            confirmed_closed = True
        else:
            # Uh-oh
            msg = 'WARNING: Day marshal could not confirm dome is closed'
            log.warning('The dome is not closed!')
    except Exception:
        msg = 'WARNING: Day marshal dome status check failed'
        log.error('Error checking the dome', exc_info=True)

    # Send the report to Slack
    send_dome_report(msg, confirmed_closed)

    # It's not closed...
    # Maybe something happened to the pilot or the dome daemon
    while not confirmed_closed:
        time.sleep(30)
        try:
            # Try sending the command
            log.warning('Sending dome close command')
            execute_command('dome restart')
            time.sleep(5)
            execute_command('dome close')

            # Wait for the dome to (hopefully) close
            wait_for_dome(target_position='closed', timeout=120)

            # Check again
            dome_info = daemon_info('dome')
            dome_status = dome_info['dome']
            if dome_status == 'closed':
                msg = 'Day marshal has closed the dome'
                log.info('Dome confirmed closed')
                confirmed_closed = True
            else:
                # UH-OH
                msg = 'CRITICAL: Day marshal could not close the dome!'
                log.warning('The dome is still not closed!')

        except Exception:
            log.error('Error sending dome command', exc_info=True)
            msg = 'CRITICAL: Day marshal could not close the dome!'

        # Send the report to Slack again
        send_dome_report(msg, confirmed_closed)

    # Update IRES tables on all control machines
    hosts = np.unique([params.DAEMONS[daemon]['HOST'] for daemon in params.DAEMONS])
    for host in hosts:
        log.info('Updating IERS tables on {}'.format(host))
        # Run the command through Python, so we can do it on the remote machines
        command = '{} -m gtecs.observing_scripts.update_IERS'.format(sys.executable)
        if host == params.LOCAL_HOST:
            execute_command("{}".format(command), timeout=120)
        else:
            execute_command("ssh {} '{}'".format(host, command), timeout=120)

    # Restart the RoomAlert
    log.info('Rebooting RoomAlert')
    execute_command('power off poe')
    time.sleep(5)
    execute_command('power on poe')

    # Send the coverage plots
    send_coverage_plots()

    log.info('Done')


if __name__ == "__main__":
    # Disable day marshal in engineering mode
    status = Status()
    if status.mode == 'engineering':
        print('Day marshal is disabled in engineering mode')
        send_slack_msg('Day marshal tried to run, but system is in engineering mode')
        sys.exit(0)

    # Check it it's already running
    pid = get_pid('daymarshal')
    if pid:
        print('Day marshal is already running (PID {})'.format(pid))
        send_slack_msg('Day marshal tried to run, but is already running')
        sys.exit(0)

    parser = argparse.ArgumentParser(description=__doc__,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('-t', '--test', action="store_true", default=False)
    args = parser.parse_args()

    with make_pid_file('daymarshal'):
        run(args.test)
