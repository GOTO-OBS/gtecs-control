#!/usr/bin/env python
"""A script to provide control over the sentinel daemon."""

import os
import sys

from gtecs import daemons
from gtecs import errors
from gtecs import misc
from gtecs import params


DAEMON_ID = os.path.basename(__file__)


def query(command, args, daemon_id):
    """Process a query."""
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise errors.InputError('Already in interactive mode')

    # Primary daemon control
    elif command == 'start':
        reply = daemons.start_daemon(daemon_id)
        print(reply)

    elif command == 'shutdown':
        reply = daemons.shutdown_daemon(daemon_id)
        print(reply)

    elif command == 'restart':
        reply = daemons.restart_daemon(daemon_id)
        print(reply)

    elif command == 'kill':
        reply = daemons.kill_daemon(daemon_id)
        print(reply)

    elif command in ['check', 'ping']:
        reply = daemons.check_daemon(daemon_id)
        print(reply)

    elif command in ['info', 'status']:
        # send command
        reply = daemons.daemon_function(daemon_id, 'get_info', args=[False])
        if not reply:
            raise ValueError('No info returned, check daemon')
        else:
            print_info(reply)

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            log_file = daemon_id + '-stdout.log'
            args.remove('stdout')
        else:
            log_file = daemon_id + '.log'
        log_path = os.path.join(params.LOG_PATH, log_file)
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        # send command
        misc.execute_long_command(tail_command)

    # Daemon functions
    elif command == 'pause':
        reply = daemons.daemon_function(daemon_id, 'pause_listener')
        print(reply)

    elif command in ['resume', 'unpause']:
        reply = daemons.daemon_function(daemon_id, 'resume_listener')
        print(reply)

    # Unrecognized function
    else:
        raise errors.InputError('Unrecognized command "{}"'.format(command))


def print_info(info):
    """Print the full info dict."""
    print('####### SENTINEL INFO ########')
    print('Status: %s' % info['status'])
    print('~~~~~~~')
    if info['pending_events'] > 0:
        print('Processed events:     %i (%i pending)' % (info['processed_events'],
                                                         info['pending_events']))
    else:
        print('Processed events:     %i' % (info['processed_events']))
    print('Interesting events:   %i' % (info['interesting_events']))
    if info['latest_event']:
        print('Latest event:         %s' % (info['latest_event'].ivorn))
    else:
        print('Latest event:         %s' % (info['latest_event']))
    print('~~~~~~~')
    print('Uptime: %.1fs' % info['uptime'])
    print('Timestamp: %s' % info['timestamp'])
    print('###########################')


def print_instructions():
    """Print instructions for using the daemon."""
    print('Usage: sentinel command [options]',
          'Daemon commands:',
          '  start                          start the daemon',
          '  shutdown                       shutdown the daemon',
          '  restart                        restart the daemon',
          '  kill                           kill the daemon',
          '  check/ping                     check the daemon for errors',
          'Sentinel commands:',
          '  pause                          pause the alert listener',
          '  unpause/resume                 resumes the alert listener',
          '  info/status [v]                report current status',
          '  log [stdout]                   print daemon log (tail alias)',
          'Control commands:',
          '  i                              enter interactive mode',
          '  q/exit                         quit interactive mode',
          '  ?/help                         print these instructions',
          sep='\n')


if __name__ == "__main__":
    if len(sys.argv) == 1:
        print_instructions()
    else:
        command, *args = sys.argv[1:]
        if command == 'i':
            while True:
                interactive_input = input('{}> '.format(DAEMON_ID)).split()
                if len(interactive_input) > 0:
                    command, *args = interactive_input
                    if command in ['q', 'exit']:
                        break
                    else:
                        with misc.print_errors():
                            query(command, args, DAEMON_ID)
        else:
            with misc.print_errors():
                query(command, args, DAEMON_ID)
