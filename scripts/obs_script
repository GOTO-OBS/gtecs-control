#!/usr/bin/env python3
"""A script to make it easier for users to run observation scripts."""

import importlib.resources as pkg_resources
import sys

from gtecs.common.system import execute_long_command, get_pid, make_pid_file
from gtecs.control import params


SCRIPT_NAMES = sorted([f for f in pkg_resources.contents('gtecs.control._obs_scripts')
                       if not f.startswith('__')])


def query(script, args):
    """Process a query."""
    if not script.endswith('.py'):
        script += '.py'
    if script not in sorted(SCRIPT_NAMES):
        print('ERROR: "{}" script not found'.format(script))
        print_instructions()
    else:
        for s in sorted(SCRIPT_NAMES):
            pid = get_pid(s.split('.')[0])
            if pid:
                print('An observing script ({}) is already running (PID {})'.format(s, pid))
                return
        with make_pid_file(script.split('.')[0]):
            with pkg_resources.path('gtecs.control._obs_scripts', script) as path:
                command = ' '.join((params.PYTHON_EXE, str(path), *args))
                execute_long_command(command)


def print_instructions():
    """Print instructions for using the script."""
    script_docs = {}
    for script in SCRIPT_NAMES:
        with pkg_resources.open_text('gtecs.control._obs_scripts', script) as f:
            lines = f.readlines()
            script_docs[script] = lines[1].strip().replace('"', '')

    print('Usage: obs_script <script name> [args]')
    print('Valid observing scripts:')
    for script in sorted(SCRIPT_NAMES):
        print('  {}'.format(script.split('.')[0]))
        print('      - {}'.format(script_docs[script]))


if __name__ == '__main__':
    if len(sys.argv) == 1:
        # No command: print help and exit
        print_instructions()
        sys.exit()

    script_name, *args = sys.argv[1:]
    query(script_name, args)
