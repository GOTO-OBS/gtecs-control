#!/usr/bin/env python

########################################################################
#                                power.py                              #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#           G-TeCS script to provide control over power_daemon         #
#                     Martin Dyer, Sheffield, 2015                     #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#                   Based on the SLODAR/pt5m system                    #
########################################################################

### Import ###
# Python modules
from __future__ import absolute_import
from __future__ import print_function
import os, sys
import readline
import time
import Pyro4
from six.moves import input, range
# TeCS modules
from gtecs.tecs_modules import misc
from gtecs.tecs_modules import params
from gtecs.tecs_modules import daemons

########################################################################
# Interactive functions

def interactive():
    while True:
        i_in = input('{}> '.format(daemon_ID)).split()
        if len(i_in) > 0:
            command, *args = i_in
            if command == 'q' or command == 'exit':
                return
            else:
                query(command, args)

def query(command, args):
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Primary control functions
    if command == 'start':
        daemons.start_daemon(daemon_ID)
    elif command == 'shutdown':
        daemons.shutdown_daemon(daemon_ID)
    elif command == 'kill':
        daemons.kill_daemon(daemon_ID)
    elif command == 'ping':
        daemons.ping_daemon(daemon_ID)
    elif command == 'help' or command == '?':
        print_instructions()
    elif command == 'i':
        print(misc.ERROR('Already in interactive mode'))

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Daemon functions
    elif command == 'info':
        if len(args) == 0:
            info = daemons.daemon_function(daemon_ID, 'get_info', timeout=1.)
            if info: print_info_s(info)
        elif len(args) == 1 and args[0] in ['v','V','-v','-V']:
            info = daemons.daemon_function(daemon_ID, 'get_info', timeout=1.)
            if info: print_info(info)

    elif command == 'on':
        unit = args[0]
        outlets = args[1].split(',')
        c = daemons.daemon_function(daemon_ID, 'on', [unit, outlets])
        if c: print(c)

    elif command == 'off':
        unit = args[0]
        outlets = args[1].split(',')
        c = daemons.daemon_function(daemon_ID, 'off', [unit, outlets])
        if c: print(c)

    elif command == 'reboot':
        unit = args[0]
        outlets = args[1].split(',')
        c = daemons.daemon_function(daemon_ID, 'reboot', [unit, outlets])
        if c: print(c)

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Unrecognized function
    else:
        print(misc.ERROR('Unrecognized command "%s"' %command))

########################################################################
# Output formatting functions

def print_info(info):
    print('####### POWER INFO ########')
    for unit in params.POWER_UNITS:
        ip = params.POWER_UNITS[unit]['IP']
        print('UNIT {} ({})'.format(unit, ip))
        status = info['status_'+unit]
        try:
            names = params.POWER_UNITS[unit]['NAMES']
            for outlet in names:
                outlet_name = '({}):'.format(outlet)
                outlet_no = names.index(outlet) + 1
                outlet_status = status[outlet]
                print('Outlet {} {: <10} {}'.format(outlet_no, outlet_name, outlet_status))
        except:
            ups_status = status['status']
            ups_percent = status['percent']
            ups_time = status['time']
            print('Status: {}'.format(ups_status))
            print('Percent remaining: {}%'.format(ups_percent))
            print('Time remaining:    {}s'.format(ups_time))
        print('~~~~~~~')

    print('Uptime: %.1fs' %info['uptime'])
    print('Ping: %.5fs' %info['ping'])
    print('Timestamp: %s' %info['timestamp'])
    print('###########################')

def print_info_s(info):
    for unit in params.POWER_UNITS:
        ip = params.POWER_UNITS[unit]['IP']
        print('{} ({})'.format(unit, ip))
        status = info['status_'+unit]
        try:
            names = params.POWER_UNITS[unit]['NAMES']
            for outlet in names:
                outlet_name = '({}):'.format(outlet)
                outlet_no = names.index(outlet) + 1
                outlet_status = status[outlet]
                print('   Outlet {} {: <10} [{}]'.format(outlet_no, outlet_name, outlet_status))
        except:
            ups_status = status['status']
            ups_percent = status['percent']
            ups_time = status['time']
            print('   Remaining: {}% ({}s)   [{}]'.format(ups_percent, ups_time, ups_status))

def print_instructions():
    help_str = misc.bold('Usage:') + ' power [command]' + '\n' +\
    ' ' + misc.undl('Daemon commands') + ':' + '\n' +\
    '  power ' + misc.bold('start') + '            - start the daemon' + '\n' +\
    '  power ' + misc.bold('shutdown') + '         - shutdown the daemon' + '\n' +\
    '  power ' + misc.bold('kill') + '             - kill the daemon (' + misc.rtxt('emergency use') + ')' + '\n' +\
    '  power ' + misc.bold('ping') + '             - ping the daemon' + '\n' +\
    ' ' + misc.undl('Power commands') + ':' + '\n' +\
    '  power ' + misc.bold('on') + ' [outlets]' + '     - turn on specified outlet(s)' + '\n' +\
    '  power ' + misc.bold('off') + ' [outlets]' + '    - turn off specified outlet(s)' + '\n' +\
    '  power ' + misc.bold('reboot') + ' [outlets]' + ' - reboots specified outlet(s)' + '\n' +\
    '  power ' + misc.bold('info') + ' [v]' + '         - report current status' + '\n' +\
    ' ' + misc.undl('Control commands') + ':' + '\n' +\
    '  power ' + misc.bold('i') + '                - enter interactive mode' + '\n' +\
    '  power ' + misc.bold('q') + '/' + misc.bold('exit') + '           - quit interactive mode' + '\n' +\
    '  power ' + misc.bold('?') + '/' + misc.bold('help') + '           - print these instructions'
    print(help_str)

########################################################################

daemon_ID = os.path.basename(__file__)

if len(sys.argv) == 1:
    print_instructions()
else:
    command, *args = sys.argv[1:]
    if command == 'i':
        interactive()
    else:
        query(command, args)
