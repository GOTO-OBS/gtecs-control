#!/usr/bin/env python3
"""A script to provide control over the power daemon."""

import json
import os
import sys

from gtecs.common import logging
from gtecs.common.system import execute_long_command
from gtecs.control import daemons
from gtecs.control import errors
from gtecs.control import params
from gtecs.control.style import errortxt


def query(command, args):
    """Process a query."""
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise errors.InputError('Already in interactive mode')

    # Primary daemon control
    elif command == 'start':
        reply = daemons.start_daemon('power')
        print(reply)

    elif command == 'shutdown':
        reply = daemons.shutdown_daemon('power')
        print(reply)

    elif command == 'restart':
        reply = daemons.restart_daemon('power')
        print(reply)

    elif command == 'kill':
        reply = daemons.kill_daemon('power')
        print(reply)

    elif command in ['check', 'ping']:
        reply = daemons.check_daemon('power')
        print(reply)

    elif command in ['info', 'status']:
        # parse arguments
        if len(args) == 0:
            info_type = 'simple'
            force = False
        elif len(args) == 1 and args[0] in ['f', 'F', '-f', '-F', '--force-update']:
            info_type = 'simple'
            force = True
        elif len(args) == 1 and args[0] in ['v', 'V', '-v', '-V', '--verbose']:
            info_type = 'verbose'
            force = False
        elif len(args) == 1 and args[0] in ['r', 'R', '-r', '-R', '--raw']:
            info_type = 'raw'
            force = False
        elif (len(args) == 2 and
              ((args[0] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'verbose'
            force = True
        elif (len(args) == 2 and
              ((args[0] in ['r', 'R', '-r', '-R', '--raw'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['r', 'R', '-r', '-R', '--raw'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'raw'
            force = True
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function('power', 'get_info', args=[force])
        # print response
        if not reply:
            raise ValueError('No info returned, check daemon')
        elif info_type == 'simple':
            print_info_s(reply)
        elif info_type == 'verbose':
            print_info(reply)
        elif info_type == 'raw':
            print(json.dumps(reply, indent=2, default=repr))

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            log_file = 'power-stdout.log'
            args.remove('stdout')
        else:
            log_file = 'power.log'
        log_path = logging.get_log_path() / log_file
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        # send command
        execute_long_command(tail_command)

    # Daemon functions
    elif command in ['on', 'off', 'reboot']:
        # parse arguments
        if len(args) == 1:
            unit = None
            outlets = args[0].split(',')
        elif len(args) == 2:
            unit = args[0]
            outlets = args[1].split(',')
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function('power', command, [outlets, unit])
        print(reply)

    elif command in ['list', 'ls', 'outlets']:
        # print info
        print_outlets(params.POWER_UNITS, params.POWER_GROUPS)

    # Unrecognized function
    else:
        raise errors.InputError('Unrecognized command "{}"'.format(command))


def print_info(info):
    """Print the full info dict."""
    print('####### POWER INFO ########')
    for unit in params.POWER_UNITS:
        ip = params.POWER_UNITS[unit]['IP']
        unit_class = params.POWER_UNITS[unit]['CLASS']
        print('UNIT {} ({})'.format(unit, ip))
        status = info['status_' + unit]
        if 'UPS' in unit_class:
            print('Status: {}'.format(status['status']))
            print('Current load:       {}%'.format(status['load']))
            print('Percent remaining:  {}%'.format(status['percent']))
            print('Time remaining:     {}s'.format(status['time']))
        if 'ATS' in unit_class:
            print('Status: {}'.format(status['status']))
            print('Current source:     {}'.format(status['source']))
            print('Source A status:    {}'.format(status['status_A']))
            print('Source B status:    {}'.format(status['status_B']))
        if 'NAMES' in params.POWER_UNITS[unit]:
            names = params.POWER_UNITS[unit]['NAMES']
            for outlet in names:
                outlet_name = '({}):'.format(outlet)
                outlet_no = names.index(outlet) + 1
                outlet_status = status[outlet].capitalize()
                print('Outlet {: <2} {: <15} {}'.format(outlet_no, outlet_name, outlet_status))
        print('~~~~~~~')

    print('Uptime: {:.1f}s'.format(info['uptime']))
    print('Timestamp: {}'.format(info['timestamp']))
    print('###########################')


def print_info_s(info):
    """Print the info dict in a compact way."""
    for unit in params.POWER_UNITS:
        ip = params.POWER_UNITS[unit]['IP']
        unit_class = params.POWER_UNITS[unit]['CLASS']
        status = info['status_' + unit]
        if 'status' in status:
            unit_status = status['status']
            print('{} ({})       [{}]'.format(unit, ip, unit_status))
        else:
            print('{} ({})'.format(unit, ip))
        if 'UPS' in unit_class:
            print('   Load: {: >5}%'.format(status['load']))
            print('   Remaining: {}% ({}s)'.format(status['percent'], status['time']))
        if 'ATS' in unit_class:
            if status['source'] == 'A':
                source_status = status['status_A']
            else:
                source_status = status['status_B']
            print('   Current source: {} ({})'.format(status['source'], source_status))
        if 'NAMES' in params.POWER_UNITS[unit]:
            names = params.POWER_UNITS[unit]['NAMES']
            for outlet in names:
                outlet_name = '({}):'.format(outlet)
                outlet_no = names.index(outlet) + 1
                outlet_status = status[outlet].capitalize()
                if outlet[0] != '_':
                    print('   Outlet {:<2} {: <15} [{}]'.format(outlet_no,
                                                                outlet_name,
                                                                outlet_status))


def print_outlets(unit_dict, group_dict):
    """Print the outlets and groups."""
    print('OUTLETS:')
    for unit in unit_dict:
        string = '   {: >7}:  '.format(unit.upper())
        if 'NAMES' in params.POWER_UNITS[unit]:
            for name in unit_dict[unit]['NAMES']:
                if name[0] != '_':
                    string += '{}, '.format(name)
            print(string[:-2])
        else:
            print(string)

    print('GROUPS:')
    for group in group_dict:
        string = '   {: >7}:  '.format(group)
        for name in group_dict[group]:
            if name[0] != '_':
                string += '{}, '.format(name)
        print(string[:-2])


def print_instructions():
    """Print instructions for using the daemon."""
    print('Usage: power command [options]',
          'Daemon commands:',
          '  start                          start the daemon',
          '  shutdown                       shutdown the daemon',
          '  restart                        restart the daemon',
          '  kill                           kill the daemon',
          '  check/ping                     check the daemon for errors',
          'Power commands:',
          '  on [names]|[unit outlet]       turn on specified outlet(s)',
          '  off [names]|[unit outlet]      turn off specified outlet(s)',
          '  reboot [names]|[unit outlet]   reboot specified outlet(s)',
          '  outlets/list                   list valid outlets and groups',
          '  info/status [-r|-v] [-f]       report current status [raw/verbose/force-update]',
          '  log [stdout]                   print daemon log (tail alias)',
          'Control commands:',
          '  i                              enter interactive mode',
          '  q/exit                         quit interactive mode',
          '  ?/help                         print these instructions',
          sep='\n')


if __name__ == '__main__':
    if len(sys.argv) == 1:
        # No command: print help and exit
        print_instructions()
        sys.exit()

    command, *args = sys.argv[1:]
    if command != 'i':
        query(command, args)
    else:
        # Interactive mode
        while True:
            try:
                interactive_input = input('{}> '.format(os.path.basename(__file__))).split()
            except EOFError:
                print()
                sys.exit()
            if len(interactive_input) > 0:
                command, *args = interactive_input
                if command in ['q', 'exit']:
                    sys.exit()
                try:
                    query(command, args)
                except Exception as error:
                    print(errortxt('"{}: {}"'.format(type(error).__name__, error)))
