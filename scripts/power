#!/usr/bin/env python3
"""A script to provide control over the power daemon."""

import json
import os
import sys

from gtecs.common import logging
from gtecs.common.style import errortxt
from gtecs.common.system import execute_long_command
from gtecs.control import daemons
from gtecs.control import params


def query(command, args):
    """Process a query."""
    daemon_id = os.path.basename(__file__)

    # Primary daemon control
    if command == 'start':
        host, port = daemons.get_daemon_host(daemon_id)
        pid = daemons.start_daemon(daemon_id)
        print(f'Daemon {daemon_id} started on {host}:{port} (PID {pid})')

    elif command == 'shutdown':
        host, port = daemons.get_daemon_host(daemon_id)
        daemons.shutdown_daemon(daemon_id)
        print(f'Daemon {daemon_id} shutdown on {host}:{port}')

    elif command == 'restart':
        host, port = daemons.get_daemon_host(daemon_id)
        pid = daemons.restart_daemon(daemon_id)
        print(f'Daemon {daemon_id} restarted on {host}:{port} (PID {pid})')

    elif command == 'kill':
        host, port = daemons.get_daemon_host(daemon_id)
        daemons.shutdown_daemon(daemon_id, kill=True)
        print(f'Daemon {daemon_id} killed on {host}:{port}')

    elif command in ['check', 'ping']:
        host, port = daemons.get_daemon_host(daemon_id)
        pid = daemons.check_daemon(daemon_id)
        print(f'Daemon {daemon_id} is running on {host}:{port} (PID {pid})')

    elif command in ['info', 'status']:
        if len(args) == 0:
            info_type = 'simple'
            force = False
        elif len(args) == 1 and args[0] in ['f', 'F', '-f', '-F', '--force-update']:
            info_type = 'simple'
            force = True
        elif len(args) == 1 and args[0] in ['v', 'V', '-v', '-V', '--verbose']:
            info_type = 'verbose'
            force = False
        elif len(args) == 1 and args[0] in ['r', 'R', '-r', '-R', '--raw']:
            info_type = 'raw'
            force = False
        elif (len(args) == 2 and
              ((args[0] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'verbose'
            force = True
        elif (len(args) == 2 and
              ((args[0] in ['r', 'R', '-r', '-R', '--raw'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['r', 'R', '-r', '-R', '--raw'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'raw'
            force = True
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            if info_type != 'raw':
                info_str = daemon.get_info_string(info_type == 'verbose', force)
            else:
                info = daemon.get_info(force)
                info_str = json.dumps(info, indent=2, default=repr)
        print(info_str)

    elif command in ['log', 'tail']:
        if 'stdout' in args:
            log_file = f'{daemon_id}-stdout.log'
            args.remove('stdout')
        else:
            log_file = f'{daemon_id}.log'
        log_path = logging.get_log_path() / log_file
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        execute_long_command(tail_command)

    # Daemon functions
    elif command in ['on', 'off', 'reboot']:
        if len(args) == 1:
            unit = None
            outlets = args[0].split(',')
        elif len(args) == 2:
            unit = args[0]
            outlets = args[1].split(',')
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            if command == 'on':
                daemon.on(outlets, unit)
                print('Outlets turning on')
            elif command == 'off':
                daemon.off(outlets, unit)
                print('Outlets turning off')
            elif command == 'reboot':
                daemon.reboot(outlets, unit)
                print('Outlets rebooting')

    elif command in ['list', 'ls', 'outlets']:
        print('OUTLETS:')
        for unit in params.POWER_UNITS:
            string = '   {: >7}:  '.format(unit.upper())
            if 'NAMES' in params.POWER_UNITS[unit]:
                for name in params.POWER_UNITS[unit]['NAMES']:
                    if name[0] != '_':
                        string += '{}, '.format(name)
                print(string[:-2])
            else:
                print(string)

        print('GROUPS:')
        for group in params.POWER_GROUPS:
            string = '   {: >7}:  '.format(group)
            for name in params.POWER_GROUPS[group]:
                if name[0] != '_':
                    string += '{}, '.format(name)
            print(string[:-2])

    # Unrecognized function
    else:
        raise ValueError('Unrecognized command "{}"'.format(command))


if __name__ == '__main__':
    try:
        command, *args = sys.argv[1:]
    except ValueError:
        # no command, print help and exit
        command = 'help'

    if command in ['help', '?']:
        print(
            'Usage: power command [options]',
            'Daemon commands:',
            '  start                          start the daemon',
            '  shutdown                       shutdown the daemon',
            '  restart                        restart the daemon',
            '  kill                           kill the daemon',
            '  check/ping                     check the daemon for errors',
            'Power commands:',
            '  on [names]|[unit outlet]       turn on specified outlet(s)',
            '  off [names]|[unit outlet]      turn off specified outlet(s)',
            '  reboot [names]|[unit outlet]   reboot specified outlet(s)',
            '  outlets/list                   list valid outlets and groups',
            '  info/status [-r|-v] [-f]       report current status [raw/verbose/force-update]',
            '  log [stdout]                   print daemon log (tail alias)',
            'Control commands:',
            '  i                              enter interactive mode',
            '  q/exit                         quit interactive mode',
            '  ?/help                         print these instructions',
            sep='\n')
        sys.exit()

    if command == 'i':
        while True:
            try:
                interactive_input = input(f'{os.path.basename(__file__)}> ').split()
            except EOFError:
                print()
                sys.exit()
            if len(interactive_input) > 0:
                command, *args = interactive_input
                if command in ['q', 'exit']:
                    sys.exit()
                if command == 'i':
                    print(errortxt('"ValueError: Already in interactive mode"'))
                    continue
                try:
                    query(command, args)
                except Exception as error:
                    print(errortxt(f'"{type(error).__name__}: {error}"'))

    try:
        query(command, args)
    except Exception as error:
        print(errortxt(f'"{type(error).__name__}: {error}"'))
