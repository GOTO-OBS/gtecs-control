#!/usr/bin/env python
"""A script to provide control over the power daemon."""

import os
import sys

from gtecs import daemons
from gtecs import errors
from gtecs import misc
from gtecs import params


DAEMON_ID = os.path.basename(__file__)


def query(command, args, daemon_id):
    """Process a query."""
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise errors.InputError('Already in interactive mode')

    # Primary daemon control
    elif command == 'start':
        reply = daemons.start_daemon(daemon_id)
        print(reply)

    elif command == 'shutdown':
        reply = daemons.shutdown_daemon(daemon_id)
        print(reply)

    elif command == 'restart':
        reply = daemons.restart_daemon(daemon_id)
        print(reply)

    elif command == 'kill':
        reply = daemons.kill_daemon(daemon_id)
        print(reply)

    elif command == 'ping':
        reply = daemons.ping_daemon(daemon_id)
        print(reply)

    elif command in ['info', 'status']:
        # parse arguments
        if len(args) == 0:
            info_type = 'simple'
        elif len(args) == 1 and args[0] in ['v', 'V', '-v', '-V']:
            info_type = 'verbose'
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_id, 'get_info')
        # print response
        if not reply:
            raise ValueError('No info returned, check daemon')
        elif info_type == 'simple':
            print_info_s(reply)
        elif info_type == 'verbose':
            print_info(reply)

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            log_path = params.LOG_PATH + daemon_id + '-stdout.log'
            args.remove('stdout')
        else:
            log_path = params.LOG_PATH + daemon_id + '.log'
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        # send command
        misc.execute_long_command(tail_command)

    # Daemon functions
    elif command in ['on', 'off', 'reboot']:
        # sneaky alias for dehumidifier, which is powered from the dome daemon
        if len(args) == 1 and args[0] in ['dehumidifier', 'dehumid', 'dehum']:
            reply = daemons.daemon_function('dome', 'override_dehumidifier', [command])
            print(reply)
            return
        # parse arguments
        if len(args) == 1:
            unit = None
            outlets = args[0].split(',')
        elif len(args) == 2:
            unit = args[0]
            outlets = args[1].split(',')
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_id, command, [outlets, unit])
        print(reply)

    elif command in ['list', 'ls', 'outlets']:
        # print info
        print_outlets(params.POWER_UNITS, params.POWER_GROUPS)

    # Unrecognized function
    else:
        raise errors.InputError('Unrecognized command "{}"'.format(command))


def print_info(info):
    """Print the full info dict."""
    print('####### POWER INFO ########')
    for unit in params.POWER_UNITS:
        ip = params.POWER_UNITS[unit]['IP']
        print('UNIT {} ({})'.format(unit, ip))
        status = info['status_' + unit]
        if 'UPS' in unit:
            ups_status = status['status']
            ups_percent = status['percent']
            ups_time = status['time']
            ups_load = status['load']
            print('Status: {}'.format(ups_status))
            print('Current load:       {}%'.format(ups_load))
            print('Percent remaining:  {}%'.format(ups_percent))
            print('Time remaining:     {}s'.format(ups_time))
        names = params.POWER_UNITS[unit]['NAMES']
        for outlet in names:
            outlet_name = '({}):'.format(outlet)
            outlet_no = names.index(outlet) + 1
            outlet_status = status[outlet]
            print('Outlet {: <2} {: <15} {}'.format(outlet_no, outlet_name, outlet_status))
        print('~~~~~~~')

    print('Uptime: %.1fs' % info['uptime'])
    print('Ping: %.5fs' % info['ping'])
    print('Timestamp: %s' % info['timestamp'])
    print('###########################')


def print_info_s(info):
    """Print the info dict in a compact way."""
    for unit in params.POWER_UNITS:
        ip = params.POWER_UNITS[unit]['IP']
        status = info['status_' + unit]
        if 'status' in status:
            unit_status = status['status']
            print('{} ({})       [{}]'.format(unit, ip, unit_status))
        else:
            print('{} ({})'.format(unit, ip))
        if 'UPS' in unit:
            ups_percent = status['percent']
            ups_time = status['time']
            ups_load = status['load']
            print('   Load: {: >5}%'.format(ups_load))
            print('   Remaining: {}% ({}s)'.format(ups_percent, ups_time))
        names = params.POWER_UNITS[unit]['NAMES']
        for outlet in names:
            outlet_name = '({}):'.format(outlet)
            outlet_no = names.index(outlet) + 1
            outlet_status = status[outlet]
            if outlet[0] != '_':
                print('   Outlet {:<2} {: <15} [{}]'.format(outlet_no, outlet_name, outlet_status))


def print_outlets(unit_dict, group_dict):
    """Print the outlets and groups."""
    print('OUTLETS:')
    for unit in unit_dict:
        string = '   {: >7}:  '.format(unit.upper())
        for name in unit_dict[unit]['NAMES']:
            if name[0] != '_':
                string += '{}, '.format(name)
        print(string[:-2])

    print('GROUPS:')
    for group in group_dict:
        string = '   {: >7}:  '.format(group)
        for name in group_dict[group]:
            if name[0] != '_':
                string += '{}, '.format(name)
        print(string[:-2])


def print_instructions():
    """Print instructions for using the daemon."""
    print('Usage: power command [options]',
          'Daemon commands:',
          '  start                          start the daemon',
          '  shutdown                       shutdown the daemon',
          '  restart                        restart the daemon',
          '  kill                           kill the daemon',
          '  ping                           ping the daemon',
          'Power commands:',
          '  on [names]|[unit outlet]       turn on specified outlet(s)',
          '  off [names]|[unit outlet]      turn off specified outlet(s)',
          '  reboot [names]|[unit outlet]   reboot specified outlet(s)',
          '  outlets/list                   list valid outlets and groups',
          '  info/status [v]                report current status',
          '  log [stdout]                   print daemon log (tail alias)',
          'Control commands:',
          '  i                              enter interactive mode',
          '  q/exit                         quit interactive mode',
          '  ?/help                         print these instructions',
          sep='\n')


if __name__ == "__main__":
    if len(sys.argv) == 1:
        print_instructions()
    else:
        command, *args = sys.argv[1:]
        if command == 'i':
            while True:
                interactive_input = input('{}> '.format(DAEMON_ID)).split()
                if len(interactive_input) > 0:
                    command, *args = interactive_input
                    if command in ['q', 'exit']:
                        break
                    else:
                        with misc.print_errors():
                            query(command, args, DAEMON_ID)
        else:
            with misc.print_errors():
                query(command, args, DAEMON_ID)
