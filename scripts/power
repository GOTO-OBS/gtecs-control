#!/usr/bin/env python

########################################################################
#                                power.py                              #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#           G-TeCS script to provide control over power_daemon         #
#                     Martin Dyer, Sheffield, 2015                     #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#                   Based on the SLODAR/pt5m system                    #
########################################################################

### Import ###
# Python modules
from __future__ import absolute_import
from __future__ import print_function
import os, sys
import readline
import time
import Pyro4
from six.moves import input, range
# TeCS modules
from gtecs.tecs_modules import misc
from gtecs.tecs_modules import params
from gtecs.tecs_modules import daemons

########################################################################
# Interactive functions

def interactive():
    while True:
        i_in = input('{}> '.format(daemon_ID)).split()
        if len(i_in) > 0:
            command, *args = i_in
            if command == 'q' or command == 'exit':
                return
            else:
                with misc.print_errors():
                    query(command, args)

def query(command, args):
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise misc.InputError('Already in interactive mode')

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Primary daemon control
    elif command == 'start':
        reply = daemons.start_daemon(daemon_ID)
        print(reply)

    elif command == 'shutdown':
        reply = daemons.shutdown_daemon(daemon_ID)
        print(reply)

    elif command == 'restart':
        reply = daemons.restart_daemon(daemon_ID)
        print(reply)

    elif command == 'kill':
        reply = daemons.kill_daemon(daemon_ID)
        print(reply)

    elif command == 'ping':
        reply = daemons.ping_daemon(daemon_ID)
        print(reply)

    elif command == 'info':
        # parse arguments
        if len(args) == 0:
            info_type = 'simple'
        elif len(args) == 1 and args[0] in ['v','V','-v','-V']:
            info_type = 'verbose'
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_ID, 'get_info')
        # print response
        if not reply:
            raise ValueError('No info returned, check daemon')
        elif info_type == 'simple':
            print_info_s(reply)
        elif info_type == 'verbose':
            print_info(reply)

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            log_path = params.LOG_PATH + daemon_ID + '-stdout.log'
            args.remove('stdout')
        else:
            log_path = params.LOG_PATH + daemon_ID + '.log'
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        # send command
        misc.execute_command(tail_command)

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Daemon functions
    elif command in ['on','off','reboot']:
        # parse arguments
        if len(args) == 1:
            unit = None
            outlets = args[0].split(',')
        elif len(args) == 2:
            unit = args[0]
            outlets = args[1].split(',')
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_ID, command, [outlets, unit])
        print(reply)

    elif command in ['list', 'ls', 'outlets']:
        # print info
        print_outlets(params.POWER_UNITS, params.POWER_GROUPS)

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Unrecognized function
    else:
        raise misc.InputError('Unrecognized command "{}"'.format(command))

########################################################################
# Output formatting functions

def print_info(info):
    print('####### POWER INFO ########')
    for unit in params.POWER_UNITS:
        ip = params.POWER_UNITS[unit]['IP']
        print('UNIT {} ({})'.format(unit, ip))
        status = info['status_'+unit]
        if 'UPS' in unit:
            ups_status = status['status']
            ups_percent = status['percent']
            ups_time = status['time']
            ups_load = status['load']
            print('Status: {}'.format(ups_status))
            print('Current load:       {}%'.format(ups_load))
            print('Percent remaining:  {}%'.format(ups_percent))
            print('Time remaining:     {}s'.format(ups_time))
        names = params.POWER_UNITS[unit]['NAMES']
        for outlet in names:
            outlet_name = '({}):'.format(outlet)
            outlet_no = names.index(outlet) + 1
            outlet_status = status[outlet]
            print('Outlet {: <2} {: <15} {}'.format(outlet_no, outlet_name, outlet_status))
        print('~~~~~~~')

    print('Uptime: %.1fs' %info['uptime'])
    print('Ping: %.5fs' %info['ping'])
    print('Timestamp: %s' %info['timestamp'])
    print('###########################')

def print_info_s(info):
    for unit in params.POWER_UNITS:
        ip = params.POWER_UNITS[unit]['IP']
        status = info['status_'+unit]
        if 'status' in status:
            unit_status = status['status']
            print('{} ({})       [{}]'.format(unit, ip, unit_status))
        else:
            print('{} ({})'.format(unit, ip))
        if 'UPS' in unit:
            ups_percent = status['percent']
            ups_time = status['time']
            ups_load = status['load']
            print('   Load: {: >5}%'.format(ups_load))
            print('   Remaining: {}% ({}s)'.format(ups_percent, ups_time))
        names = params.POWER_UNITS[unit]['NAMES']
        for outlet in names:
            outlet_name = '({}):'.format(outlet)
            outlet_no = names.index(outlet) + 1
            outlet_status = status[outlet]
            if outlet[0] != '_':
                print('   Outlet {:<2} {: <15} [{}]'.format(outlet_no, outlet_name, outlet_status))

def print_outlets(unit_dict, group_dict):
    print('OUTLETS:')
    for unit in unit_dict:
        string = '   {: >7}:  '.format(unit.upper())
        for name in unit_dict[unit]['NAMES']:
            if name[0] != '_':
                string += '{}, '.format(name)
        print(string[:-2])

    print('GROUPS:')
    for group in group_dict:
        string = '   {: >7}:  '.format(group)
        for name in group_dict[group]:
            if name[0] != '_':
                string += '{}, '.format(name)
        print(string[:-2])

def print_instructions():
    help_str = misc.bold('Usage:') + ' power [command]' + '\n' +\
    ' ' + misc.undl('Daemon commands') + ':' + '\n' +\
    '  power ' + misc.bold('start') + '                            - start the daemon' + '\n' +\
    '  power ' + misc.bold('shutdown') + '                         - shutdown the daemon' + '\n' +\
    '  power ' + misc.bold('restart') + '                          - restart the daemon' + '\n' +\
    '  power ' + misc.bold('kill') + '                             - kill the daemon (' + misc.rtxt('emergency use') + ')' + '\n' +\
    '  power ' + misc.bold('ping') + '                             - ping the daemon' + '\n' +\
    ' ' + misc.undl('Power commands') + ':' + '\n' +\
    '  power ' + misc.bold('on') + ' [names] | [unit] [outlet]' + '     - turn on specified outlet(s)' + '\n' +\
    '  power ' + misc.bold('off') + ' [names] | [unit] [outlet]' + '    - turn off specified outlet(s)' + '\n' +\
    '  power ' + misc.bold('reboot') + ' [names] | [unit] [outlet]' + ' - reboot specified outlet(s)' + '\n' +\
    '  power ' + misc.bold('outlets') + '/' + misc.bold('list') + '                     - list valid outlets and groups' + '\n' +\
    '  power ' + misc.bold('info') + ' [v]' + '                         - report current status' + '\n' +\
    '  power ' + misc.bold('log') + ' [stdout]' + '                     - print daemon log (tail alias)' + '\n' +\
    ' ' + misc.undl('Control commands') + ':' + '\n' +\
    '  power ' + misc.bold('i') + '                                - enter interactive mode' + '\n' +\
    '  power ' + misc.bold('q') + '/' + misc.bold('exit') + '                           - quit interactive mode' + '\n' +\
    '  power ' + misc.bold('?') + '/' + misc.bold('help') + '                           - print these instructions'
    print(help_str)

########################################################################

daemon_ID = os.path.basename(__file__)

if len(sys.argv) == 1:
    print_instructions()
else:
    command, *args = sys.argv[1:]
    if command == 'i':
        interactive()
    else:
        with misc.print_errors():
            query(command, args)
