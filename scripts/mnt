#!/usr/bin/env python

########################################################################
#                                mnt.py                                #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#           G-TeCS script to provide control over mnt_daemon           #
#                     Martin Dyer, Sheffield, 2015                     #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#                   Based on the SLODAR/pt5m system                    #
########################################################################

### Import ###
# Python modules
from __future__ import absolute_import
from __future__ import print_function
import os, sys
import readline
import time
import Pyro4
from astropy.time import Time
from astropy.coordinates import SkyCoord, get_body
from six.moves import input
# TeCS modules
from gtecs.tecs_modules import misc
from gtecs.tecs_modules import params
from gtecs.tecs_modules import daemons

########################################################################
# Interactive functions

def interactive():
    while True:
        i_in = input('{}> '.format(daemon_ID)).split()
        if len(i_in) > 0:
            command, *args = i_in
            if command == 'q' or command == 'exit':
                return
            else:
                query(command, args)

def query(command, args):
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Primary control functions
    if command == 'start':
        daemons.start_daemon(daemon_ID)
    elif command == 'shutdown':
        daemons.shutdown_daemon(daemon_ID)
    elif command == 'restart':
        daemons.restart_daemon(daemon_ID)
    elif command == 'kill':
        daemons.kill_daemon(daemon_ID)
    elif command == 'ping':
        daemons.ping_daemon(daemon_ID)
    elif command == 'help' or command == '?':
        print_instructions()
    elif command == 'i':
        print(misc.ERROR('Already in interactive mode'))

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Mount control functions
    elif command == 'info':
        if len(args) == 0:
            info = daemons.daemon_function(daemon_ID, 'get_info')
            if info: print_info_s(info)
        elif len(args) == 1 and args[0] in ['v','V','-v','-V']:
            info = daemons.daemon_function(daemon_ID, 'get_info')
            if info: print_info(info)

    elif command == 'slew':
        c = daemons.daemon_function(daemon_ID, 'slew_to_target')
        if c: print(c)

    elif command == 'track':
        c = daemons.daemon_function(daemon_ID, 'start_tracking')
        if c: print(c)

    elif command == 'stop':
        c = daemons.daemon_function(daemon_ID, 'full_stop')
        if c: print(c)

    elif command == 'blinky':
        if len(args) == 1 and args[0] in ['on', 'On', 'ON']:
            c = daemons.daemon_function(daemon_ID, 'blinky', [True])
            if c: print(c)
        elif len(args) == 1 and args[0] in ['off', 'Off', 'OFF']:
            c = daemons.daemon_function(daemon_ID, 'blinky', [False])
            if c: print(c)
        else:
            print(misc.ERROR('Invalid arguments'))

    elif command == 'park':
        c = daemons.daemon_function(daemon_ID, 'park')
        if c: print(c)

    elif command == 'unpark':
        c = daemons.daemon_function(daemon_ID, 'unpark')
        if c: print(c)

    elif command == 'ra':
        # option 1: decimal degrees
        if len(args) == 1:
            try:
                ra_deg = float(args[0])
                assert 0 <= ra_deg < 360
                ra_hrs = ra_deg*24./360.
                c = daemons.daemon_function(daemon_ID, 'set_target_ra', [ra_hrs])
                if c: print(c)
            except:
                print(misc.ERROR('Invalid arguments'))
        # option 2: hms notation
        elif len(args) == 3:
            try:
                h = int(args[0])
                m = int(args[1])
                s = float(args[2])
                assert 0 <= h < 24
                assert 0 <= m < 60
                assert 0 <= s < 60
                ra_hrs = h + m/60. + s/3600.
                c = daemons.daemon_function(daemon_ID, 'set_target_ra', [ra_hrs])
                if c: print(c)
            except:
                print(misc.ERROR('Invalid arguments'))
        # they're the only options
        else:
            print(misc.ERROR('Invalid arguments'))

    elif command == 'dec':
        # option 1: decimal degrees
        if len(args) == 1:
            try:
                dec_deg = float(args[0])
                assert -90 <= dec_deg <= 90
                c = daemons.daemon_function(daemon_ID, 'set_target_dec', [dec_deg])
                if c: print(c)
            except:
                print(misc.ERROR('Invalid arguments'))
        # option 2: +dms notation
        elif len(args) == 4:
            try:
                sign = args[0]
                d = int(args[1])
                m = int(args[2])
                s = float(args[3])
                assert 0 <= m < 60
                assert 0 <= s < 60
                if sign == '+':
                    dec_deg = d + m/60. + s/3600.
                else:
                    dec_deg = -1*(d + m/60. + s/3600.)
                assert -90 <= dec_deg <= 90
                c = daemons.daemon_function(daemon_ID, 'set_target_dec', [dec_deg])
                if c: print(c)
            except:
                print(misc.ERROR('Invalid arguments'))
        # option 2.5: forgetting the sign, let's work it out from dec
        # NOTE tricky to deal with -0, have to use the string
        elif len(args) == 3:
            try:
                if args[0][0] == '-':
                    sign = '-'
                else:
                    sign = '+'
                d = int(args[0])
                m = int(args[1])
                s = float(args[2])
                assert 0 <= m < 60
                assert 0 <= s < 60
                if sign == '+':
                    dec_deg = d + m/60. + s/3600.
                else: #NB d is negative
                    dec_deg = d - m/60. - s/3600.
                assert -90 <= dec_deg <= 90
                c = daemons.daemon_function(daemon_ID, 'set_target_dec', [dec_deg])
                if c: print(c)
            except:
                print(misc.ERROR('Invalid arguments'))
        # they're the only options
        else:
            print(misc.ERROR('Invalid arguments'))

    elif command == 'n':
        if len(args) == 1:
            try:
                step = float(args[0])
                c = daemons.daemon_function(daemon_ID, 'set_step', [step])
                if c: print(c)
            except:
                print(misc.ERROR('Invalid step distance'))
        direction = 'north'
        c = daemons.daemon_function(daemon_ID, 'offset', [direction])
        if c: print(c)

    elif command == 's':
        if len(args) == 1:
            try:
                step = float(args[0])
                c = daemons.daemon_function(daemon_ID, 'set_step', [step])
                if c: print(c)
            except:
                print(misc.ERROR('Invalid step distance'))
        direction = 'south'
        c = daemons.daemon_function(daemon_ID, 'offset', [direction])
        if c: print(c)

    elif command == 'e':
        if len(args) == 1:
            try:
                step = float(args[0])
                c = daemons.daemon_function(daemon_ID, 'set_step', [step])
                if c: print(c)
            except:
                print(misc.ERROR('Invalid step distance'))
        direction = 'east'
        c = daemons.daemon_function(daemon_ID, 'offset', [direction])
        if c: print(c)

    elif command == 'w':
        if len(args) == 1:
            try:
                step = float(args[0])
                c = daemons.daemon_function(daemon_ID, 'set_step', [step])
                if c: print(c)
            except:
                print(misc.ERROR('Invalid step distance'))
        direction = 'west'
        c = daemons.daemon_function(daemon_ID, 'offset', [direction])
        if c: print(c)

    elif command == 'step':
        step = float(args[0])
        c = daemons.daemon_function(daemon_ID, 'set_step', [step])
        if c: print(c)

    elif command == 'target':
        try:
            if len(args) == 1:
                name = args[0]
            elif len(args) > 1:
                name = ' '.join(args)
            try:
                coord = SkyCoord.from_name(name)
            except:
                coord = get_body(name, Time.now())
            print('Targeting "%s"' %name)
            # set RA
            ra_hrs  = coord.ra.hour
            c = daemons.daemon_function(daemon_ID, 'set_target_ra', [ra_hrs])
            if c: print(c)
            # set Dec
            dec_deg = coord.dec.value
            c = daemons.daemon_function(daemon_ID, 'set_target_dec', [dec_deg])
            if c: print(c)
        except:
            print(misc.ERROR('Cannot find target "%s"' %name))

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Unrecognized function
    else:
        print(misc.ERROR('Unrecognized command "%s"' %command))

########################################################################
# Output formatting functions

def print_info(info):
    print('####### MOUNT INFO ########')
    if info['status'] != 'Slewing':
        print('Status: %s' %info['status'])
    else:
        print('Status: %s (%.2f)' %(info['status'],info['target_dist']))
    print('~~~~~~~')
    print('Mount Alt:        %.2f' %info['mount_alt'])
    print('Mount Az:         %.2f' %info['mount_az'])
    print('Telescope RA:     %.4f' %info['mount_ra'])
    print('Telescope Dec:    %.4f' %info['mount_dec'])
    if info['target_ra'] != None:
        print('Target RA:        %.4f' %info['target_ra'])
    else:
        print('Target RA:        TARGET NOT SET')
    if info['target_dec'] != None:
        print('Target Dec:       %.4f' %info['target_dec'])
    else:
        print('Target Dec:       TARGET NOT SET')
    if info['target_dist'] != None:
        print('Target distance:  %.3f' %info['target_dist'])
    print('Offset step size: %.2f arcsec' %info['step'])
    print('~~~~~~~')
    print('LST:              %.2f' %info['lst'])
    print('Hour Angle:       %.2f' %info['ha'])
    print('UTC:              %s' %info['utc'])
    print('~~~~~~~')
    print('Uptime: %.1fs' %info['uptime'])
    print('Ping: %.5fs' %info['ping'])
    print('Timestamp: %s' %info['timestamp'])
    print('###########################')

def print_info_s(info):
    if info['status'] != 'Slewing':
        print('MOUNT (sitech)           [{}]'.format(info['status']))
    else:
        print('MOUNT (sitech)           Slewing (%.2f)' %info['target_dist'])

    alt, az = info['mount_alt'], info['mount_az']
    ra, dec = info['mount_ra'], info['mount_dec']


    ra_m, ra_s = divmod(abs(ra)*3600,60)
    ra_h, ra_m = divmod(ra_m,60)
    if ra < 0: ra_h = -ra_h
    ra_str = '{:+03.0f}:{:02.0f}:{:04.1f}'.format(ra_h, ra_m, ra_s)
    print('  RA:  {}       Alt: {:6.2f}'.format(ra_str, alt))

    dec_m, dec_s = divmod(abs(dec)*3600,60)
    dec_d, dec_m = divmod(dec_m,60)
    if dec < 0: dec_d = -dec_d
    dec_str = '{:+03.0f}:{:02.0f}:{:04.1f}'.format(dec_d, dec_m, dec_s)
    print('  Dec: {}       Az:  {:6.2f}'.format(dec_str, az))

def print_instructions():
    help_str = misc.bold('Usage:') + ' mnt [command]' + '\n' +\
    ' ' + misc.undl('Daemon commands') + ':' + '\n' +\
    '  mnt ' + misc.bold('start') + '          - start the daemon' + '\n' +\
    '  mnt ' + misc.bold('shutdown') + '       - shutdown the daemon' + '\n' +\
    '  mnt ' + misc.bold('restart') + '        - restart the daemon' + '\n' +\
    '  mnt ' + misc.bold('kill') + '           - kill the daemon (' + misc.rtxt('emergency use') + ')' + '\n' +\
    '  mnt ' + misc.bold('ping') + '           - ping the daemon' + '\n' +\
    ' ' + misc.undl('Mount commands') + ':' + '\n' +\
    '  mnt ' + misc.bold('ra') + ' h m s' + '       - set target ra' + '\n' +\
    '  mnt ' + misc.bold('dec') + ' d m s' + '      - set target dec' + '\n' +\
    '  mnt ' + misc.bold('target') + ' name' + '    - set target as named object (can include spaces)' + '\n' +\
    '  mnt ' + misc.bold('slew') + '           - slew to target ra/dec' + '\n' +\
    '  mnt ' + misc.bold('track') + '          - start tracking' + '\n' +\
    '  mnt ' + misc.bold('stop') + '           - stop moving (tracking/slewing)' + '\n' +\
    '  mnt ' + misc.bold('park') + '           - enter park state' + '\n' +\
    '  mnt ' + misc.bold('unpark') + '         - leave park state' + '\n' +\
    '  mnt ' + misc.bold('n') + '/' + misc.bold('s') + '/' + misc.bold('e') + '/' + misc.bold('w') + ' [step]' + ' - offset in direction by one step' + '\n' +\
    '  mnt ' + misc.bold('step') + ' size' + '      - set offset step size (arcsec, default=10)' + '\n' +\
    '  mnt ' + misc.bold('blinky') + ' on|off' + '  - turn on or off blinky mode' + '\n' +\
    '  mnt ' + misc.bold('info') + ' [v]' + '       - report current status' + '\n' +\
    ' ' + misc.undl('Control commands') + ':' + '\n' +\
    '  mnt ' + misc.bold('i') + '              - enter interactive mode' + '\n' +\
    '  mnt ' + misc.bold('q') + '/' + misc.bold('exit') + '         - quit interactive mode' + '\n' +\
    '  mnt ' + misc.bold('?') + '/' + misc.bold('help') + '         - print these instructions'
    print(help_str)

########################################################################

daemon_ID = os.path.basename(__file__)

if len(sys.argv) == 1:
    print_instructions()
else:
    command, *args = sys.argv[1:]
    if command == 'i':
        interactive()
    else:
        query(command, args)
