#!/usr/bin/env python3
"""A script to provide control over the mnt daemon."""

import json
import os
import sys

import astropy.units as u
from astropy.coordinates import AltAz, SkyCoord, get_body
from astropy.time import Time

from gtecs.common import logging
from gtecs.common.style import errortxt
from gtecs.common.system import execute_long_command
from gtecs.control import daemons
from gtecs.control import misc
from gtecs.control.astronomy import observatory_location


def query(command, args):
    """Process a query."""
    daemon_id = os.path.basename(__file__)

    # Primary daemon control
    if command == 'start':
        host, port = daemons.get_daemon_host(daemon_id)
        pid = daemons.start_daemon(daemon_id)
        print(f'Daemon {daemon_id} started on {host}:{port} (PID {pid})')

    elif command == 'shutdown':
        host, port = daemons.get_daemon_host(daemon_id)
        daemons.shutdown_daemon(daemon_id)
        print(f'Daemon {daemon_id} shutdown on {host}:{port}')

    elif command == 'restart':
        host, port = daemons.get_daemon_host(daemon_id)
        pid = daemons.restart_daemon(daemon_id)
        print(f'Daemon {daemon_id} restarted on {host}:{port} (PID {pid})')

    elif command == 'kill':
        host, port = daemons.get_daemon_host(daemon_id)
        daemons.shutdown_daemon(daemon_id, kill=True)
        print(f'Daemon {daemon_id} killed on {host}:{port}')

    elif command in ['check', 'ping']:
        host, port = daemons.get_daemon_host(daemon_id)
        pid = daemons.check_daemon(daemon_id)
        print(f'Daemon {daemon_id} is running on {host}:{port} (PID {pid})')

    elif command in ['info', 'status']:
        if len(args) == 0:
            info_type = 'simple'
            force = False
        elif len(args) == 1 and args[0] in ['f', 'F', '-f', '-F', '--force-update']:
            info_type = 'simple'
            force = True
        elif len(args) == 1 and args[0] in ['v', 'V', '-v', '-V', '--verbose']:
            info_type = 'verbose'
            force = False
        elif len(args) == 1 and args[0] in ['r', 'R', '-r', '-R', '--raw']:
            info_type = 'raw'
            force = False
        elif (len(args) == 2 and
              ((args[0] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'verbose'
            force = True
        elif (len(args) == 2 and
              ((args[0] in ['r', 'R', '-r', '-R', '--raw'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['r', 'R', '-r', '-R', '--raw'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'raw'
            force = True
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            if info_type != 'raw':
                info_str = daemon.get_info_string(info_type == 'verbose', force)
            else:
                info = daemon.get_info(force)
                info_str = json.dumps(info, indent=2, default=repr)
        print(info_str)

    elif command in ['log', 'tail']:
        if 'stdout' in args:
            log_file = f'{daemon_id}-stdout.log'
            args.remove('stdout')
        else:
            log_file = f'{daemon_id}.log'
        log_path = logging.get_log_path() / log_file
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        execute_long_command(tail_command)

    # Daemon functions
    elif command == 'target':
        if len(args) == 2 and misc.is_num(args[0]) and misc.is_num(args[1]):
            # decimal ra and dec (in degrees)
            ra_deg = float(args[0])
            dec_deg = float(args[1])
            coords = SkyCoord(ra_deg, dec_deg, unit=u.deg)
        elif len(args) >= 1:
            # named target
            name = ' '.join(args)
            try:
                coords = SkyCoord.from_name(name)
            except Exception:
                try:
                    coords = get_body(name, Time.now())
                except Exception:
                    raise ValueError('Cannot find target "{}"'.format(name))
            print('Found coordinates for "{}":'.format(name), end='  ')
            print(f'RA: {coords.ra.deg:.4f} Dec: {coords.dec.deg:.4f}')
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.set_target(coords)
        print('Set target')

    elif command == 'clear':
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.clear_target()
        print('Cleared target')

    elif command == 'slew':
        if len(args) == 0:
            # slew to already set target
            coords = None
        elif len(args) == 2:
            # decimal ra and dec (in degrees)
            ra_deg = float(args[0])
            dec_deg = float(args[1])
            coords = SkyCoord(ra_deg * u.deg, dec_deg * u.deg)
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.slew(coords)
        print(f'Slewing to target')

    elif command in ['slew_altaz', 'altaz']:
        if len(args) == 2:
            # decimal alt and az
            alt = float(args[0])
            if alt == 90:  # We don't want to go to the exact zenith
                alt = 89.99999
            az = float(args[1])
            coords = AltAz(alt=alt * u.deg, az=az * u.deg,
                           obstime=Time.now(), location=observatory_location())
            # Convert to RA/Dec and go to that position instead
            coords = SkyCoord(coords).transform_to('icrs')
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.slew(coords)
        print(f'Slewing to target')

    elif command in ['slew_altaz_target', 'altaz_target']:
        if len(args) == 2:
            alt = float(args[0])
            if alt == 90:  # We don't want to go to the exact zenith
                alt = 89.99999
            az = float(args[1])
            coords = AltAz(alt=alt * u.deg, az=az * u.deg,
                           obstime=Time.now(), location=observatory_location())
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.slew(coords)
        print(f'Slewing to target')

    elif command == 'track':
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.start_tracking()
        print('Started tracking')

    elif command in ['stop', 'halt', 'abort']:
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.full_stop()
        print('Stopping mount')

    elif command == 'park':
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.park()
        print('Mount parking')

    elif command == 'unpark':
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.unpark()
        print('Mount unparked')

    elif command == 'offset':
        if len(args) == 2 and args[0].upper() in ['N', 'E', 'S', 'W']:
            direction = args[0].upper()
            distance = float(args[1])
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.offset(direction, distance)
        print('Slewing to offset coordinates')

    elif command in ['pulseguide', 'pulse_guide', 'guide']:
        if len(args) == 2 and args[0].upper() in ['N', 'E', 'S', 'W']:
            direction = args[0].upper()
            duration = float(args[1])
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.pulse_guide(direction, duration)
        print('Pulse guiding')

    elif command == 'sync':
        if len(args) == 2:
            # decimal ra and dec (in degrees)
            ra_deg = float(args[0])
            dec_deg = float(args[1])
            coords = SkyCoord(ra_deg, dec_deg, unit=u.deg)
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            reply = daemon.sync_mount(coords)
        print('Set sync coordinates')

    elif command == 'set_offset':
        if len(args) == 2:
            # decimal ra and dec (in degrees)
            ra_deg = float(args[0])
            dec_deg = float(args[1])
            coords = SkyCoord(ra_deg, dec_deg, unit=u.deg)
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.set_position_offset(coords)
        print('Set internal offset')

    elif command == 'clear_offset':
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.clear_position_offset()
        print('Cleared internal offset')

    elif command == 'blinky':
        if len(args) == 1:
            command = args[0]
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.blinky(command)
        if command == 'on':
            out_str = 'Blinky mode enabled'
        elif command == 'off':
            out_str = 'Blinky mode disabled'
        print(out_str)

    elif command == 'motors':
        if len(args) == 1:
            command = args[0]
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.power_motors(command)
        if command == 'on':
            out_str = 'Mount motors enabled'
        elif command == 'off':
            out_str = 'Mount motors disabled'
        print(out_str)

    elif command == 'trackrate':
        if len(args) == 1 and args[0].lower() == 'reset':
            ra_rate = 0
            dec_rate = 0
        elif len(args) == 2:
            ra_rate = float(args[0])
            dec_rate = float(args[1])
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.set_trackrate(ra_rate, dec_rate)
        if ra_rate == 0 and dec_rate == 0:
            out_str = 'Reset track rate to sidereal'
        else:
            out_str = 'Set track rate'
        print(out_str)

    elif command == 'clear_error':
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.clear_error()
        print('Cleared any errors')

    # Unrecognized function
    else:
        raise ValueError('Unrecognized command "{}"'.format(command))


if __name__ == '__main__':
    try:
        command, *args = sys.argv[1:]
    except ValueError:
        # no command, print help and exit
        command = 'help'

    if command in ['help', '?']:
        print(
            'Usage: mnt command [options]',
            'Daemon commands:',
            '  start                        start the daemon',
            '  shutdown                     shutdown the daemon',
            '  restart                      restart the daemon',
            '  kill                         kill the daemon',
            '  check/ping                   check the daemon for errors',
            'Mount commands:',
            '  target [ra dec]|name         set target to ra/dec (in decimal deg) or named object',
            '  clear                        clear the stored target',
            '  slew [ra dec]                slew to target or given ra/dec (in decimal deg)',
            '  slew_altaz alt az            slew to given alt/az, then track at sidereal rate',
            '  slew_altaz_target alt az     slew to given alt/az, then "track" alt/az position',
            '  track                        start tracking',
            '  stop/halt/abort              stop moving (tracking/slewing)',
            '  park                         enter park state',
            '  unpark                       leave park state',
            '  offset N|E|S|W dist          offset in direction by dist (in arcsec)',
            '  guide N|E|S|W duration       pulse guide in direction for duration (in ms)',
            '  sync ra dec                  sync current position to given ra/dec (in decimal deg)',
            '  set_offset ra dec            set internal offset from given ra/dec (in decimal deg)',
            '  clear_offset                 clear any internal offset',
            '  trackrate [ra dec]|reset     set track rate in arcsec/sec (reset for sidereal)',
            '  blinky on|off                turn on or off blinky mode (SiTech only)',
            '  motors on|off                turn on or off the mount motors (ASA only)',
            '  clear_error                  clear any current mount errors (ASA only)',
            '  info/status [-r|-v] [-f]     report current status [raw/verbose/force-update]',
            '  log [stdout]                 print daemon log (tail alias)',
            'Control commands:',
            '  i                            enter interactive mode',
            '  q/exit                       quit interactive mode',
            '  ?/help                       print these instructions',
            sep='\n')
        sys.exit()

    if command == 'i':
        while True:
            try:
                interactive_input = input(f'{os.path.basename(__file__)}> ').split()
            except EOFError:
                print()
                sys.exit()
            if len(interactive_input) > 0:
                command, *args = interactive_input
                if command in ['q', 'exit']:
                    sys.exit()
                if command == 'i':
                    print(errortxt('"ValueError: Already in interactive mode"'))
                    continue
                try:
                    query(command, args)
                except Exception as error:
                    print(errortxt(f'"{type(error).__name__}: {error}"'))

    try:
        query(command, args)
    except Exception as error:
        print(errortxt(f'"{type(error).__name__}: {error}"'))
