#!/usr/bin/env python3
"""A script to provide control over the mnt daemon."""

import os
import sys

import astropy.units as u
from astropy.coordinates import Angle, SkyCoord, get_body
from astropy.time import Time

from gtecs import daemons
from gtecs import errors
from gtecs import misc
from gtecs import params


DAEMON_ID = os.path.basename(__file__)


def query(command, args, daemon_id):
    """Process a query."""
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise errors.InputError('Already in interactive mode')

    # Primary daemon control
    elif command == 'start':
        reply = daemons.start_daemon(daemon_id)
        print(reply)

    elif command == 'shutdown':
        reply = daemons.shutdown_daemon(daemon_id)
        print(reply)

    elif command == 'restart':
        reply = daemons.restart_daemon(daemon_id)
        print(reply)

    elif command == 'kill':
        reply = daemons.kill_daemon(daemon_id)
        print(reply)

    elif command in ['check', 'ping']:
        reply = daemons.check_daemon(daemon_id)
        print(reply)

    elif command in ['info', 'status']:
        # parse arguments
        if len(args) == 0:
            info_type = 'simple'
            force = False
        elif len(args) == 1 and args[0] in ['v', 'V', '-v', '-V', '--verbose']:
            info_type = 'verbose'
            force = False
        elif len(args) == 1 and args[0] in ['f', 'F', '-f', '-F', '--force-update']:
            info_type = 'simple'
            force = True
        elif (len(args) == 2 and
              ((args[0] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'verbose'
            force = True
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_id, 'get_info', args=[force])
        # print response
        if not reply:
            raise ValueError('No info returned, check daemon')
        elif info_type == 'simple':
            print_info_s(reply)
        elif info_type == 'verbose':
            print_info(reply)

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            log_file = daemon_id + '-stdout.log'
            args.remove('stdout')
        else:
            log_file = daemon_id + '.log'
        log_path = os.path.join(params.LOG_PATH, log_file)
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        # send command
        misc.execute_long_command(tail_command)

    # Daemon functions
    elif command == 'slew':
        # parse arguments
        if len(args) == 0:
            # slew to already set target
            reply = daemons.daemon_function(daemon_id, 'slew_to_radec')
            print(reply)
        elif len(args) == 2:
            # decimal ra and dec
            ra_deg = float(args[0])
            dec_deg = float(args[1])
            assert 0 <= ra_deg < 360
            ra_hrs = ra_deg * 24. / 360.
            assert 0 <= ra_hrs < 24
            assert -90 <= dec_deg <= 90
            # slew to given target
            reply = daemons.daemon_function(daemon_id, 'slew_to_radec', [ra_hrs, dec_deg])
            print(reply)
        else:
            raise errors.InputError('Invalid arguments')

    elif command == 'track':
        reply = daemons.daemon_function(daemon_id, 'start_tracking')
        print(reply)

    elif command in ['stop', 'halt', 'abort']:
        reply = daemons.daemon_function(daemon_id, 'full_stop')
        print(reply)

    elif command == 'blinky':
        # parse arguments
        if len(args) == 1 and args[0] in ['on', 'On', 'ON']:
            activate = True
        elif len(args) == 1 and args[0] in ['off', 'Off', 'OFF']:
            activate = False
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_id, 'blinky', [activate])
        print(reply)

    elif command == 'park':
        reply = daemons.daemon_function(daemon_id, 'park')
        print(reply)

    elif command == 'unpark':
        reply = daemons.daemon_function(daemon_id, 'unpark')
        print(reply)

    elif command == 'ra':
        # parse arguments
        if len(args) == 1:
            # decimal
            ra_deg = float(args[0])
            assert 0 <= ra_deg < 360
            ra_hrs = ra_deg * 24. / 360.
            assert 0 <= ra_hrs < 24
        elif len(args) == 3:
            # h m s
            h = int(args[0])
            m = int(args[1])
            s = float(args[2])
            assert 0 <= h < 24
            assert 0 <= m < 60
            assert 0 <= s < 60
            ra_hrs = h + m / 60. + s / 3600.
            assert 0 <= ra_hrs < 24
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_id, 'set_target_ra', [ra_hrs])
        print(reply)

    elif command == 'dec':
        # parse arguments
        if len(args) == 1:
            # decimal
            dec_deg = float(args[0])
            assert -90 <= dec_deg <= 90
        elif len(args) == 3:
            # d m s
            if args[0][0] == '-':
                sign = '-'
            else:
                sign = '+'
            d = int(args[0])
            m = int(args[1])
            s = float(args[2])
            assert 0 <= m < 60
            assert 0 <= s < 60
            if sign == '+':
                dec_deg = d + m / 60. + s / 3600.
            else:  # NB d is negative
                dec_deg = d - m / 60. - s / 3600.
            assert -90 <= dec_deg <= 90
        elif len(args) == 4:
            # + d m s
            sign = args[0]
            d = int(args[1])
            m = int(args[2])
            s = float(args[3])
            assert 0 <= m < 60
            assert 0 <= s < 60
            if sign == '+':
                dec_deg = d + m / 60. + s / 3600.
            else:
                dec_deg = -1 * (d + m / 60. + s / 3600.)
            assert -90 <= dec_deg <= 90
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_id, 'set_target_dec', [dec_deg])
        print(reply)

    elif command == 'trackrate':
        # parse arguments
        if len(args) == 1:
            assert args[0].lower() == 'reset'
            ra_rate = 0
            dec_rate = 0
        elif len(args) == 2:
            ra_rate = float(args[0])
            dec_rate = float(args[1])
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_id, 'set_trackrate', [ra_rate, dec_rate])
        print(reply)

    elif command == 'offset':
        # parse arguments
        if len(args) == 2:
            direction = args[0].upper()
            assert direction in ['N', 'E', 'S', 'W']
            distance = float(args[1])
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_id, 'offset', [direction, distance])
        print(reply)

    elif command == 'target':
        # parse arguments
        if len(args) == 1:
            name = args[0]
        elif len(args) > 1:
            name = ' '.join(args)
        else:
            raise errors.InputError('Invalid arguments')
        # find target
        try:
            coord = SkyCoord.from_name(name)
        except Exception:
            try:
                coord = get_body(name, Time.now())
            except Exception:
                raise errors.InputError('Cannot find target "{}"'.format(name))
        print('Found coordinates for "{}":'.format(name), end='  ')
        print('RA: {:.4f}  Dec: {:.4f}'.format(coord.ra.hour, coord.dec.value))
        # send commands
        reply = daemons.daemon_function(daemon_id, 'set_target_ra', [coord.ra.hour])
        print(reply)
        reply = daemons.daemon_function(daemon_id, 'set_target_dec', [coord.dec.value])
        print(reply)

    elif command == 'clear':
        # send command
        reply = daemons.daemon_function(daemon_id, 'clear_target')
        print(reply)

    elif command in ['slew_altaz', 'altaz']:
        # parse arguments
        if len(args) == 2:
            alt_deg = float(args[0])
            if alt_deg == 90:
                alt_deg = 89.99999
            assert 0 <= alt_deg < 90
            az_deg = float(args[1])
            if az_deg == 360:
                az_deg = 0
            assert 0 <= az_deg < 360
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_id, 'slew_to_altaz', [alt_deg, az_deg])
        print(reply)

    # Unrecognized function
    else:
        raise errors.InputError('Unrecognized command "{}"'.format(command))


def print_info(info):
    """Print the full info dict."""
    print('####### MOUNT INFO ########')
    if info['status'] != 'Slewing':
        print('Status: {}'.format(info['status']))
    else:
        if info['target_dist']:
            print('Status: {} ({:.2f} deg)'.format(info['status'], info['target_dist']))
        else:
            print('Status: {}'.format(info['status']))
    print('~~~~~~~')
    ra, dec = info['mount_ra'], info['mount_dec']
    ra_str = Angle(ra * u.hour).to_string(sep=':', precision=1)
    dec_str = Angle(dec * u.deg).to_string(sep=':', precision=1, alwayssign=True)
    print('Telescope RA:     {:>11} / {:8.4f} deg'.format(ra_str, ra * 180 / 12))
    print('Telescope Dec:    {:>11} / {:8.4f} deg'.format(dec_str, dec))

    if info['target_ra'] is not None:
        ra = info['target_ra']
        ra_str = Angle(ra * u.hour).to_string(sep=':', precision=1)
        print('Target RA:        {:>11} / {:8.4f} deg'.format(ra_str, ra * 180 / 12))
    else:
        print('Target RA:        TARGET NOT SET')
    if info['target_dec'] is not None:
        dec = info['target_dec']
        dec_str = Angle(dec * u.deg).to_string(sep=':', precision=1, alwayssign=True)
        print('Target Dec:       {:>11} / {:8.4f} deg'.format(dec_str, dec))
    else:
        print('Target Dec:       TARGET NOT SET')

    if info['target_dist'] is not None:
        print('Target distance:  {:.3f}'.format(info['target_dist']))

    print('Mount Alt:        {:.2f}'.format(info['mount_alt']))
    print('Mount Az:         {:.2f}'.format(info['mount_az']))
    print('~~~~~~~')
    if info['trackrate_ra'] == 0:
        print('RA track rate:    SIDEREAL')
    else:
        print('RA track rate:    {:.2f} arcsec/sec'.format(info['trackrate_ra']))
    if info['trackrate_dec'] == 0:
        print('Dec track rate:    SIDEREAL')
    else:
        print('Dec track rate:   {:.2f} arcsec/sec'.format(info['trackrate_dec']))
    print('LST:              {:.2f}'.format(info['lst']))
    print('Hour Angle:       {:.2f}'.format(info['ha']))
    print('~~~~~~~')
    print('Uptime: {:.1f}s'.format(info['uptime']))
    print('Timestamp: {}'.format(info['timestamp']))
    print('###########################')


def print_info_s(info):
    """Print the info dict in a compact way."""
    if info['status'] != 'Slewing':
        print('MOUNT ({})        [{}]'.format(params.SITECH_HOST, info['status']))
    else:
        if info['target_dist']:
            print('MOUNT ({})        Slewing ({:.2f} deg)'.format(params.SITECH_HOST,
                                                                  info['target_dist']))
        else:
            print('MOUNT ({})        Slewing '.format(params.SITECH_HOST))

    alt, az = info['mount_alt'], info['mount_az']
    ra, dec = info['mount_ra'], info['mount_dec']
    ra_str = Angle(ra * u.hour).to_string(sep=':', precision=1)
    dec_str = Angle(dec * u.deg).to_string(sep=':', precision=1, alwayssign=True)

    print('  RA:  {:>11}       Alt: {:6.2f}'.format(ra_str, alt))
    print('  Dec: {:>11}       Az:  {:6.2f}'.format(dec_str, az))


def print_instructions():
    """Print instructions for using the daemon."""
    print('Usage: mnt command [options]',
          'Daemon commands:',
          '  start                          start the daemon',
          '  shutdown                       shutdown the daemon',
          '  restart                        restart the daemon',
          '  kill                           kill the daemon',
          '  check/ping                     check the daemon for errors',
          'Mount commands:',
          '  ra h m s                       set target ra',
          '  dec d m s                      set target dec',
          '  target name                    set target as named object (can include spaces)',
          '  clear                          clear the stored target',
          '  slew [ra dec]                  slew to target or given ra/dec',
          '  slew_altaz alt az              slew to given alt/az',
          '  track                          start tracking',
          '  stop                           stop moving (tracking/slewing)',
          '  park                           enter park state',
          '  unpark                         leave park state',
          '  trackrate [ra dec] | reset     set track rate in arcsec/sec (reset for sidereal)',
          '  offset [N|E|S|W dist]          offset in direction by dist (in arcsec)',
          '  blinky on|off                  turn on or off blinky mode',
          '  info/status [-v] [-f]          report current status [verbose/force-update]',
          '  log [stdout]                   print daemon log (tail alias)',
          'Control commands:',
          '  i                              enter interactive mode',
          '  q/exit                         quit interactive mode',
          '  ?/help                         print these instructions',
          sep='\n')


if __name__ == '__main__':
    if len(sys.argv) == 1:
        print_instructions()
    else:
        command, *args = sys.argv[1:]
        if command == 'i':
            while True:
                interactive_input = input('{}> '.format(DAEMON_ID)).split()
                if len(interactive_input) > 0:
                    command, *args = interactive_input
                    if command in ['q', 'exit']:
                        break
                    else:
                        with misc.print_errors():
                            query(command, args, DAEMON_ID)
        else:
            with misc.print_errors():
                query(command, args, DAEMON_ID)
