#!/usr/bin/env python

########################################################################
#                                mnt.py                                #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#           G-TeCS script to provide control over mnt_daemon           #
#                     Martin Dyer, Sheffield, 2015                     #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#                   Based on the SLODAR/pt5m system                    #
########################################################################

### Import ###
# Python modules
from __future__ import absolute_import
from __future__ import print_function
import os, sys
import readline
import time
import Pyro4
from astropy.time import Time
from astropy.coordinates import SkyCoord, get_body
# TeCS modules
from gtecs.tecs_modules import misc
from gtecs.tecs_modules import params
from six.moves import input

########################################################################
# Mount control functions
def get_info():
    if not misc.daemon_is_running('mnt'):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive('mnt'):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as mnt:
            mnt._pyroTimeout = params.PROXY_TIMEOUT
            try:
                info = mnt.get_info()
                return info
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

def slew_to_radec(ra,dec):
    if not misc.daemon_is_running('mnt'):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive('mnt'):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as mnt:
            mnt._pyroTimeout = params.PROXY_TIMEOUT
            try:
                c = mnt.slew_to_radec(ra,dec)
                if c: print(c)
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

def slew_to_target():
    if not misc.daemon_is_running('mnt'):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive('mnt'):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as mnt:
            mnt._pyroTimeout = params.PROXY_TIMEOUT
            try:
                c = mnt.slew_to_target()
                if c: print(c)
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

def start_tracking():
    if not misc.daemon_is_running('mnt'):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive('mnt'):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as mnt:
            mnt._pyroTimeout = params.PROXY_TIMEOUT
            try:
                c = mnt.start_tracking()
                if c: print(c)
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

def full_stop():
    if not misc.daemon_is_running('mnt'):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive('mnt'):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as mnt:
            mnt._pyroTimeout = params.PROXY_TIMEOUT
            try:
                c = mnt.full_stop()
                if c: print(c)
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

def park():
    if not misc.daemon_is_running('mnt'):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive('mnt'):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as mnt:
            mnt._pyroTimeout = params.PROXY_TIMEOUT
            try:
                c = mnt.park()
                if c: print(c)
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

def unpark():
    if not misc.daemon_is_running('mnt'):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive('mnt'):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as mnt:
            mnt._pyroTimeout = params.PROXY_TIMEOUT
            try:
                c = mnt.unpark()
                if c: print(c)
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

def set_target_ra(ra_hrs):
    if not misc.daemon_is_running('mnt'):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive('mnt'):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as mnt:
            mnt._pyroTimeout = params.PROXY_TIMEOUT
            try:
                c = mnt.set_target_ra(ra_hrs)
                if c: print(c)
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

def set_target_dec(dec_deg):
    if not misc.daemon_is_running('mnt'):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive('mnt'):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as mnt:
            mnt._pyroTimeout = params.PROXY_TIMEOUT
            try:
                c = mnt.set_target_dec(dec_deg)
                if c: print(c)
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

def offset(direction):
    if not misc.daemon_is_running('mnt'):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive('mnt'):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as mnt:
            mnt._pyroTimeout = params.PROXY_TIMEOUT
            try:
                c = mnt.offset(direction)
                if c: print(c)
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

def set_step(offset):
    if not misc.daemon_is_running('mnt'):
        print(misc.ERROR('Daemon not running'))
    elif not misc.daemon_is_alive('mnt'):
        print(misc.ERROR('Daemon running but not responding, check logs'))
    else:
        with Pyro4.Proxy(DAEMON_ADDRESS) as mnt:
            mnt._pyroTimeout = params.PROXY_TIMEOUT
            try:
                c = mnt.set_step(offset)
                if c: print(c)
            except Exception as e:
                print(misc.ERROR('Daemon returned {}: "{}"'.format(type(e).__name__, e)))

########################################################################
# Interactive mode
def interactive():
    while True:
        i_in = input('mnt> ').split()
        if len(i_in) > 0:
            command, *args = i_in
            if command == 'q' or command == 'exit':
                return
            else:
                query(command, args)

def query(command, args):
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Primary control functions
    if command == 'start':
        misc.start_daemon('mnt')
    elif command == 'shutdown':
        misc.shutdown_daemon('mnt')
    elif command == 'kill':
        misc.kill_daemon('mnt')
    elif command == 'ping':
        misc.ping_daemon('mnt')

    elif command == 'startS':
        misc.start_win(SITECH_PROCESS, SITECH_HOST, stdout=SITECH_OUTPUT)
    elif command == 'shutdownS':
        misc.shutdown_daemon(SITECH_ADDRESS)
    elif command == 'pingS':
        misc.ping_daemon(SITECH_ADDRESS)

    elif command == 'help' or command == '?':
        print_instructions()
    elif command == 'i':
        print(misc.ERROR('Already in interactive mode'))

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Mount control functions
    elif command =='info':
        info = get_info()
        if info:
            print('####### MOUNT INFO ########')
            if info['status'] != 'Slewing':
                print('Status: %s' %info['status'])
            else:
                print('Status: %s (%.2f)' %(info['status'],info['target_dist']))
            print('~~~~~~~')
            print('Mount Alt:        %.2f' %info['mount_alt'])
            print('Mount Az:         %.2f' %info['mount_az'])
            print('Telescope RA:     %.4f' %info['mount_ra'])
            print('Telescope Dec:    %.4f' %info['mount_dec'])
            if info['target_ra'] != None:
                print('Target RA:        %.4f' %info['target_ra'])
            else:
                print('Target RA:        TARGET NOT SET')
            if info['target_dec'] != None:
                print('Target Dec:       %.4f' %info['target_dec'])
            else:
                print('Target Dec:       TARGET NOT SET')
            if info['target_dist'] != None:
                print('Target distance:  %.3f' %info['target_dist'])
            print('Offset step size: %.2f arcsec' %info['step'])
            print('~~~~~~~')
            print('LST:              %.2f' %info['lst'])
            print('Hour Angle:       %.2f' %info['ha'])
            print('UTC:              %s' %info['utc'])
            print('~~~~~~~')
            print('Uptime: %.1fs' %info['uptime'])
            print('Ping: %.5fs' %info['ping'])
            print('Timestamp: %s' %info['timestamp'])
            print('###########################')
        else:
            print(misc.ERROR('Problem retrieving info'))
    elif command == 'slew':
        slew_to_target()
    elif command == 'track':
        start_tracking()
    elif command == 'stop':
        full_stop()
    elif command == 'park':
        park()
    elif command == 'unpark':
        unpark()

    elif command == 'ra':
        # option 1: decimal degrees
        if len(args) == 1:
            try:
                ra_deg = float(args[0])
                assert 0 <= ra_deg < 360
                ra_hrs = ra_deg*24./360.
                set_target_ra(ra_hrs)
            except:
                print(misc.ERROR('Invalid arguments'))
        # option 2: hms notation
        elif len(args) == 3:
            try:
                h = int(args[0])
                m = int(args[1])
                s = int(args[2])
                assert 0 <= h < 24
                assert 0 <= m < 60
                assert 0 <= s < 60
                ra_hrs = h + m/60. + s/3600.
                set_target_ra(ra_hrs)
            except:
                print(misc.ERROR('Invalid arguments'))
        # they're the only options
        else:
            print(misc.ERROR('Invalid arguments'))

    elif command == 'dec':
        # option 1: decimal degrees
        if len(args) == 1:
            try:
                dec_deg = float(args[0])
                assert -90 <= dec_deg <= 90
                set_target_dec(dec_deg)
            except:
                print(misc.ERROR('Invalid arguments'))
        # option 2: +dms notation
        elif len(args) == 4:
            try:
                sign = args[0]
                d = int(args[1])
                m = int(args[2])
                s = int(args[3])
                assert 0 <= m < 60
                assert 0 <= s < 60
                if sign == '+':
                    dec_deg = d + m/60. + s/3600.
                else:
                    dec_deg = -1*(d + m/60. + s/3600.)
                assert -90 <= dec_deg <= 90
                set_target_dec(dec_deg)
            except:
                print(misc.ERROR('Invalid arguments'))
        # option 2.5: forgetting the sign, let's work it out from dec
        # NOTE tricky to deal with -0, have to use the string
        elif len(args) == 3:
            try:
                if args[0][0] == '-':
                    sign = '-'
                else:
                    sign = '+'
                d = int(args[0])
                m = int(args[1])
                s = int(args[2])
                assert 0 <= m < 60
                assert 0 <= s < 60
                if sign == '+':
                    dec_deg = d + m/60. + s/3600.
                else: #NB d is negative
                    dec_deg = d - m/60. - s/3600.
                assert -90 <= dec_deg <= 90
                set_target_dec(dec_deg)
            except:
                print(misc.ERROR('Invalid arguments'))
        # they're the only options
        else:
            print(misc.ERROR('Invalid arguments'))

    elif command == 'n':
        if len(args) == 1:
            try:
                step = float(args[0])
                set_step(step)
            except:
                print(misc.ERROR('Invalid step distance'))
        offset('north')
    elif command == 's':
        if len(args) == 1:
            try:
                step = float(args[0])
                set_step(step)
            except:
                print(misc.ERROR('Invalid step distance'))
        offset('south')
    elif command == 'e':
        if len(args) == 1:
            try:
                step = float(args[0])
                set_step(step)
            except:
                print(misc.ERROR('Invalid step distance'))
        offset('east')
    elif command == 'w':
        if len(args) == 1:
            try:
                step = float(args[0])
                set_step(step)
            except:
                print(misc.ERROR('Invalid step distance'))
        offset('west')
    elif command == 'step':
        set_step(float(args[0]))

    elif command == 'target':
        try:
            if len(args) == 1:
                name = args[0]
            elif len(args) > 1:
                name = ' '.join(args)
            try:
                coord = SkyCoord.from_name(name)
            except:
                coord = get_body(name, Time.now())
            print('Targeting "%s"' %name)
            ra_hrs = coord.ra.hour
            dec_deg = coord.dec.value
            set_target_ra(ra_hrs)
            set_target_dec(dec_deg)
        except:
            print(misc.ERROR('Cannot find target "%s"' %name))

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Unrecognized function
    else:
        print(misc.ERROR('Unrecognized command "%s"' %command))

def print_instructions():
    help_str = misc.bold('Usage:') + ' mnt [command]' + '\n' +\
    ' ' + misc.undl('Daemon commands') + ':' + '\n' +\
    '  mnt ' + misc.bold('start') + '          - start the daemon' + '\n' +\
    '  mnt ' + misc.bold('shutdown') + '       - shutdown the daemon' + '\n' +\
    '  mnt ' + misc.bold('kill') + '           - kill the daemon (' + misc.rtxt('emergency use') + ')' + '\n' +\
    '  mnt ' + misc.bold('ping') + '           - ping the daemon' + '\n' +\
    ' ' + misc.undl('SiTech interface commands') + ':' + '\n' +\
    '  mnt ' + misc.bold('startS') + '         - start the daemon' + '\n' +\
    '  mnt ' + misc.bold('shutdownS') + '      - shutdown the daemon' + '\n' +\
    '  mnt ' + misc.bold('pingS') + '          - ping the daemon' + '\n' +\
    ' ' + misc.undl('Mount commands') + ':' + '\n' +\
    '  mnt ' + misc.bold('ra') + ' h m s' + '       - set target ra' + '\n' +\
    '  mnt ' + misc.bold('dec') + ' d m s' + '      - set target dec' + '\n' +\
    '  mnt ' + misc.bold('target') + ' name' + '    - set target as named object (can include spaces)' + '\n' +\
    '  mnt ' + misc.bold('slew') + '           - slew to target ra/dec' + '\n' +\
    '  mnt ' + misc.bold('track') + '          - start tracking' + '\n' +\
    '  mnt ' + misc.bold('stop') + '           - stop moving (tracking/slewing)' + '\n' +\
    '  mnt ' + misc.bold('park') + '           - enter park state' + '\n' +\
    '  mnt ' + misc.bold('unpark') + '         - leave park state' + '\n' +\
    '  mnt ' + misc.bold('n') + '/' + misc.bold('s') + '/' + misc.bold('e') + '/' + misc.bold('w') + ' [step]' + ' - offset in direction by one step' + '\n' +\
    '  mnt ' + misc.bold('step') + ' size' + '      - set offset step size (arcsec, default=10)' + '\n' +\
    '  mnt ' + misc.bold('info') + ' [v]' + '       - report current status' + '\n' +\
    ' ' + misc.undl('Control commands') + ':' + '\n' +\
    '  mnt ' + misc.bold('i') + '              - enter interactive mode' + '\n' +\
    '  mnt ' + misc.bold('q') + '/' + misc.bold('exit') + '         - quit interactive mode' + '\n' +\
    '  mnt ' + misc.bold('?') + '/' + misc.bold('help') + '         - print these instructions'
    print(help_str)

########################################################################
# Control system

if len(sys.argv) == 1:
    print_instructions()
else:
    DAEMON_ADDRESS = params.DAEMONS['mnt']['ADDRESS']

    SITECH_PROCESS = params.SITECH_PROCESS
    SITECH_HOST = params.WIN_HOST
    SITECH_ADDRESS = params.SITECH_ADDRESS
    # don't redirect on windows
    SITECH_OUTPUT = params.CYGWIN_PATH + 'sitech-stdout.log'

    command, *args = sys.argv[1:]
    if command == 'i':
        interactive()
    else:
        query(command, args)
