#!/usr/bin/env python

########################################################################
#                                mnt.py                                #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#           G-TeCS script to provide control over mnt_daemon           #
#                     Martin Dyer, Sheffield, 2015                     #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#                   Based on the SLODAR/pt5m system                    #
########################################################################

### Import ###
# Python modules
from __future__ import absolute_import
from __future__ import print_function
import os, sys
import readline
import time
import Pyro4
from astropy.time import Time
from astropy.coordinates import Angle, SkyCoord, get_body
import astropy.units as u
from six.moves import input
# TeCS modules
from gtecs.tecs_modules import misc
from gtecs.tecs_modules import params
from gtecs.tecs_modules import daemons

########################################################################
# Interactive functions

def interactive():
    while True:
        i_in = input('{}> '.format(daemon_ID)).split()
        if len(i_in) > 0:
            command, *args = i_in
            if command == 'q' or command == 'exit':
                return
            else:
                with misc.print_errors():
                    query(command, args)

def query(command, args):
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise misc.InputError('Already in interactive mode')

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Primary daemon control
    elif command == 'start':
        reply = daemons.start_daemon(daemon_ID)
        print(reply)

    elif command == 'shutdown':
        reply = daemons.shutdown_daemon(daemon_ID)
        print(reply)

    elif command == 'restart':
        reply = daemons.restart_daemon(daemon_ID)
        print(reply)

    elif command == 'kill':
        reply = daemons.kill_daemon(daemon_ID)
        print(reply)

    elif command == 'ping':
        reply = daemons.ping_daemon(daemon_ID)
        print(reply)

    elif command == 'info':
        # parse arguments
        if len(args) == 0:
            info_type = 'simple'
        elif len(args) == 1 and args[0] in ['v','V','-v','-V']:
            info_type = 'verbose'
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_ID, 'get_info')
        # print response
        if not reply:
            raise ValueError('No info returned, check daemon')
        elif info_type == 'simple':
            print_info_s(reply)
        elif info_type == 'verbose':
            print_info(reply)

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            log_path = params.LOG_PATH + daemon_ID + '-stdout.log'
            args.remove('stdout')
        else:
            log_path = params.LOG_PATH + daemon_ID + '.log'
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        # send command
        misc.execute_command(tail_command)

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Daemon functions
    elif command == 'slew':
        reply = daemons.daemon_function(daemon_ID, 'slew_to_target')
        print(reply)

    elif command == 'track':
        reply = daemons.daemon_function(daemon_ID, 'start_tracking')
        print(reply)

    elif command in ['stop', 'halt', 'abort']:
        reply = daemons.daemon_function(daemon_ID, 'full_stop')
        print(reply)

    elif command == 'blinky':
        # parse arguments
        if len(args) == 1 and args[0] in ['on', 'On', 'ON']:
            activate = True
        elif len(args) == 1 and args[0] in ['off', 'Off', 'OFF']:
            activate = False
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_ID, 'blinky', [activate])
        print(reply)

    elif command == 'park':
        reply = daemons.daemon_function(daemon_ID, 'park')
        print(reply)

    elif command == 'unpark':
        reply = daemons.daemon_function(daemon_ID, 'unpark')
        print(reply)

    elif command == 'ra':
        # parse arguments
        if len(args) == 1:
            # decimal
            ra_deg = float(args[0])
            assert 0 <= ra_deg < 360
            ra_hrs = ra_deg*24./360.
            assert 0 <= ra_hrs < 24
        elif len(args) == 3:
            # h m s
            h = int(args[0])
            m = int(args[1])
            s = float(args[2])
            assert 0 <= h < 24
            assert 0 <= m < 60
            assert 0 <= s < 60
            ra_hrs = h + m/60. + s/3600.
            assert 0 <= ra_hrs < 24
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_ID, 'set_target_ra', [ra_hrs])
        print(reply)

    elif command == 'dec':
        # parse arguments
        if len(args) == 1:
            # decimal
            dec_deg = float(args[0])
            assert -90 <= dec_deg <= 90
        elif len(args) == 3:
            # d m s
            if args[0][0] == '-':
                sign = '-'
            else:
                sign = '+'
            d = int(args[0])
            m = int(args[1])
            s = float(args[2])
            assert 0 <= m < 60
            assert 0 <= s < 60
            if sign == '+':
                dec_deg = d + m/60. + s/3600.
            else: #NB d is negative
                dec_deg = d - m/60. - s/3600.
            assert -90 <= dec_deg <= 90
        elif len(args) == 4:
            # + d m s
            sign = args[0]
            d = int(args[1])
            m = int(args[2])
            s = float(args[3])
            assert 0 <= m < 60
            assert 0 <= s < 60
            if sign == '+':
                dec_deg = d + m/60. + s/3600.
            else:
                dec_deg = -1*(d + m/60. + s/3600.)
            assert -90 <= dec_deg <= 90
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_ID, 'set_target_dec', [dec_deg])
        print(reply)

    elif command == 'n':
        # parse arguments
        if len(args) == 0:
            step = None
        elif len(args) == 1:
            step = float(args[0])
        else:
            raise misc.InputError('Invalid arguments')
        # set step
        if step:
            reply = daemons.daemon_function(daemon_ID, 'set_step', [step])
            print(reply)
        # send command
        reply = daemons.daemon_function(daemon_ID, 'offset', ['north'])
        print(reply)

    elif command == 's':
        # parse arguments
        if len(args) == 0:
            step = None
        elif len(args) == 1:
            step = float(args[0])
        else:
            raise misc.InputError('Invalid arguments')
        # set step
        if step:
            reply = daemons.daemon_function(daemon_ID, 'set_step', [step])
            print(reply)
        # send command
        reply = daemons.daemon_function(daemon_ID, 'offset', ['south'])
        print(reply)

    elif command == 'e':
        # parse arguments
        if len(args) == 0:
            step = None
        elif len(args) == 1:
            step = float(args[0])
        else:
            raise misc.InputError('Invalid arguments')
        # set step
        if step:
            reply = daemons.daemon_function(daemon_ID, 'set_step', [step])
            print(reply)
        # send command
        reply = daemons.daemon_function(daemon_ID, 'offset', ['east'])
        print(reply)

    elif command == 'w':
        # parse arguments
        if len(args) == 0:
            step = None
        elif len(args) == 1:
            step = float(args[0])
        else:
            raise misc.InputError('Invalid arguments')
        # set step
        if step:
            reply = daemons.daemon_function(daemon_ID, 'set_step', [step])
            print(reply)
        # send command
        reply = daemons.daemon_function(daemon_ID, 'offset', ['west'])
        print(reply)

    elif command == 'step':
        # parse arguments
        if len(args) == 1:
            step = float(args[0])
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_ID, 'set_step', [step])
        print(reply)

    elif command == 'target':
        # parse arguments
        if len(args) == 1:
            name = args[0]
        elif len(args) > 1:
            name = ' '.join(args)
        else:
            raise misc.InputError('Invalid arguments')
        # find target
        try:
            coord = SkyCoord.from_name(name)
        except:
            try:
                coord = get_body(name, Time.now())
            except:
                raise misc.InputError('Cannot find target "%s"' %name)
        print('Targeting "{}"'.format(name))
        # send commands
        reply = daemons.daemon_function(daemon_ID, 'set_target_ra', [coord.ra.hour])
        print(reply)
        reply = daemons.daemon_function(daemon_ID, 'set_target_dec', [coord.dec.value])
        print(reply)

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Unrecognized function
    else:
        raise misc.InputError('Unrecognized command "{}"'.format(command))

########################################################################
# Output formatting functions

def print_info(info):
    print('####### MOUNT INFO ########')
    if info['status'] != 'Slewing':
        print('Status: %s' %info['status'])
    else:
        print('Status: %s (%.2f)' %(info['status'],info['target_dist']))
    print('~~~~~~~')
    print('Mount Alt:        %.2f' %info['mount_alt'])
    print('Mount Az:         %.2f' %info['mount_az'])
    print('Telescope RA:     %.4f' %info['mount_ra'])
    print('Telescope Dec:    %.4f' %info['mount_dec'])
    if info['target_ra'] != None:
        print('Target RA:        %.4f' %info['target_ra'])
    else:
        print('Target RA:        TARGET NOT SET')
    if info['target_dec'] != None:
        print('Target Dec:       %.4f' %info['target_dec'])
    else:
        print('Target Dec:       TARGET NOT SET')
    if info['target_dist'] != None:
        print('Target distance:  %.3f' %info['target_dist'])
    print('Offset step size: %.2f arcsec' %info['step'])
    print('~~~~~~~')
    print('LST:              %.2f' %info['lst'])
    print('Hour Angle:       %.2f' %info['ha'])
    print('UTC:              %s' %info['utc'])
    print('~~~~~~~')
    print('Uptime: %.1fs' %info['uptime'])
    print('Ping: %.5fs' %info['ping'])
    print('Timestamp: %s' %info['timestamp'])
    print('###########################')

def print_info_s(info):
    if info['status'] != 'Slewing':
        print('MOUNT ({})           [{}]'.format(params.SITECH_HOST, info['status']))
    else:
        print('MOUNT ({})           Slewing ({:.2f})'.format(params.SITECH_HOST,info['target_dist']))

    alt, az = info['mount_alt'], info['mount_az']
    ra, dec = info['mount_ra'], info['mount_dec']
    ra_str = Angle(ra*u.hour).to_string(sep=':', precision=1)
    dec_str = Angle(dec*u.deg).to_string(sep=':', precision=1, alwayssign=True)

    print('  RA:  {:>11}       Alt: {:6.2f}'.format(ra_str, alt))
    print('  Dec: {:>11}       Az:  {:6.2f}'.format(dec_str, az))

def print_instructions():
    help_str = misc.bold('Usage:') + ' mnt [command]' + '\n' +\
    ' ' + misc.undl('Daemon commands') + ':' + '\n' +\
    '  mnt ' + misc.bold('start') + '          - start the daemon' + '\n' +\
    '  mnt ' + misc.bold('shutdown') + '       - shutdown the daemon' + '\n' +\
    '  mnt ' + misc.bold('restart') + '        - restart the daemon' + '\n' +\
    '  mnt ' + misc.bold('kill') + '           - kill the daemon (' + misc.rtxt('emergency use') + ')' + '\n' +\
    '  mnt ' + misc.bold('ping') + '           - ping the daemon' + '\n' +\
    ' ' + misc.undl('Mount commands') + ':' + '\n' +\
    '  mnt ' + misc.bold('ra') + ' h m s' + '       - set target ra' + '\n' +\
    '  mnt ' + misc.bold('dec') + ' d m s' + '      - set target dec' + '\n' +\
    '  mnt ' + misc.bold('target') + ' name' + '    - set target as named object (can include spaces)' + '\n' +\
    '  mnt ' + misc.bold('slew') + '           - slew to target ra/dec' + '\n' +\
    '  mnt ' + misc.bold('track') + '          - start tracking' + '\n' +\
    '  mnt ' + misc.bold('stop') + '           - stop moving (tracking/slewing)' + '\n' +\
    '  mnt ' + misc.bold('park') + '           - enter park state' + '\n' +\
    '  mnt ' + misc.bold('unpark') + '         - leave park state' + '\n' +\
    '  mnt ' + misc.bold('n') + '/' + misc.bold('s') + '/' + misc.bold('e') + '/' + misc.bold('w') + ' [step]' + ' - offset in direction by one step' + '\n' +\
    '  mnt ' + misc.bold('step') + ' size' + '      - set offset step size (arcsec, default=10)' + '\n' +\
    '  mnt ' + misc.bold('blinky') + ' on|off' + '  - turn on or off blinky mode' + '\n' +\
    '  mnt ' + misc.bold('info') + ' [v]' + '       - report current status' + '\n' +\
    '  mnt ' + misc.bold('log') + ' [stdout]' + '   - print daemon log (tail alias)' + '\n' +\
    ' ' + misc.undl('Control commands') + ':' + '\n' +\
    '  mnt ' + misc.bold('i') + '              - enter interactive mode' + '\n' +\
    '  mnt ' + misc.bold('q') + '/' + misc.bold('exit') + '         - quit interactive mode' + '\n' +\
    '  mnt ' + misc.bold('?') + '/' + misc.bold('help') + '         - print these instructions'
    print(help_str)

########################################################################

daemon_ID = os.path.basename(__file__)

if len(sys.argv) == 1:
    print_instructions()
else:
    command, *args = sys.argv[1:]
    if command == 'i':
        interactive()
    else:
        with misc.print_errors():
            query(command, args)
