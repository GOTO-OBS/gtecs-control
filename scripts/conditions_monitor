#!/usr/bin/env python
# GOTO conditions monitor
# This version is a stop-gap for testing prior to installation of the GOTO
# Vaisala weather station.
# vsd @ING 27-Mar-2017

import os
import sys
import time
import signal
import json

from astropy.time import Time

from gtecs.tecs_modules import params
from gtecs.tecs_modules import misc
from gtecs.tecs_modules import conditions
from gtecs.tecs_modules.observing import check_dome_closed


def ThereCanOnlyBeOne():
    '''Quit if this process is already running (dodgy kludge!)'''
    ps=os.popen('ps -fu '+os.environ['LOGNAME']+' | grep -v cron | grep -v emacs' ).read()
    if ps.count(sys.argv[0])>1:
        print(ps)
        sys.exit()


# set monitor parameters
save_logs = True # write log file

old_weather = {}
last_update_time = Time('1970-1-1')

last_successful_ping = Time('1970-1-1')

loop = 0

## set default values of flags
# 0=good, 1=bad, 2=error

flags = {'dark': 2,
         'rain': 2,
         'windspeed': 2,
         'humidity': 2,
         'temperature': 2,
         'link': 2,
         }

# catch ctrl-c
signal.signal(signal.SIGINT, misc.signal_handler)

# start monitoring
ThereCanOnlyBeOne()
while True:
    loop +=1
    time.sleep(params.WEATHER_INTERVAL)
    now = Time.now()

    # ~~~~~~~~~~~~~~
    # get the weather dict
    weather, weather_source_used, deltat = conditions.get_weather()

    # ~~~~~~~~~~~~~~
    # set flags
    # note the extra check if the flag is already set to 1,
    # in which case a different (safer) limit is used to prevent repeated
    # opening/closing of the dome if conditions are hovering near a limit.

    # DARK
    sunalt_now = weather['sunalt']

    if sunalt_now < params.SUN_ELEVATION_LIMIT:
        flags['dark'] = 0
    else:
        flags['dark'] = 1

    # RAIN
    rain_now = weather['rain']

    if rain_now == -999:
        flags['rain'] = 2
    elif rain_now == False:
        flags['rain'] = 0
    else:
        flags['rain'] = 1

    # WINDSPEED
    windspeed_max = params.MAX_WINDSPEED
    windspeed_max_closed = windspeed_max * 0.9
    windspeed_now = weather['windspeed']

    if windspeed_now == -999:
        flags['windspeed'] = 2
    elif flags['windspeed'] != 1 and windspeed_now < windspeed_max:
        flags['windspeed'] = 0
    elif flags['windspeed'] == 1 and windspeed_now < windspeed_max_closed:
        flags['windspeed'] = 0
    else:
        flags['windspeed'] = 1

    # HUMIDITY
    humidity_max = params.MAX_HUMIDITY
    humidity_max_closed = humidity_max * 0.9
    humidity_now = weather['humidity']
    int_humidity_max = params.MAX_LOCAL_HUMIDITY
    int_humidity_max_closed = int_humidity_max * 0.9
    int_humidity_now = weather['int_humidity']

    if humidity_now == -999 or int_humidity_now == -999:
        flags['humidity'] = 2
    elif flags['humidity'] != 1 and humidity_now < humidity_max and int_humidity_now < int_humidity_max:
        flags['humidity'] = 0
    elif flags['humidity'] == 1 and humidity_now < humidity_max_closed and int_humidity_now < int_humidity_max_closed:
        flags['humidity'] = 0
    else:
        flags['humidity'] = 1

    # TEMPERATURE
    temp_min = params.MIN_TEMPERATURE
    temp_min_closed = temp_min + 1
    temp_max = params.MAX_TEMPERATURE
    temp_max_closed = temp_max - 1
    temp_now = weather['temperature']

    if temp_now == -999:
        flags['temperature'] = 2
    elif flags['temperature'] != 1 and temp_min < temp_now < temp_max:
        flags['temperature'] = 0
    elif flags['temperature'] == 1 and temp_min_closed < temp_now < temp_max_closed:
        flags['temperature'] = 0
    else:
        flags['temperature'] = 1

    # CHECK - if the fetch timed out
    if deltat == -999 or deltat >= params.WEATHER_TIMEOUT:
        flags['rain'] = 2
        flags['windspeed'] = 2
        flags['humidity'] = 2
        flags['temperature'] = 2

    # CHECK - if the data hasn't changed for a certain time
    if weather != old_weather:
        last_update_time = Time.now()
        old_weather = weather.copy()
    else:
        time_since_update = Time.now() - last_update_time
        if time_since_update.to('second').value > params.WEATHER_STATIC:
            flags['rain'] = 2
            flags['windspeed'] = 2
            flags['humidity'] = 2
            flags['temperature'] = 2


    # ~~~~~~~~~~~~~~
    # check the connectivity with Warwick to set the link flag
    ping_home = conditions.check_external_connection()
    if ping_home:
        last_successful_ping = Time.now()
    dt = Time.now() - last_successful_ping
    dt = dt.to('second').value

    link_interval_closed = params.WARWICK_CLOSED
    link_interval_open = params.WARWICK_OPEN

    try:
        dome_closed = check_dome_closed()
        if dome_closed and dt < link_interval_closed:
            flags['link'] = 0
        elif not dome_closed and dt < link_interval_open:
            flags['link'] = 0
        else:
            flags['link'] = 1
    except:
        flags['link'] = 2


    # ~~~~~~~~~~~~~~
    # now write all the values to the conditions flags file in JSON format
    data = {'update_time': str(now.iso)}
    data.update(flags)

    flags_file = params.CONFIG_PATH + 'conditions_flags'
    with open(flags_file, 'w') as f:
        json.dump(data, f)


    # ~~~~~~~~~~~~~~
    # print useful info, write to the conditions monitor log file if required

    if weather_source_used == params.BACKUP_WEATHER_SOURCE:
        backup = 'backup'
    else:
        backup = ''
    if weather_source_used == 'html':
        src_log = backup + 'htmlJKT'
    elif weather_source_used == 'jkt':
        src_log = backup + 'xmlJKT'
    elif weather_source_used == 'int':
        src_log = backup + 'xmlINT'
    elif weather_source_used == 'wht':
        src_log = backup + 'xmlWHT'

    log_line = '{:.0f} {} '.format(loop, now.iso)
    log_line += 'source={} source_dt={:.4f} '.format(src_log, deltat)
    log_line += 'sunalt={:.2f} dark_flag={:.0f} '.format(weather['sunalt'], flags['dark'])
    log_line += 'rain_flag={:.0f} '.format(flags['rain'])
    log_line += 'winddir={} windspeed={:.2f} wind_flag={:.0f} '.format(weather['winddir'], weather['windspeed'], flags['windspeed'])
    log_line += 'ext_hum={:.1f}% int_hum={:.1f}% hum_flag={} '.format(weather['humidity'], weather['int_humidity'], flags['humidity'])
    log_line += 'ext_temp={:.1f}C int_temp={:.1f}C temp_flag={:.0f} '.format(weather['temperature'], weather['int_temperature'], flags['temperature'])
    log_line += 'link_dt={:.3f} link_flag={:.0f} \n'.format(dt, flags['link'])
    print(log_line)

    if save_logs:
        log_folder = params.LOG_PATH
        date = str(now.iso).split()[0].replace('-','_')
        log_file = log_folder + '{}_conditions_monitor.log'.format(date)
        with open(log_file, 'a') as f:
            f.write(log_line)

    latestlog_file = params.CONFIG_PATH + 'conditions_monitor'
    with open(latestlog_file, 'w') as f:
        f.write(log_line)
