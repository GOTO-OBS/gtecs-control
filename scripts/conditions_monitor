#!/usr/bin/env python
# GOTO conditions monitor
# This version is a stop-gap for testing prior to installation of the GOTO
# Vaisala weather station.
# vsd @ING 27-Mar-2017

import time, math, ephem, string, os, subprocess, re, signal, smtplib, sys, urllib, calendar, json
import numpy as np

from astropy.time import Time
from gtecs.tecs_modules import params
from gtecs.tecs_modules import astronomy

# function to trap ctrl-c and exit cleanly by closing open files
def signal_handler(signal, frame):
        print ('...ctrl+c detected - stopping the conditions monitor...')
        sys.exit(0)
signal.signal(signal.SIGINT, signal_handler)


def get_roomalert():
    '''Get internal dome temperature and humidity from GOTO RoomAlert system'''

    url = '10.2.6.5/getData.json'
    outfile = monitor_folder + 'roomalert.json'
    curl_command = 'curl -s -m 10 -o {} {}'.format(outfile, url)
    os.popen(curl_command)

    with open(outfile, 'r') as f:
        data = json.load(f)

    dome_data = data['sensor'][0]
    temperature = float(dome_data['tc'])
    humidity = float(dome_data['h'])

    return temperature, humidity


def get_ing_weather_html():
    '''Get the current weather from the ING weather page (JKT mast)'''

    url = 'http://catserver.ing.iac.es/weather/'
    outfile = monitor_folder + 'weather.html'
    curl_command = 'curl -s -m 10 -o {} {}'.format(outfile, url)
    os.popen(curl_command)

    delta_t = -999
    rain_flag = 2
    weather_dict = {'temperature': -999,
                    'pressure': -999,
                    'winddir': -999,
                    'windspeed': -999,
                    'windgust': -999,
                    'humidity': -999,
                    }

    try:
        with open(outfile, 'r', encoding='ISO-8859-1') as f:
            for line in f:
                columns = remove_html_tags(line).replace(':',' ').split()
                if not columns:
                    continue

                if columns[0] == 'Temperature':
                    try:
                        weather_dict['temperature'] = float(columns[1])
                    except:
                        print('Error parsing temperature:', columns[1])

                elif columns[0] == 'Pressure':
                    try:
                        weather_dict['pressure'] = float(columns[1])
                    except:
                        print('Error parsing pressure:', columns[1])

                elif columns[0] == 'Wind' and columns[1] == 'Speed':
                    try:
                        weather_dict['windspeed'] = float(columns[2]) / 3.6 # km/h to m/s
                    except:
                        print('Error parsing wind speed:', columns[2])

                elif columns[0] == 'Wind' and columns[1] == 'Direction':
                    try:
                        weather_dict['winddir'] = str(columns[2])
                    except:
                        print('Error parsing wind direction:', columns[2])

                elif columns[0] == 'Wind' and columns[1] == 'Gust':
                    try:
                        weather_dict['windgust'] = float(columns[2]) / 3.6
                    except:
                        print('Error parsing wind gust:', columns[2])

                elif columns[0] == 'Humidity':
                    try:
                        weather_dict['humidity'] = float(columns[1])
                    except:
                        print('Error parsing humidity:', columns[1])

                elif columns[0] == 'Rain':
                    try:
                        if columns[1] == 'DRY':
                            rain_flag = 0
                        elif columns[1] == 'WET':
                            rain_flag = 1
                        else:
                            rain_flag = 2
                    except:
                        print('Error parsing rain:', columns[1])

                elif len(columns) == 4 and columns[3] == 'UT':
                    try:
                        update_date = columns[0].replace('/', '-')
                        update_time = '{}:{}'.format(columns[1],columns[2])
                        update_dt = '{} {}'.format(update_date, update_time)
                        delta = Time.now() - Time(update_dt)
                        delta_t = delta.value
                    except:
                        print('Error parsing update time:', *columns)

    except:
        print('Error parsing weather page')

    return delta_t, rain_flag, weather_dict['winddir'], weather_dict['windspeed'], weather_dict['humidity'], weather_dict['temperature']


def get_ing_weather_xml(weather_source):
    '''Get the current weather from the internal ING xml weather file'''

    if weather_source == 'wht':
        url = "http://whtmetsystem.ing.iac.es/WeatherXMLData/LocalData.xml"
    elif weather_source == 'int':
        url = "http://intmetsystem.ing.iac.es/WeatherXMLData/LocalData.xml"
    elif weather_source == 'jkt':
        url = "http://intmetsystem.ing.iac.es/WeatherXMLData/MainData.xml"

    outfile = monitor_folder + 'weather.xml'
    curl_command = 'curl -s -m 10 -o {} {}'.format(outfile, url)
    os.popen(curl_command)

    delta_t = -999
    rain_flag = 2
    weather_dict = {'temperature': -999,
                    'pressure': -999,
                    'winddir': -999,
                    'windspeed': -999,
                    'windgust': -999,
                    'humidity': -999,
                    }

    try:
        with open(monitor_folder+"weather.xml", 'r') as f:
            for line in f:
                columns = line.split()
                try:
                    label = columns[1].split("\"")[1].split(".")[2]
                    value = columns[2].split("\"")[1]
                except:
                    continue

                if label == 'date':
                    try:
                        update = float(value)
                        delta = Time.now() - Time(update)
                        delta_t = delta.value
                    except:
                        print('Error parsing update time:', value)

                elif label == 'LocalMastAirTemp' or label == 'MainMastAirTemp':
                    try:
                        weather_dict['temperature'] = float(value)
                    except:
                        print('Error parsing temperature:', value)

                elif label == 'LocalMastPressure' or label == 'MainMastPressure':
                    try:
                        weather_dict['pressure'] = float(value)
                    except:
                        print('Error parsing pressure:', value)

                elif label == 'LocalMastWindSpeed' or label == 'MainMastWindSpeed':
                    try:
                        weather_dict['windspeed'] = float(value) / 3.6
                    except:
                        print('Error parsing wind speed:', value)

                elif label == 'LocalMastWindDirection' or label == 'MainMastWindDirection':
                    try:
                        weather_dict['winddir'] = float(value)
                    except:
                        print('Error parsing wind direction:', value)

                elif label == 'LocalMastGust' or label == 'MainMastGust':
                    try:
                        weather_dict['windgust'] = float(value) / 3.6
                    except:
                        print('Error parsing wind gust:', value)

                elif label == 'LocalMastHumidity' or label == 'MainMastHumidity':
                    try:
                        weather_dict['humidity'] = float(value)
                    except:
                        print('Error parsing humidity:', value)

                elif label == 'LocalMastWetness' or label == 'MainMastWetness':
                    try:
                        if float(value) <= 0:
                            rain_flag = 0
                        elif float(value) >= 1:
                            rain_flag = 1
                        else:
                            rain_flag = 2
                    except:
                        print('Error parsing rain:', value)

    except:
        print('Error parsing weather page')

    return delta_t, rain_flag, weather_dict['winddir'], weather_dict['windspeed'], weather_dict['humidity'], weather_dict['temperature']


def remove_html_tags(data):
    '''Remove html tags from a given line'''
    p = re.compile(r'<.*?>')
    return p.sub('', data).strip()


# function to check the connection between GOTO dome NUC and the GOTO head
# (the server in Warwick)
def checkWarwickConnection():
    link=os.popen('ping -c 3 ngtshead.warwick.ac.uk | grep "ttl="').read()
    try:
        if "ttl=" in link:
            dt=10
        return dt
    except:
        return None

# function to get dome status
def checkDome():
    try:
        domeStat = os.popen('dome info').read()
        if 'DOME:    [Closed]' in domeStat:
            return 0
        else:
            return 1
    except:
        return 2


def ThereCanOnlyBeOne():
    '''Quit if this process is already running (dodgy kludge!)'''
    ps=os.popen('ps -fu '+os.environ['LOGNAME']+' | grep -v cron | grep -v emacs' ).read()
    if ps.count(sys.argv[0])>1:
        print(ps)
        sys.exit()

# def SendStartupEmail():
#     recipients=['timothy.butterley@durham.ac.uk','vik.dhillon@sheffield.ac.uk']
#     fromaddr = 'pt5m.lapalma@gmail.com'
#     msg = 'conditions_monitor.py started on ron: '+time.strftime('%Y-%m-%d %H:%M:%S\n', time.gmtime())
#     # Credentials
#     username = 'pt5m.lapalma@gmail.com'
#     password = 'lp!slodar'
#
#     # The actual mail send
#     for toaddrs in recipients:
#         server = smtplib.SMTP('smtp.gmail.com:587')
#         server.starttls()
#         server.login(username,password)
#         server.sendmail(fromaddr, toaddrs, msg)
#         server.quit()
#         print 'Sent mail to',toaddrs

#def SendStartupEmail():
#    # Message
#    recipients = ['timothy.butterley@durham.ac.uk','vik.dhillon@sheffield.ac.uk']
#    toaddrs = ', '.join( recipients )
#    fromaddr = 'pt5m.lapalma@gmail.com'
#    subject = 'pt5m: conditions monitor'
#    header = 'To:%s\nFrom:%s\nSubject:%s\n' % (toaddrs,fromaddr,subject)
#    msg = 'conditions_monitor.py started on ron: '+time.strftime('%Y-%m-%d %H:%M:%S\n', time.gmtime())
#
#    # Credentials
#    username = 'pt5m.lapalma@gmail.com'
#    password = 'lp!slodar'
#
#    # The actual mail send
#    server = smtplib.SMTP('smtp.gmail.com:587')
#    server.starttls()
#    server.login(username,password)
#    server.sendmail(fromaddr, recipients, header + '\n' + msg + '\n\n')
#    server.quit()
#    print 'Sent mail to',recipients



# set monitor parameters

log_file = 0                                 # write log file, 0 = yes, 1 = no
monitor_folder = params.CONFIG_PATH          # path to the flags directory
log_folder = params.LOG_PATH                 # path to the logs directory
weather_source = params.WEATHER_SOURCE       # select weather source: html = external ING weather html web page (JKT mast); wht = internal ING xml weather file (WHT mast); int = internal ING xml weather file (INT mast); jkt = internal ING xml weather file (JKT mast)
backup_weather_source = params.BACKUP_WEATHER_SOURCE
weather_source_used = weather_source

# set GOTO limits

wind_limit = params.MAX_WINDSPEED                                 # wind speed limit in m/s
wind_limit_closed = wind_limit*0.9                                # wind speed limit in m/s when already closed
humidity_limit = params.MAX_HUMIDITY                              # relative humidity limit in per cent
humidity_limit_closed = humidity_limit*0.9                        # relative humidity limit in per cent when already closed
local_humidity_limit = params.MAX_LOCAL_HUMIDITY                  # relative humidity limit in per cent, as measured by the sensor in the GOTO dome
local_humidity_limit_closed = local_humidity_limit*0.9            # relative humidity limit in per cent, as measured by the sensor in the GOTO dome, when already closed
min_temp_limit = params.MIN_TEMPERATURE                           # min temperature limit in Centigrade
min_temp_limit_closed = min_temp_limit+1.0                            # min temperature limit in Centigrade when already closed
max_temp_limit = params.MAX_TEMPERATURE                           # max temperature limit in Centigrade
max_temp_limit_closed = max_temp_limit-1.0                            # max temperature limit in Centigrade when already closed
deltat_limit = params.WEATHER_TIMEOUT                             # weather data age limit in seconds
static_limit = params.WEATHER_STATIC                              # max time that weather parameters can remain unchanged in seconds
monitor_interval = params.WEATHER_INTERVAL                        # weather monitoring interval in seconds
warwick_interval_closed = params.WARWICK_CLOSED                     # max time in secs that can elapse without contact with Warwick server when dome closed
warwick_interval_open = params.WARWICK_OPEN                          # max time in secs that can elapse without contact with Warwick server when dome open

# set observing location of GOTO. Note the pyephem convention that
# longitude east = +ve

goto = ephem.Observer()
goto.lat = str(params.SITE_LATITUDE)
goto.long = str(params.SITE_LONGITUDE)
goto.elevation = params.SITE_ALTITUDE

# define arrays and set/calculate variables for history check

new = []
same = 0
maxsame = static_limit / monitor_interval

# set default values of flags

dark = 2
dry = 2
wind = 2
humidity = 2
temp = 2
link = 2

# start monitoring

ThereCanOnlyBeOne()
#SendStartupEmail()
loop = 0
while True:
    loop +=1
    time.sleep(monitor_interval)
    now = Time.now()

# check the altitude of the Sun
    sun_alt_now = astronomy.sun_alt(now)
    if sun_alt_now > params.SUN_ELEVATION_LIMIT:
        dark = 1
    else:
        dark = 0

# check the weather

# replaced this commented out code, as the wind direction is a string of characters and can't be checked with numpy like below
#    if weather_source == 'html':
#       (deltat, dry, winddir, wind_now, humidity_now, temp_now) = get_ing_weather_html()
#    else:
#       vals = get_ing_weather_xml(weather_source)
#       weather_source_used = weather_source
#       if np.any( (np.array(vals) == '-999') | (np.isnan(np.array(vals))) ):
#           if backup_weather_source != 'html':
#               print 'using backup weather source = ' + backup_weather_source + ', instead of primary weather source = ' + weather_source
#               vals = get_ing_weather_xml(backup_weather_source)
#               weather_source_used = backup_weather_source
#           else:
#               print 'only xml sources are supported as backup sources'
#       deltat, dry, winddir, wind_now, humidity_now, temp_now = vals

    if weather_source == 'html':
        deltat, dry, winddir, wind_now, humidity_now, temp_now = get_ing_weather_html()
    else:
        deltat, dry, winddir, wind_now, humidity_now, temp_now = get_ing_weather_xml(weather_source)
    vals = deltat, dry, wind_now, humidity_now, temp_now
    weather_source_used = weather_source
    if np.any( (np.array(vals) == -999) | (np.isnan(np.array(vals))) ) or deltat > deltat_limit:
        if backup_weather_source != 'html':
            deltat, dry, winddir, wind_now, humidity_now, temp_now = get_ing_weather_xml(backup_weather_source)
        else:
            deltat, dry, winddir, wind_now, humidity_now, temp_now = get_ing_weather_html()
        weather_source_used = backup_weather_source

# check the connectivity with Warwick

    dt = checkWarwickConnection()

# check roomalert to get the internal temperature and humidity

    dome_temp, dome_hum = get_roomalert()

# check the dome status

    dome_status = checkDome()

# set flags
# note the extra check if the flag is already set to 1, in which case a different (safer) limit is used
# to prevent repeated opening/closing of the dome if conditions are hovering near a limit.

    if wind_now == -999:
        wind = 2
    elif wind_now > wind_limit:
        wind = 1
    elif wind_now <= wind_limit:
        if wind == 1:
            if wind_now < wind_limit_closed:
                wind = 0
            else:
                wind = 1
        else:
            wind = 0
    else:
        wind = 2

    if humidity_now == -999 or dome_hum is None:
        humidity = 2
    elif humidity_now > humidity_limit or dome_hum > local_humidity_limit:
        humidity = 1
    elif humidity_now <= humidity_limit and dome_hum <= local_humidity_limit:
        if humidity == 1:
            if humidity_now <= humidity_limit_closed and dome_hum <= local_humidity_limit_closed:
                humidity = 0
            else:
                humidity = 1
        else:
            humidity = 0
    else:
        humidity = 2

    if temp_now == -999:
        temp = 2
    elif temp_now < min_temp_limit:
        temp = 1
    elif temp_now > max_temp_limit:
        temp = 1
    elif temp_now >= min_temp_limit and temp_now <= max_temp_limit:
        if temp == 1:
            if temp_now > min_temp_limit_closed or temp_now < max_temp_limit_closed:
                temp = 0
            else:
                temp = 1
        else:
            temp = 0
    else:
        temp = 2

    if deltat == -999 or deltat >= deltat_limit:
        dry = 2
        wind = 2
        humidity = 2
        temp = 2

    if dome_status == 0:
        if dt >= warwick_interval_closed:
            link = 1
        elif dt is None:
            link = 2
        else:
            link = 0
    elif dome_status == 1:
        if dt >= warwick_interval_open:
            link = 1
        elif dt is None:
            link = 2
        else:
            link = 0
    else:
        link = 2

# check to see if the weather values are changing - if they aren't, assume something is wrong

    old = new
    new = [dry, winddir, wind_now, humidity_now, temp_now]
    if new == old:
        same +=1
    else:
        same = 0
    if same > maxsame:
        dry = 2
        wind = 2
        humidity = 2
        temp = 2

# now write all the values to the conditions flags file in JSON format

    time_flag = str(now.iso)
    dark_flag = int(dark)
    dry_flag = int(dry)
    wind_flag = int(wind)
    humidity_flag = int(humidity)
    temp_flag = int(temp)
    link_flag = int(link)

    if os.path.exists(monitor_folder+"conditions_flags"):
        try:
            with open(monitor_folder+"conditions_flags", 'r') as f:
                data = json.load(f)
        except:
            data = {}
    else:
        data = {}

    data['update_time'] = time_flag
    data['dark'] = dark_flag
    data['dry'] = dry_flag
    data['wind'] = wind_flag
    data['humidity'] = humidity_flag
    data['temperature'] = temp_flag
    data['link'] = link_flag

    with open(monitor_folder+"conditions_flags", 'w') as f:
        json.dump(data, f)


# write useful info to the conditions monitor log file if required


    time_log = str(now.iso)
    if weather_source_used == backup_weather_source:
        backup = 'backup'
    else:
        backup = ''
    if weather_source_used == 'html':
        src_log = backup + 'htmlJKT'
    elif weather_source_used == 'jkt':
        src_log = backup + 'xmlJKT'
    elif weather_source_used == 'int':
        src_log = backup + 'xmlINT'
    elif weather_source_used == 'wht':
        src_log = backup + 'xmlWHT'
    wind_log = '%.1f' % wind_now
    hum_log = '%.1f' % humidity_now
    temp_log = '%.1f' % temp_now
    log_line = str(loop) + " " + time_log + " src=" + src_log + " sun=" + str(sun_alt_now)  + " dark=" + str(dark) + " deltat=" + str(deltat) + " dry=" + str(dry) + " winddir=" + str(winddir) + " wind=" + wind_log + " wind_flag=" + str(wind) + " hum=" + hum_log + " hum_flag=" + str(humidity) + " temp=" + temp_log + " temp_flag=" + str(temp) + " dome_hum=" + str(dome_hum) + " dome_temp=" + str(dome_temp) + " link_flag=" + str(link) + "\n"
    print(log_line)
    if log_file == 0:
        date = str(now.iso).split()[0].replace('-','_')
        with open(log_folder+date+'_conditions_monitor.log', 'a') as f:
            f.write(log_line)

    with open(monitor_folder+'conditions_monitor', 'w') as f:
        f.write(log_line)
