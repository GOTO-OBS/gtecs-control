#!/usr/bin/env python

########################################################################
#                             scheduler.py                             #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
# G-TeCS script to provide control over the scheduler interface daemon #
#                      Martin Dyer, Sheffield, 2017                    #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#                   Based on the SLODAR/pt5m system                    #
########################################################################

### Import ###
# Python modules
from __future__ import absolute_import
from __future__ import print_function
import os, sys
import readline
import time
import Pyro4
from six.moves import input
from astropy.time import Time
# TeCS modules
from gtecs.tecs_modules import misc
from gtecs.tecs_modules import params
from gtecs.tecs_modules import daemons

########################################################################
# Interactive functions

def interactive():
    while True:
        i_in = input('{}> '.format(daemon_ID)).split()
        if len(i_in) > 0:
            command, *args = i_in
            if command == 'q' or command == 'exit':
                return
            else:
                with misc.print_errors():
                    query(command, args)

def query(command, args):
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise misc.InputError('Already in interactive mode')

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Primary daemon control
    elif command == 'start':
        reply = daemons.start_daemon(daemon_ID)
        print(reply)

    elif command == 'shutdown':
        reply = daemons.shutdown_daemon(daemon_ID)
        print(reply)

    elif command == 'restart':
        reply = daemons.restart_daemon(daemon_ID)
        print(reply)

    elif command == 'kill':
        reply = daemons.kill_daemon(daemon_ID)
        print(reply)

    elif command == 'ping':
        reply = daemons.ping_daemon(daemon_ID)
        print(reply)

    elif command == 'info':
        # send command
        reply = daemons.daemon_function(daemon_ID, 'check_queue', [Time.now(), 0])
        if not reply:
            raise ValueError('No info returned, check daemon')
        else:
            print_info_s(info)

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            log_path = params.LOG_PATH + daemon_ID + '-stdout.log'
            args.remove('stdout')
        else:
            log_path = params.LOG_PATH + daemon_ID + '.log'
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        # send command
        misc.execute_command(tail_command)

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Unrecognized function
    else:
        raise misc.InputError('Unrecognized command "{}"'.format(command))

########################################################################
# Output formatting functions

def print_info_s(info):
    print('SCHEDULER:')
    if info[0] is not None:
        print('  ID: %i (Priority %.3f, MinTime %.1fs)' %(info[0],info[1],info[2]))
    else:
        print('  ID: None (Priority: None, MinTime: None)')

def print_instructions():
    help_str = misc.bold('Usage:') + ' scheduler [command]' + '\n' +\
    ' ' + misc.undl('Interface commands') + ':' + '\n' +\
    '  scheduler ' + misc.bold('start') + '             - start the daemon' + '\n' +\
    '  scheduler ' + misc.bold('shutdown') + '          - shutdown the daemon' + '\n' +\
    '  scheduler ' + misc.bold('restart') + '           - restart the daemon' + '\n' +\
    '  scheduler ' + misc.bold('kill') + '              - kill the daemon (' + misc.rtxt('emergency use') + ')' + '\n' +\
    '  scheduler ' + misc.bold('ping') + '              - ping the daemon' + '\n' +\
    '  scheduler ' + misc.bold('log') + ' [stdout]' + '      - print daemon log (tail alias)' + '\n' +\
    ' ' + misc.undl('Control commands') + ':' + '\n' +\
    '  scheduler ' + misc.bold('i') + '                 - enter interactive mode' + '\n' +\
    '  scheduler ' + misc.bold('q') + '/' + misc.bold('exit') + '            - quit interactive mode' + '\n' +\
    '  scheduler ' + misc.bold('?') + '/' + misc.bold('help') + '            - print these instructions'
    print(help_str)

########################################################################

daemon_ID = os.path.basename(__file__)

if len(sys.argv) == 1:
    print_instructions()
else:
    command, *args = sys.argv[1:]
    if command == 'i':
        interactive()
    else:
        with misc.print_errors():
            query(command, args)
