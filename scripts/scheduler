#!/usr/bin/env python
"""A script to provide control over the scheduler daemon."""

import os
import sys

from gtecs import daemons
from gtecs import errors
from gtecs import misc
from gtecs import params


DAEMON_ID = os.path.basename(__file__)


def query(command, args, daemon_id):
    """Process a query."""
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise errors.InputError('Already in interactive mode')

    # Primary daemon control
    elif command == 'start':
        reply = daemons.start_daemon(daemon_id)
        print(reply)

    elif command == 'shutdown':
        reply = daemons.shutdown_daemon(daemon_id)
        print(reply)

    elif command == 'restart':
        reply = daemons.restart_daemon(daemon_id)
        print(reply)

    elif command == 'kill':
        reply = daemons.kill_daemon(daemon_id)
        print(reply)

    elif command in ['check', 'ping']:
        reply = daemons.check_daemon(daemon_id)
        print(reply)

    elif command in ['info', 'status']:
        # parse arguments
        if len(args) == 0:
            info_type = 'simple'
        elif len(args) == 1 and args[0] in ['v', 'V', '-v', '-V']:
            info_type = 'verbose'
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_id, 'get_info', args=[False])
        # print response
        if not reply:
            raise ValueError('No info returned, check daemon')
        elif info_type == 'simple':
            print_info_s(reply)
        elif info_type == 'verbose':
            print_info(reply)

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            log_file = daemon_id + '-stdout.log'
            args.remove('stdout')
        else:
            log_file = daemon_id + '.log'
        log_path = os.path.join(params.LOG_PATH, log_file)
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        # send command
        misc.execute_long_command(tail_command)

    # Unrecognized function
    else:
        raise errors.InputError('Unrecognized command "{}"'.format(command))


def print_info(info):
    """Print the full info dict."""
    print('####### SCHEDULER INFO ########')
    print('NEXT POINTING:')
    if info['next_pointing'] is not None:
        new_id = info['next_pointing'].db_id
        new_ra = info['next_pointing'].ra
        new_dec = info['next_pointing'].dec
        new_priority = info['next_pointing'].priority
        new_weight = info['next_pointing'].weight
        new_too = info['next_pointing'].too
        new_maxsunalt = info['next_pointing'].maxsunalt
        new_minalt = info['next_pointing'].minalt
        new_mintime = info['next_pointing'].mintime
        new_maxmoon = info['next_pointing'].maxmoon
        new_minmoonsep = info['next_pointing'].minmoonsep
        new_start = info['next_pointing'].start
        new_stop = info['next_pointing'].stop
        new_current = info['next_pointing'].current

        print('ID:         {}'.format(new_id))
        print('RA:         {}'.format(new_ra))
        print('Dec:        {}'.format(new_dec))
        print('Priority:   {:.4f}'.format(new_priority))
        print('Weighting:  {}'.format(new_weight))
        print('ToO         {}'.format(new_too))
        print('MaxSunAlt:  {}'.format(new_maxsunalt))
        print('MinAlt:     {}'.format(new_minalt))
        print('MinTime:    {}'.format(new_mintime))
        print('MaxMoon:    {}'.format(new_maxmoon))
        print('MinMoonSep: {}'.format(new_minmoonsep))
        print('Start:      {}'.format(new_start))
        print('Stop:       {}'.format(new_stop))
        print('Current:    {}'.format(new_current))
    else:
        print('ID:        None')

    print('~~~~~~~')
    print('Timestamp: %s' % info['timestamp'])
    print('###########################')


def print_info_s(info):
    """Print the info dict in a compact way."""
    print('SCHEDULER:')
    if info['next_pointing'] is not None:
        new_id = info['next_pointing'].db_id
        new_priority = info['next_pointing'].priority_now
        new_mintime = info['next_pointing'].mintime
        print('  ID: %i (Priority %.3f, MinTime %.1fs)' % (new_id, new_priority, new_mintime))
    else:
        print('  ID: None (Priority: None, MinTime: None)')


def print_instructions():
    """Print instructions for using the daemon."""
    print('Usage: scheduler command [options]',
          'Daemon commands:',
          '  start                          start the daemon',
          '  shutdown                       shutdown the daemon',
          '  restart                        restart the daemon',
          '  kill                           kill the daemon',
          '  check/ping                     check the daemon for errors',
          'Scheduler commands:',
          '  info/status [v]                report current status',
          '  log [stdout]                   print daemon log (tail alias)',
          'Control commands:',
          '  i                              enter interactive mode',
          '  q/exit                         quit interactive mode',
          '  ?/help                         print these instructions',
          sep='\n')


if __name__ == "__main__":
    if len(sys.argv) == 1:
        print_instructions()
    else:
        command, *args = sys.argv[1:]
        if command == 'i':
            while True:
                interactive_input = input('{}> '.format(DAEMON_ID)).split()
                if len(interactive_input) > 0:
                    command, *args = interactive_input
                    if command in ['q', 'exit']:
                        break
                    else:
                        with misc.print_errors():
                            query(command, args, DAEMON_ID)
        else:
            with misc.print_errors():
                query(command, args, DAEMON_ID)
