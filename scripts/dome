#!/usr/bin/env python3
"""A script to provide control over the dome daemon."""

import json
import os
import sys

from gtecs.common import logging
from gtecs.common.style import errortxt
from gtecs.common.system import execute_long_command
from gtecs.control import daemons
from gtecs.control import misc
from gtecs.control import params


def query(command, args):
    """Process a query."""
    daemon_id = os.path.basename(__file__)

    # Primary daemon control
    if command == 'start':
        host, port = daemons.get_daemon_host(daemon_id)
        pid = daemons.start_daemon(daemon_id)
        print(f'Daemon {daemon_id} started on {host}:{port} (PID {pid})')

    elif command == 'shutdown':
        host, port = daemons.get_daemon_host(daemon_id)
        daemons.shutdown_daemon(daemon_id)
        print(f'Daemon {daemon_id} shutdown on {host}:{port}')

    elif command == 'restart':
        host, port = daemons.get_daemon_host(daemon_id)
        pid = daemons.restart_daemon(daemon_id)
        print(f'Daemon {daemon_id} restarted on {host}:{port} (PID {pid})')

    elif command == 'kill':
        host, port = daemons.get_daemon_host(daemon_id)
        daemons.shutdown_daemon(daemon_id, kill=True)
        print(f'Daemon {daemon_id} killed on {host}:{port}')

    elif command in ['check', 'ping']:
        host, port = daemons.get_daemon_host(daemon_id)
        pid = daemons.check_daemon(daemon_id)
        print(f'Daemon {daemon_id} is running on {host}:{port} (PID {pid})')

    elif command in ['info', 'status']:
        if len(args) == 0:
            info_type = 'simple'
            force = False
        elif len(args) == 1 and args[0] in ['f', 'F', '-f', '-F', '--force-update']:
            info_type = 'simple'
            force = True
        elif len(args) == 1 and args[0] in ['v', 'V', '-v', '-V', '--verbose']:
            info_type = 'verbose'
            force = False
        elif len(args) == 1 and args[0] in ['r', 'R', '-r', '-R', '--raw']:
            info_type = 'raw'
            force = False
        elif (len(args) == 2 and
              ((args[0] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'verbose'
            force = True
        elif (len(args) == 2 and
              ((args[0] in ['r', 'R', '-r', '-R', '--raw'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['r', 'R', '-r', '-R', '--raw'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'raw'
            force = True
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            if info_type != 'raw':
                info_str = daemon.get_info_string(info_type == 'verbose', force)
            else:
                info = daemon.get_info(force)
                info_str = json.dumps(info, indent=2, default=repr)
        print(info_str)

    elif command in ['log', 'tail']:
        if 'stdout' in args:
            log_file = f'{daemon_id}-stdout.log'
            args.remove('stdout')
        else:
            log_file = f'{daemon_id}.log'
        log_path = logging.get_log_path() / log_file
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        execute_long_command(tail_command)

    # Daemon functions
    elif command == 'open':
        if len(args) == 0:
            side = 'both'
            fraction = 1
        elif len(args) == 1 and not misc.is_num(args[0]):
            side = args[0]
            fraction = 1
        elif len(args) == 1 and misc.is_num(args[0]):
            side = 'both'
            fraction = float(args[0])
        elif len(args) == 2 and misc.is_num(args[1]):
            side = args[0]
            fraction = float(args[1])
        else:
            raise ValueError('Invalid arguments')
        if not 0 < fraction <= 1:
            raise ValueError('Fraction must be between 0 and 1')
        side = side.lower()
        if side == params.DOME_ASIDE_NAME.lower():
            side = 'a_side'
        if side == params.DOME_BSIDE_NAME.lower():
            side = 'b_side'
        if len(side) == 1:
            side += '_side'
        if side not in ['a_side', 'b_side', 'both']:
            raise ValueError('Invalid side: {}'.format(side))
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.open_dome(side, fraction)
        print('Dome opening')

    elif command == 'close':
        if len(args) == 0:
            side = 'both'
            fraction = 1
        elif len(args) == 1 and not misc.is_num(args[0]):
            side = args[0]
            fraction = 1
        elif len(args) == 1 and misc.is_num(args[0]):
            side = 'both'
            fraction = float(args[0])
        elif len(args) == 2 and misc.is_num(args[1]):
            side = args[0]
            fraction = float(args[1])
        else:
            raise ValueError('Invalid arguments')
        if not 0 < fraction <= 1:
            raise ValueError('Fraction must be between 0 and 1')
        side = side.lower()
        if side == params.DOME_ASIDE_NAME.lower():
            side = 'a_side'
        if side == params.DOME_BSIDE_NAME.lower():
            side = 'b_side'
        if len(side) == 1:
            side += '_side'
        if side not in ['a_side', 'b_side', 'both']:
            raise ValueError('Invalid side: {}'.format(side))
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.close_dome(side, fraction)
        print('Dome closing')

    elif command in ['halt', 'stop', 'abort']:
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.halt_dome()
        print('Dome halting')

    elif command == 'reset':
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.reset_bumperguard()
        print('Bumper guard reset')

    elif command in ['dehumidifier', 'dehumid', 'dehum']:
        if len(args) == 1:
            command = args[0]
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            info = daemon.get_info(force_update=False)
            daemon.override_dehumidifier(command)
        if command == 'on':
            out_str = 'Dehumidifier turned on'
            if info['autodehum_enabled']:
                out_str += ' (autodehum is enabled, so the daemon may turn it off again)'
        elif command == 'off':
            out_str = 'Dehumidifier turned off'
            if info['autodehum_enabled']:
                out_str += ' (autodehum is enabled, so the daemon may turn it on again)'
        print(out_str)

    elif command == 'autodehum':
        if len(args) == 1:
            command = args[0]
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.set_autodehum(command)
        if command == 'on':
            out_str = 'Autodehum enabled, the dehumidifier will turn on and off automatically'
        elif command == 'off':
            out_str = 'Autodehum disabled, the dehumidifier will NOT turn on and off automatically'
        print(out_str)

    elif command == 'autoclose':
        if len(args) == 1:
            command = args[0]
            timeout = None
        elif len(args) == 2 and misc.is_num(args[1]):
            command = args[0]
            timeout = float(args[1]) * 60  # timeout in minutes
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.set_autoclose(command, timeout)
        if command == 'on':
            out_str = 'Autoclose enabled, dome will close in bad conditions'
        elif command == 'off':
            out_str = 'Autoclose disabled'
            if timeout is not None:
                out_str += f' for {timeout / 60:.1f} minutes'
            out_str += ', dome will NOT close in bad conditions'
        print(out_str)

    elif command in ['windshield', 'shield']:
        if len(args) == 1:
            command = args[0]
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            info = daemon.get_info(force_update=False)
            daemon.override_windshield(command)
        if command == 'on':
            out_str = 'Windshield enabled'
            if info['autoshield_enabled']:
                out_str += ' (autoshield is enabled, so the daemon may turn it off again)'
        elif command == 'off':
            out_str = 'Windshield disabled'
            if info['autoshield_enabled']:
                out_str += ' (autoshield is enabled, so the daemon may turn it on again)'
        print(out_str)

    elif command == 'autoshield':
        if len(args) == 1:
            command = args[0]
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.set_autoshield(command)
        if command == 'on':
            out_str = 'Autoshield enabled'
            out_str += ', the dome will raise and lower shields automatically'
        elif command == 'off':
            out_str = 'Autoshield disabled'
            out_str += ', the dome will NOT raise and lower shields automatically'
        print(out_str)

    elif command == 'alarm':
        if len(args) == 1:
            command = args[0]
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.set_alarm(command)
        if command == 'on':
            out_str = 'Alarm enabled'
        elif command == 'off':
            out_str = 'Alarm disabled'
        print(out_str)

    elif command == 'heartbeat':
        if len(args) == 1:
            command = args[0]
        else:
            raise ValueError('Invalid arguments')
        daemons.check_daemon(daemon_id)
        with daemons.daemon_proxy(daemon_id) as daemon:
            daemon.set_heartbeat(command)
        if command == 'on':
            out_str = 'Heartbeat enabled'
        elif command == 'off':
            out_str = 'Heartbeat disabled'
        print(out_str)

    # Unrecognized function
    else:
        raise ValueError('Unrecognized command "{}"'.format(command))


if __name__ == '__main__':
    try:
        command, *args = sys.argv[1:]
    except ValueError:
        # no command, print help and exit
        command = 'help'

    if command in ['help', '?']:
        print(
            'Usage: dome command [options]',
            'Daemon commands:',
            '  start                          start the daemon',
            '  shutdown                       shutdown the daemon',
            '  restart                        restart the daemon',
            '  kill                           kill the daemon',
            '  check/ping                     check the daemon for errors',
            'Dome commands:',
            '  open {}|{} [frac]        open the dome (optional frac 0-1)'.format(
                *sorted([params.DOME_ASIDE_NAME.lower(), params.DOME_BSIDE_NAME.lower()])),
            '  close {}|{} [frac]       close the dome (optional frac 0-1)'.format(
                *sorted([params.DOME_ASIDE_NAME.lower(), params.DOME_BSIDE_NAME.lower()])),
            '  stop/halt/abort                stop the dome moving',
            '  reset                          reset the bumper guard sensor',
            '  autoclose [on|off] [timeout]   automatically close in bad weather? (timeout in min)',
            '  dehumidifier [on|off]          manually turn the dehumidifier on/off',
            '  autodehum [on|off]             automatically turn the dehumidifier on/off?',
            '  windshield [on|off]            manually turn wind shielding on/off',
            '  autoshield [on|off]            automatically shield in high wind?',
            '  alarm [on|off]                 automatically sound the alarm when moving?',
            '  heartbeat [on|off]             automatically close if the daemon fails?',
            '  info/status [-r|-v] [-f]       report current status [raw/verbose/force-update]',
            '  log/status [stdout]            print daemon log (tail alias)',
            'Control commands:',
            '  i                              enter interactive mode',
            '  q/exit                         quit interactive mode',
            '  ?/help                         print these instructions',
            sep='\n')
        sys.exit()

    if command == 'i':
        while True:
            try:
                interactive_input = input(f'{os.path.basename(__file__)}> ').split()
            except EOFError:
                print()
                sys.exit()
            if len(interactive_input) > 0:
                command, *args = interactive_input
                if command in ['q', 'exit']:
                    sys.exit()
                if command == 'i':
                    print(errortxt('"ValueError: Already in interactive mode"'))
                    continue
                try:
                    query(command, args)
                except Exception as error:
                    print(errortxt(f'"{type(error).__name__}: {error}"'))

    try:
        query(command, args)
    except Exception as error:
        print(errortxt(f'"{type(error).__name__}: {error}"'))
