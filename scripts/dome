#!/usr/bin/env python

########################################################################
#                                dome.py                               #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#           G-TeCS script to provide control over dome_daemon          #
#                     Martin Dyer, Sheffield, 2015                     #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#                   Based on the SLODAR/pt5m system                    #
########################################################################

### Import ###
# Python modules
from __future__ import absolute_import
from __future__ import print_function
import os, sys
import readline
import time
import Pyro4
from six.moves import input
# TeCS modules
from gtecs.tecs_modules import misc
from gtecs.tecs_modules import params
from gtecs.tecs_modules import daemons

########################################################################
# Interactive functions

def interactive():
    while True:
        i_in = input('{}> '.format(daemon_ID)).split()
        if len(i_in) > 0:
            command, *args = i_in
            if command == 'q' or command == 'exit':
                return
            else:
                query(command, args)

def query(command, args):
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Primary control functions
    if command == 'start':
        daemons.start_daemon(daemon_ID)
    elif command == 'shutdown':
        daemons.shutdown_daemon(daemon_ID)
    elif command == 'kill':
        daemons.kill_daemon(daemon_ID)
    elif command == 'ping':
        daemons.ping_daemon(daemon_ID)
    elif command == 'help' or command == '?':
        print_instructions()
    elif command == 'i':
        print(misc.ERROR('Already in interactive mode'))

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Daemon functions
    elif command == 'info':
        if len(args) == 0:
            info = daemons.daemon_function(daemon_ID, 'get_info')
            if info: print_info_s(info)
        elif len(args) == 1 and args[0] in ['v','V','-v','-V']:
            info = daemons.daemon_function(daemon_ID, 'get_info')
            if info: print_info(info)

    elif command == 'open':
        if len(args) == 0:
            side  = 'both'
            steps = None
        elif len(args) == 2:
            side  = args[0]
            steps = args[1]
        c = daemons.daemon_function(daemon_ID, 'open_dome', [side, steps])
        if c: print(c)

    elif command == 'close':
        if len(args) == 0:
            side  = 'both'
            steps = None
        elif len(args) == 2:
            side  = args[0]
            steps = args[1]
        c = daemons.daemon_function(daemon_ID, 'close_dome', [side, steps])
        if c: print(c)

    elif command == 'halt':
        c = daemons.daemon_function(daemon_ID, 'halt_dome')
        if c: print(c)

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Unrecognized function
    else:
        print(misc.ERROR('Unrecognized command "%s"' %command))

########################################################################
# Output formatting functions

def print_info(info):
    print('######## DOME INFO ########')
    print('Dome:        %s' %info['dome'].capitalize())
    print('Hatch:       %s' %info['hatch'].capitalize())
    print('~~~~~~~')
    print('Uptime: %.1fs' %info['uptime'])
    print('Ping: %.5fs' %info['ping'])
    print('Timestamp: %s' %info['timestamp'])
    print('###########################')

def print_info_s(info):
    print('DOME:        [%s]' %info['dome'].capitalize())
    print('HATCH:       [%s]' %info['hatch'].capitalize())

def print_instructions():
    help_str = misc.bold('Usage:') + ' dome [command]' + '\n' +\
    ' ' + misc.undl('Daemon commands') + ':' + '\n' +\
    '  dome ' + misc.bold('start') + '                     - start the daemon' + '\n' +\
    '  dome ' + misc.bold('shutdown') + '                  - shutdown the daemon' + '\n' +\
    '  dome ' + misc.bold('kill') + '                      - kill the daemon (' + misc.rtxt('emergency use') + ')' + '\n' +\
    '  dome ' + misc.bold('ping') + '                      - ping the daemon' + '\n' +\
    ' ' + misc.undl('Dome commands') + ':' + '\n' +\
    '  dome ' + misc.bold('open') + ' [east|west] [steps]' + '  - open the dome' + '\n' +\
    '  dome ' + misc.bold('close') + ' [east|west] [steps]' + ' - close the dome' + '\n' +\
    '  dome ' + misc.bold('halt') + '                      - stop the dome moving' + '\n' +\
    '  dome ' + misc.bold('info') + ' [v]' + '                  - report current status' + '\n' +\
    ' ' + misc.undl('Control commands') + ':' + '\n' +\
    '  dome ' + misc.bold('i') + '                         - enter interactive mode' + '\n' +\
    '  dome ' + misc.bold('q') + '/' + misc.bold('exit') + '                    - quit interactive mode' + '\n' +\
    '  dome ' + misc.bold('?') + '/' + misc.bold('help') + '                    - print these instructions'
    print(help_str)

########################################################################

daemon_ID = os.path.basename(__file__)

if len(sys.argv) == 1:
    print_instructions()
else:
    command, *args = sys.argv[1:]
    if command == 'i':
        interactive()
    else:
        query(command, args)
