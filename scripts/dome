#!/usr/bin/env python
"""
A script to provide control over the dome daemon
"""

import os
import sys
import time
import readline
import Pyro4
import json

from gtecs import misc
from gtecs import params
from gtecs import style
from gtecs import flags
from gtecs import daemons


DAEMON_ID = os.path.basename(__file__)


def query(command, args, daemon_ID):
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise misc.InputError('Already in interactive mode')

    # Primary daemon control
    elif command == 'start':
        reply = daemons.start_daemon(daemon_ID)
        print(reply)

    elif command == 'shutdown':
        reply = daemons.shutdown_daemon(daemon_ID)
        print(reply)

    elif command == 'restart':
        reply = daemons.restart_daemon(daemon_ID)
        print(reply)

    elif command == 'kill':
        reply = daemons.kill_daemon(daemon_ID)
        print(reply)

    elif command == 'ping':
        reply = daemons.ping_daemon(daemon_ID)
        print(reply)

    elif command in ['info', 'status']:
        # parse arguments
        if len(args) == 0:
            info_type = 'simple'
        elif len(args) == 1 and args[0] in ['v','V','-v','-V']:
            info_type = 'verbose'
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_ID, 'get_info')
        # print response
        if not reply:
            raise ValueError('No info returned, check daemon')
        elif info_type == 'simple':
            print_info_s(reply)
        elif info_type == 'verbose':
            print_info(reply)

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            log_path = params.LOG_PATH + daemon_ID + '-stdout.log'
            args.remove('stdout')
        else:
            log_path = params.LOG_PATH + daemon_ID + '.log'
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        # send command
        misc.execute_long_command(tail_command)

    # Daemon functions
    elif command == 'open':
        # parse arguments
        if len(args) == 0:
            side = 'both'
            fraction = 1
        elif len(args) == 1 and not misc.is_num(args[0]):
            side = args[0]
            fraction = 1
        elif len(args) == 1 and misc.is_num(args[0]):
            side = 'both'
            fraction = float(args[0])
        elif len(args) == 2 and misc.is_num(args[1]):
            side = args[0]
            fraction = float(args[1])
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_ID, 'open_dome', [side, fraction])
        print(reply)

    elif command == 'close':
        # parse arguments
        if len(args) == 0:
            side  = 'both'
            fraction = 1
        elif len(args) == 1 and not misc.is_num(args[0]):
            side = args[0]
            fraction = 1
        elif len(args) == 1 and misc.is_num(args[0]):
            side = 'both'
            fraction = float(args[0])
        elif len(args) == 2 and misc.is_num(args[1]):
            side = args[0]
            fraction = float(args[1])
        else:
            raise misc.InputError('Invalid arguments')
        # check arguments
        if not 0 < fraction <= 1:
            raise misc.InputError('Fraction must be between 0 and 1')
        # send command
        reply = daemons.daemon_function(daemon_ID, 'close_dome', [side, fraction])
        print(reply)

    elif command in ['halt', 'stop', 'abort']:
        # send command
        reply = daemons.daemon_function(daemon_ID, 'halt_dome')
        print(reply)

    elif command in ['dehumidifier', 'dehumid', 'dehum']:
        # parse arguments
        if len(args) == 1:
            command = args[0]
        else:
            raise misc.InputError('Invalid arguments')
        # check arguments
        if not command.lower() in ['on', 'off']:
            raise misc.InputError("Command must be 'on' or 'off'")
        # send command
        reply = daemons.daemon_function(daemon_ID, 'override_dehumidifier', [command])
        print(reply)

    # Other functions
    elif command == 'alarm':
        status = flags.Status()
        # parse arguments
        if len(args) == 0:
            if status.alarm:
                print('Alarm is currently enabled')
                return
            else:
                print('Alarm is currently DISABLED for manual movements')
                return
        elif args[0] not in ['on', 'off']:
            raise misc.InputError('Invalid arguments')
        # command
        if args[0] == 'on':
            status.alarm = True
            print('Dome alarm emabled')
        else:
            if status.mode == 'robotic':
                raise misc.HardwareStatusError('Cannot disable alarm in robotic mode')
            else:
                status.alarm = False
                print('Alarm disabled: The alarm will not sound when using the dome commands')
                print('                This will reset if the dome autocloses')

    elif command == 'autoclose':
        status = flags.Status()
        # parse arguments
        if len(args) == 0:
            if status.autoclose:
                print('Autoclose is currently enabled')
                return
            else:
                print('Autoclose is currently DISABLED')
                print('It will re-enable when the dome is next fully closed')
                return
        elif args[0] not in ['on', 'off']:
            raise misc.InputError('Invalid arguments')
        # command
        if args[0] == 'on':
            status.autoclose = True
            print('Dome will autoclose in manual mode if conditions are bad')
        else:
            status.autoclose = False
            print('Autoclose override set: Dome will NOT close in manual mode if conditions are bad')
            print('                        This will reset the next time the dome is fully closed')

    # Unrecognized function
    else:
        raise misc.InputError('Unrecognized command "{}"'.format(command))


def print_info(info):
    print('######## DOME INFO ########')
    print('North:        %s' %info['north'].capitalize())
    print('South:        %s' %info['south'].capitalize())
    print('Hatch:        %s' %info['hatch'].capitalize())
    print('Heartbeat:    %s' %info['heartbeat'].capitalize())
    print('Dehumidifier: %s' %info['dehumidifier'].capitalize())
    print('Alarm:        %s' %('On' if info['alarm'] else style.rtxt('Off')))
    print('Auto-close:   %s' %('On' if info['autoclose'] else style.rtxt('Off')))
    if info['emergency']:
        print(style.rtxt('EMERGENCY SHUTDOWN ACTIVE: {}'.format(info['emergency_time'])))
        print(style.rtxt('REASON(S): {}'.format(', '.join(info['emergency_reasons']))))
    print('~~~~~~~')
    print('Uptime: %.1fs' %info['uptime'])
    print('Ping: %.5fs' %info['ping'])
    print('Timestamp: %s' %info['timestamp'])
    print('###########################')


def print_info_s(info):
    if info['emergency']:
        print(style.rtxt('EMERGENCY SHUTDOWN ACTIVE: {}'.format(info['emergency_time'])))
    if (('open' in info['north']) or ('open' in info['south']) or
        ('ing'  in info['north']) or ('ing' in info['south'])):
        if info['autoclose']:
            print('DOME:      [Open]')
        else:
            print('DOME:      [Open] - ' + style.rtxt('Autoclose Disabled'))
    else:
        print('DOME:      [%s]' %info['north'].capitalize())
    print('HATCH:     [%s]' %info['hatch'].capitalize())
    print('DEHUM:     [%s]' %info['dehumidifier'].capitalize())
    print('ALARM:     [%s]' %('On' if info['alarm'] else style.rtxt('Off')))
    print('AUTOCLOSE: [%s]' %('On' if info['autoclose'] else style.rtxt('Off')))
    if info['emergency']:
        print(style.rtxt('EMERGENCY SHUTDOWN ACTIVE: {}'.format(info['emergency_time'])))
        print(style.rtxt('REASON(S): {}'.format(', '.join(info['emergency_reasons']))))


def print_instructions():
    help_str = style.bold('Usage:') + ' dome [command]' + '\n' +\
    ' ' + style.undl('Daemon commands') + ':' + '\n' +\
    '  dome ' + style.bold('start') + '                       - start the daemon' + '\n' +\
    '  dome ' + style.bold('shutdown') + '                    - shutdown the daemon' + '\n' +\
    '  dome ' + style.bold('restart') + '                     - restart the daemon' + '\n' +\
    '  dome ' + style.bold('kill') + '                        - kill the daemon (' + style.rtxt('emergency use') + ')' + '\n' +\
    '  dome ' + style.bold('ping') + '                        - ping the daemon' + '\n' +\
    ' ' + style.undl('Dome commands') + ':' + '\n' +\
    '  dome ' + style.bold('open') + ' [north|south]        ' + '  - open the dome' + '\n' +\
    '  dome ' + style.bold('close') + ' [north|south]        ' + ' - close the dome' + '\n' +\
    '  dome ' + style.bold('halt') + '/' + style.bold('stop')+ '                   - stop the dome moving' + '\n' +\
    '  dome ' + style.bold('dehumidifier') + ' [on|off]       - force dehumidifier on/off' + '\n' +\
    '  dome ' + style.bold('alarm') + ' [on|off]              - sound the alarm when moving?' + '\n' +\
    '  dome ' + style.bold('autoclose') + ' [on|off]          - auto close in bad weather?' + '\n' +\
    '  dome ' + style.bold('info') + ' [v]' + '                    - report current status' + '\n' +\
    '  dome ' + style.bold('log') + '/' + style.bold('status') + ' [stdout]' + '         - print daemon log (tail alias)' + '\n' +\
    ' ' + style.undl('Control commands') + ':' + '\n' +\
    '  dome ' + style.bold('i') + '                           - enter interactive mode' + '\n' +\
    '  dome ' + style.bold('q') + '/' + style.bold('exit') + '                      - quit interactive mode' + '\n' +\
    '  dome ' + style.bold('?') + '/' + style.bold('help') + '                      - print these instructions'
    print(help_str)


if __name__ == "__main__":
    if len(sys.argv) == 1:
        print_instructions()
    else:
        command, *args = sys.argv[1:]
        if command == 'i':
            while True:
                interactive_input = input('{}> '.format(DAEMON_ID)).split()
                if len(interactive_input) > 0:
                    command, *args = interactive_input
                    if command in ['q', 'exit']:
                        break
                    else:
                        with misc.print_errors():
                            query(command, args, DAEMON_ID)
        else:
            with misc.print_errors():
                query(command, args, DAEMON_ID)
