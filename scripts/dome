#!/usr/bin/env python3
"""A script to provide control over the dome daemon."""

import json
import os
import sys
import time

from gtecs.common import logging
from gtecs.common.system import execute_long_command
from gtecs.control import daemons
from gtecs.control import errors
from gtecs.control import misc
from gtecs.control import params
from gtecs.control import style
from gtecs.control.style import errortxt


def query(command, args):
    """Process a query."""
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise errors.InputError('Already in interactive mode')

    # Primary daemon control
    elif command == 'start':
        reply = daemons.start_daemon('dome')
        print(reply)

    elif command == 'shutdown':
        reply = daemons.shutdown_daemon('dome')
        print(reply)

    elif command == 'restart':
        reply = daemons.restart_daemon('dome')
        print(reply)

    elif command == 'kill':
        reply = daemons.kill_daemon('dome')
        print(reply)

    elif command in ['check', 'ping']:
        reply = daemons.check_daemon('dome')
        print(reply)

    elif command in ['info', 'status']:
        if len(args) == 0:
            info_type = 'simple'
            force = False
        elif len(args) == 1 and args[0] in ['f', 'F', '-f', '-F', '--force-update']:
            info_type = 'simple'
            force = True
        elif len(args) == 1 and args[0] in ['v', 'V', '-v', '-V', '--verbose']:
            info_type = 'verbose'
            force = False
        elif len(args) == 1 and args[0] in ['r', 'R', '-r', '-R', '--raw']:
            info_type = 'raw'
            force = False
        elif (len(args) == 2 and
              ((args[0] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'verbose'
            force = True
        elif (len(args) == 2 and
              ((args[0] in ['r', 'R', '-r', '-R', '--raw'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['r', 'R', '-r', '-R', '--raw'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'raw'
            force = True
        else:
            raise errors.InputError('Invalid arguments')
        daemons.check_daemon('dome')
        with daemons.daemon_proxy('dome') as daemon:
            info = daemon.get_info(force)
            if not info:
                raise ValueError('No info returned, check daemon')
            elif info_type == 'simple':
                print_info_s(info)
            elif info_type == 'verbose':
                print_info(info)
            elif info_type == 'raw':
                print(json.dumps(info, indent=2, default=repr))

    elif command in ['log', 'tail']:
        if 'stdout' in args:
            log_file = 'dome-stdout.log'
            args.remove('stdout')
        else:
            log_file = 'dome.log'
        log_path = logging.get_log_path() / log_file
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        execute_long_command(tail_command)

    # Daemon functions
    elif command == 'open':
        if len(args) == 0:
            side = 'both'
            fraction = 1
        elif len(args) == 1 and not misc.is_num(args[0]):
            side = args[0]
            fraction = 1
        elif len(args) == 1 and misc.is_num(args[0]):
            side = 'both'
            fraction = float(args[0])
        elif len(args) == 2 and misc.is_num(args[1]):
            side = args[0]
            fraction = float(args[1])
        else:
            raise errors.InputError('Invalid arguments')
        if not 0 < fraction <= 1:
            raise errors.InputError('Fraction must be between 0 and 1')
        side = side.lower()
        if side == params.DOME_ASIDE_NAME.lower():
            side = 'a_side'
        if side == params.DOME_BSIDE_NAME.lower():
            side = 'b_side'
        if len(side) == 1:
            side += '_side'
        if side not in ['a_side', 'b_side', 'both']:
            raise errors.InputError('Invalid side: {}'.format(side))
        daemons.check_daemon('dome')
        with daemons.daemon_proxy('dome') as daemon:
            reply = daemon.open_dome(side, fraction)
            print(reply)

    elif command == 'close':
        if len(args) == 0:
            side = 'both'
            fraction = 1
        elif len(args) == 1 and not misc.is_num(args[0]):
            side = args[0]
            fraction = 1
        elif len(args) == 1 and misc.is_num(args[0]):
            side = 'both'
            fraction = float(args[0])
        elif len(args) == 2 and misc.is_num(args[1]):
            side = args[0]
            fraction = float(args[1])
        else:
            raise errors.InputError('Invalid arguments')
        if not 0 < fraction <= 1:
            raise errors.InputError('Fraction must be between 0 and 1')
        side = side.lower()
        if side == params.DOME_ASIDE_NAME.lower():
            side = 'a_side'
        if side == params.DOME_BSIDE_NAME.lower():
            side = 'b_side'
        if len(side) == 1:
            side += '_side'
        if side not in ['a_side', 'b_side', 'both']:
            raise errors.InputError('Invalid side: {}'.format(side))
        daemons.check_daemon('dome')
        with daemons.daemon_proxy('dome') as daemon:
            reply = daemon.close_dome(side, fraction)
            print(reply)

    elif command in ['halt', 'stop', 'abort']:
        daemons.check_daemon('dome')
        with daemons.daemon_proxy('dome') as daemon:
            reply = daemon.halt_dome()
            print(reply)

    elif command == 'reset':
        daemons.check_daemon('dome')
        with daemons.daemon_proxy('dome') as daemon:
            reply = daemon.reset_bumperguard()
            print(reply)

    elif command in ['dehumidifier', 'dehumid', 'dehum']:
        if len(args) == 1:
            command = args[0]
        else:
            raise errors.InputError('Invalid arguments')
        daemons.check_daemon('dome')
        with daemons.daemon_proxy('dome') as daemon:
            reply = daemon.override_dehumidifier(command)
            print(reply)

    elif command == 'autodehum':
        if len(args) == 1:
            command = args[0]
        else:
            raise errors.InputError('Invalid arguments')
        daemons.check_daemon('dome')
        with daemons.daemon_proxy('dome') as daemon:
            reply = daemon.set_autodehum(command)
            print(reply)

    elif command == 'autoclose':
        if len(args) == 1:
            command = args[0]
            timeout = None
        elif len(args) == 2 and misc.is_num(args[1]):
            command = args[0]
            timeout = float(args[1]) * 60  # timeout in minutes
        else:
            raise errors.InputError('Invalid arguments')
        daemons.check_daemon('dome')
        with daemons.daemon_proxy('dome') as daemon:
            reply = daemon.set_autoclose(command, timeout)
            print(reply)

    elif command in ['windshield', 'shield']:
        if len(args) == 1:
            command = args[0]
        else:
            raise errors.InputError('Invalid arguments')
        daemons.check_daemon('dome')
        with daemons.daemon_proxy('dome') as daemon:
            reply = daemon.override_windshield(command)
            print(reply)

    elif command == 'autoshield':
        if len(args) == 1:
            command = args[0]
        else:
            raise errors.InputError('Invalid arguments')
        daemons.check_daemon('dome')
        with daemons.daemon_proxy('dome') as daemon:
            reply = daemon.set_autoshield(command)
            print(reply)

    elif command == 'alarm':
        if len(args) == 1:
            command = args[0]
        else:
            raise errors.InputError('Invalid arguments')
        daemons.check_daemon('dome')
        with daemons.daemon_proxy('dome') as daemon:
            reply = daemon.set_alarm(command)
            print(reply)

    elif command == 'heartbeat':
        if len(args) == 1:
            command = args[0]
        else:
            raise errors.InputError('Invalid arguments')
        daemons.check_daemon('dome')
        with daemons.daemon_proxy('dome') as daemon:
            reply = daemon.set_heartbeat(command)
            print(reply)

    # Unrecognized function
    else:
        raise errors.InputError('Unrecognized command "{}"'.format(command))


def print_info(info):
    """Print the full info dict."""
    print('######## DOME INFO ########')
    print('A side ({}): {}'.format(params.DOME_ASIDE_NAME.capitalize(),
                                   info['a_side'].capitalize(),
                                   ))
    print('B side ({}): {}'.format(params.DOME_BSIDE_NAME.capitalize(),
                                   info['b_side'].capitalize(),
                                   ))
    print('Autoclose:      {}'.format(style.rtxt('Disabled') +
                                      (f' (for {info["autoclose_timeout"]-time.time():.1f}s)'
                                       if info['autoclose_timeout'] is not None else '')
                                      if not info['autoclose_enabled']
                                      else 'Enabled'))
    print('Windshield:     {}'.format(style.gtxt('On')
                                      if info['windshield_enabled']
                                      else 'Off'))
    print(' - Autoshield:  {}'.format(style.rtxt('Disabled')
                                      if not info['autoshield_enabled']
                                      else 'Enabled'))
    if params.DOME_HAS_DEHUMIDIFIER:
        print('Dehumidifier:   {}'.format(style.gtxt('On')
                                          if info['dehumidifier_on']
                                          else 'Off'))
        print(' - Autodehum:   {}'.format(style.rtxt('Disabled')
                                          if not info['autodehum_enabled']
                                          else 'Enabled'))
    print('Hatch:          {}'.format(style.rtxt(info['hatch'].capitalize())
                                      if info['hatch_closed'] is not True
                                      else 'Closed'))
    print('Alarm:          {}'.format(style.rtxt('Disabled')
                                      if not info['alarm_enabled']
                                      else 'Enabled'))
    print('Heartbeat:      {}'.format(style.rtxt('Disabled')
                                      if info['heartbeat_status'] == 'disabled'
                                      else info['heartbeat_status'].capitalize()))
    print('Lockdown:       {}'.format(style.rtxt('ACTIVE') if info['lockdown'] else 'Clear'))
    if info['lockdown']:
        print(' - Lockdown reasons:')
        for reason in info['lockdown_reasons']:
            print(style.rtxt('   {}'.format(reason)))
    print('Shielding:      {}'.format(style.ytxt('ACTIVE') if info['shielding'] else 'Clear'))
    if info['emergency']:
        print(style.rtxt('EMERGENCY SHUTDOWN ACTIVE: {}'.format(info['emergency_time'])))
        print(style.rtxt('REASON(S): {}'.format(info['emergency_reasons'])))
    print('~~~~~~~')
    print('Uptime: {:.1f}s'.format(info['uptime']))
    print('Timestamp: {}'.format(info['timestamp']))
    print('###########################')


def print_info_s(info):
    """Print the info dict in a compact way."""
    print('DOME:               [{}|{}]'.format(info['a_side'].capitalize(),
                                               info['b_side'].capitalize()))
    if info['lockdown']:
        print(style.rtxt('   LOCKDOWN ACTIVE: {}'.format(';'.join(info['lockdown_reasons']))))
    elif info['shielding']:
        print(style.ytxt('   WINDSHIELD ACTIVE'))
    print('   Autoclose:       [{}]'.format(style.rtxt('Disabled') +
                                            (f' for {info["autoclose_timeout"]-time.time():.1f}s'
                                             if info['autoclose_timeout'] is not None else '')
                                            if not info['autoclose_enabled']
                                            else 'Enabled'))
    print('   Windshield:      [{}]{} (Auto: {})'.format(style.gtxt('On')
                                                         if info['windshield_enabled']
                                                         else 'Off',
                                                         ' ' if info['windshield_enabled'] else '',
                                                         style.rtxt('Disabled')
                                                         if not info['autoshield_enabled']
                                                         else 'Enabled'))
    if params.DOME_HAS_DEHUMIDIFIER:
        print('   Dehumidifier:    [{}]{} (Auto: {})'.format(style.gtxt('On')
                                                             if info['dehumidifier_on']
                                                             else 'Off',
                                                             ' ' if info['dehumidifier_on'] else '',
                                                             style.rtxt('Disabled')
                                                             if not info['autodehum_enabled']
                                                             else 'Enabled'))
    print('   Hatch:           [{}]'.format(style.rtxt(info['hatch'].capitalize())
                                            if info['hatch_closed'] is not True
                                            else 'Closed'))
    print('   Alarm:           [{}]'.format(style.rtxt('Disabled')
                                            if not info['alarm_enabled']
                                            else 'Enabled'))
    print('   Heartbeat:       [{}]'.format(style.rtxt('Disabled')
                                            if info['heartbeat_status'] == 'disabled'
                                            else info['heartbeat_status'].capitalize()))
    if info['emergency']:
        print(style.rtxt('EMERGENCY SHUTDOWN ACTIVE: {}'.format(info['emergency_time'])))
        print(style.rtxt('REASON(S): {}'.format(info['emergency_reasons'])))


def print_instructions():
    """Print instructions for using the daemon."""
    print('Usage: dome command [options]',
          'Daemon commands:',
          '  start                          start the daemon',
          '  shutdown                       shutdown the daemon',
          '  restart                        restart the daemon',
          '  kill                           kill the daemon',
          '  check/ping                     check the daemon for errors',
          'Dome commands:',
          '  open {}|{} [frac]        open the dome (optional frac 0-1)'.format(
            *sorted([params.DOME_ASIDE_NAME.lower(), params.DOME_BSIDE_NAME.lower()])),
          '  close {}|{} [frac]       close the dome (optional frac 0-1)'.format(
            *sorted([params.DOME_ASIDE_NAME.lower(), params.DOME_BSIDE_NAME.lower()])),
          '  stop/halt/abort                stop the dome moving',
          '  reset                          reset the bumper guard sensor',
          '  autoclose [on|off] [timeout]   automatically close in bad weather? (timeout in min)',
          '  dehumidifier [on|off]          manually turn the dehumidifier on/off',
          '  autodehum [on|off]             automatically turn the dehumidifier on/off?',
          '  windshield [on|off]            manually turn wind shielding on/off',
          '  autoshield [on|off]            automatically shield in high wind?',
          '  alarm [on|off]                 automatically sound the alarm when moving?',
          '  heartbeat [on|off]             automatically close if the daemon fails?',
          '  info/status [-r|-v] [-f]       report current status [raw/verbose/force-update]',
          '  log/status [stdout]            print daemon log (tail alias)',
          'Control commands:',
          '  i                              enter interactive mode',
          '  q/exit                         quit interactive mode',
          '  ?/help                         print these instructions',
          sep='\n')


if __name__ == '__main__':
    if len(sys.argv) == 1:
        # No command: print help and exit
        print_instructions()
        sys.exit()

    command, *args = sys.argv[1:]
    if command != 'i':
        try:
            query(command, args)
        except Exception as error:
            print(errortxt('"{}: {}"'.format(type(error).__name__, error)))
    else:
        # Interactive mode
        while True:
            try:
                interactive_input = input('{}> '.format(os.path.basename(__file__))).split()
            except EOFError:
                print()
                sys.exit()
            if len(interactive_input) > 0:
                command, *args = interactive_input
                if command in ['q', 'exit']:
                    sys.exit()
                try:
                    query(command, args)
                except Exception as error:
                    print(errortxt('"{}: {}"'.format(type(error).__name__, error)))
