#!/usr/bin/env python3
"""A script to provide control over the dome daemon."""

import os
import sys
import time

from gtecs.control import daemons
from gtecs.control import errors
from gtecs.control import misc
from gtecs.control import params
from gtecs.control import style


DAEMON_ID = os.path.basename(__file__)


def query(command, args, daemon_id):
    """Process a query."""
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise errors.InputError('Already in interactive mode')

    # Primary daemon control
    elif command == 'start':
        reply = daemons.start_daemon(daemon_id)
        print(reply)

    elif command == 'shutdown':
        reply = daemons.shutdown_daemon(daemon_id)
        print(reply)

    elif command == 'restart':
        reply = daemons.restart_daemon(daemon_id)
        print(reply)

    elif command == 'kill':
        reply = daemons.kill_daemon(daemon_id)
        print(reply)

    elif command in ['check', 'ping']:
        reply = daemons.check_daemon(daemon_id)
        print(reply)

    elif command in ['info', 'status']:
        # parse arguments
        if len(args) == 0:
            info_type = 'simple'
            force = False
        elif len(args) == 1 and args[0] in ['f', 'F', '-f', '-F', '--force-update']:
            info_type = 'simple'
            force = True
        elif len(args) == 1 and args[0] in ['v', 'V', '-v', '-V', '--verbose']:
            info_type = 'verbose'
            force = False
        elif len(args) == 1 and args[0] in ['r', 'R', '-r', '-R', '--raw']:
            info_type = 'raw'
            force = False
        elif (len(args) == 2 and
              ((args[0] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['v', 'V', '-v', '-V', '--verbose'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'verbose'
            force = True
        elif (len(args) == 2 and
              ((args[0] in ['r', 'R', '-r', '-R', '--raw'] and
                args[1] in ['f', 'F', '-f', '-F', '--force-update']) or
               (args[1] in ['r', 'R', '-r', '-R', '--raw'] and
                args[0] in ['f', 'F', '-f', '-F', '--force-update']))):
            info_type = 'raw'
            force = True
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_id, 'get_info', args=[force])
        # print response
        if not reply:
            raise ValueError('No info returned, check daemon')
        elif info_type == 'simple':
            print_info_s(reply)
        elif info_type == 'verbose':
            print_info(reply)
        elif info_type == 'raw':
            print(reply)

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            log_file = daemon_id + '-stdout.log'
            args.remove('stdout')
        else:
            log_file = daemon_id + '.log'
        log_path = os.path.join(params.LOG_PATH, log_file)
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        # send command
        misc.execute_long_command(tail_command)

    # Daemon functions
    elif command == 'open':
        # parse arguments
        if len(args) == 0:
            side = 'both'
            fraction = 1
        elif len(args) == 1 and not misc.is_num(args[0]):
            side = args[0]
            fraction = 1
        elif len(args) == 1 and misc.is_num(args[0]):
            side = 'both'
            fraction = float(args[0])
        elif len(args) == 2 and misc.is_num(args[1]):
            side = args[0]
            fraction = float(args[1])
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_id, 'open_dome', [side, fraction])
        print(reply)

    elif command == 'close':
        # parse arguments
        if len(args) == 0:
            side = 'both'
            fraction = 1
        elif len(args) == 1 and not misc.is_num(args[0]):
            side = args[0]
            fraction = 1
        elif len(args) == 1 and misc.is_num(args[0]):
            side = 'both'
            fraction = float(args[0])
        elif len(args) == 2 and misc.is_num(args[1]):
            side = args[0]
            fraction = float(args[1])
        else:
            raise errors.InputError('Invalid arguments')
        # check arguments
        if not 0 < fraction <= 1:
            raise errors.InputError('Fraction must be between 0 and 1')
        # send command
        reply = daemons.daemon_function(daemon_id, 'close_dome', [side, fraction])
        print(reply)

    elif command in ['halt', 'stop', 'abort']:
        # send command
        reply = daemons.daemon_function(daemon_id, 'halt_dome')
        print(reply)

    elif command == 'reset':
        # send command
        reply = daemons.daemon_function(daemon_id, 'reset_bumperguard')
        print(reply)

    elif command in ['dehumidifier', 'dehumid', 'dehum']:
        # parse arguments
        if len(args) == 1:
            command = args[0]
        else:
            raise errors.InputError('Invalid arguments')
        # check arguments
        if not command.lower() in ['on', 'off']:
            raise errors.InputError("Command must be 'on' or 'off'")
        # send command
        reply = daemons.daemon_function(daemon_id, 'override_dehumidifier', [command])
        print(reply)

    elif command == 'autodehum':
        # parse arguments
        if len(args) == 1:
            command = args[0]
        else:
            raise errors.InputError('Invalid arguments')
        # check arguments
        if not command.lower() in ['on', 'off']:
            raise errors.InputError("Command must be 'on' or 'off'")
        reply = daemons.daemon_function(daemon_id, 'set_autodehum', [command])
        print(reply)

    elif command == 'autoclose':
        # parse arguments
        if len(args) == 1:
            command = args[0]
            timeout = None
        elif len(args) == 2 and misc.is_num(args[1]):
            command = args[0]
            timeout = float(args[1]) * 60  # timeout in minutes
        else:
            raise errors.InputError('Invalid arguments')
        # check arguments
        if not command.lower() in ['on', 'off']:
            raise errors.InputError("Command must be 'on' or 'off'")
        reply = daemons.daemon_function(daemon_id, 'set_autoclose', [command, timeout])
        print(reply)

    elif command in ['windshield', 'shield']:
        # parse arguments
        if len(args) == 1:
            command = args[0]
        else:
            raise errors.InputError('Invalid arguments')
        # check arguments
        if not command.lower() in ['on', 'off']:
            raise errors.InputError("Command must be 'on' or 'off'")
        # send command
        reply = daemons.daemon_function(daemon_id, 'override_windshield', [command])
        print(reply)

    elif command == 'autoshield':
        # parse arguments
        if len(args) == 1:
            command = args[0]
        else:
            raise errors.InputError('Invalid arguments')
        # check arguments
        if not command.lower() in ['on', 'off']:
            raise errors.InputError("Command must be 'on' or 'off'")
        reply = daemons.daemon_function(daemon_id, 'set_autoshield', [command])
        print(reply)

    elif command == 'alarm':
        # parse arguments
        if len(args) == 1:
            command = args[0]
        else:
            raise errors.InputError('Invalid arguments')
        # check arguments
        if not command.lower() in ['on', 'off']:
            raise errors.InputError("Command must be 'on' or 'off'")
        reply = daemons.daemon_function(daemon_id, 'set_alarm', [command])
        print(reply)

    elif command == 'heartbeat':
        # parse arguments
        if len(args) == 1:
            command = args[0]
        else:
            raise errors.InputError('Invalid arguments')
        # check arguments
        if not command.lower() in ['on', 'off']:
            raise errors.InputError("Command must be 'on' or 'off'")
        reply = daemons.daemon_function(daemon_id, 'set_heartbeat', [command])
        print(reply)

    # Unrecognized function
    else:
        raise errors.InputError('Unrecognized command "{}"'.format(command))


def print_info(info):
    """Print the full info dict."""
    print('######## DOME INFO ########')
    print('North:        {}'.format(info['north'].capitalize()))
    print('South:        {}'.format(info['south'].capitalize()))
    print('Autoclose:    {}'.format(style.rtxt('Disabled') +
                                    (f' (for {info["autoclose_timeout"]-time.time():.1f}s)'
                                     if info['autoclose_timeout'] is not None else '')
                                    if not info['autoclose_enabled']
                                    else 'Enabled'))
    print('Windshield:   {}'.format(style.gtxt('On')
                                    if info['windshield_enabled']
                                    else 'Off'))
    print(' - Autoshield:  {}'.format(style.rtxt('Disabled')
                                      if not info['autoshield_enabled']
                                      else 'Enabled'))
    print('Dehumidifier: {}'.format(style.gtxt('On')
                                    if info['dehumidifier_on']
                                    else 'Off'))
    print(' - Autodehum:   {}'.format(style.rtxt('Disabled')
                                      if not info['autodehum_enabled']
                                      else 'Enabled'))
    print('Hatch:        {}'.format(style.rtxt(info['hatch'].capitalize())
                                    if info['hatch_closed'] is not True
                                    else 'Closed'))
    print('Alarm:        {}'.format(style.rtxt('Disabled')
                                    if not info['alarm_enabled']
                                    else 'Enabled'))
    print('Heartbeat:    {}'.format(style.rtxt('Disabled')
                                    if info['heartbeat_status'] == 'disabled'
                                    else info['heartbeat_status'].capitalize()))
    print('Lockdown:     {}'.format(style.rtxt('ACTIVE') if info['lockdown'] else 'Clear'))
    if info['lockdown']:
        print(' - Lockdown reasons:')
        for reason in info['lockdown_reasons']:
            print(style.rtxt('   {}'.format(reason)))
    print('Shielding:    {}'.format(style.ytxt('ACTIVE') if info['shielding'] else 'Clear'))
    if info['emergency']:
        print(style.rtxt('EMERGENCY SHUTDOWN ACTIVE: {}'.format(info['emergency_time'])))
        print(style.rtxt('REASON(S): {}'.format(info['emergency_reasons'])))
    print('~~~~~~~')
    print('Uptime: {:.1f}s'.format(info['uptime']))
    print('Timestamp: {}'.format(info['timestamp']))
    print('###########################')


def print_info_s(info):
    """Print the info dict in a compact way."""
    print('DOME:               [{}|{}]'.format(info['north'].capitalize(),
                                               info['south'].capitalize()))
    if info['lockdown']:
        print(style.rtxt('   LOCKDOWN ACTIVE: {}'.format(';'.join(info['lockdown_reasons']))))
    elif info['shielding']:
        print(style.ytxt('   WINDSHIELD ACTIVE'))
    print('   Autoclose:       [{}]'.format(style.rtxt('Disabled') +
                                            (f' for {info["autoclose_timeout"]-time.time():.1f}s'
                                             if info['autoclose_timeout'] is not None else '')
                                            if not info['autoclose_enabled']
                                            else 'Enabled'))
    print('   Windshield:      [{}] (Auto: {})'.format(style.gtxt('On')
                                                       if info['windshield_enabled']
                                                       else 'Off',
                                                       style.rtxt('Disabled')
                                                       if not info['autoshield_enabled']
                                                       else 'Enabled'))
    print('   Dehumidifier:    [{}] (Auto: {})'.format(style.gtxt('On')
                                                       if info['dehumidifier_on']
                                                       else 'Off',
                                                       style.rtxt('Disabled')
                                                       if not info['autodehum_enabled']
                                                       else 'Enabled'))
    print('   Hatch:           [{}]'.format(style.rtxt(info['hatch'].capitalize())
                                            if info['hatch_closed'] is not True
                                            else 'Closed'))
    print('   Alarm:           [{}]'.format(style.rtxt('Disabled')
                                            if not info['alarm_enabled']
                                            else 'Enabled'))
    print('   Heartbeat:       [{}]'.format(style.rtxt('Disabled')
                                            if info['heartbeat_status'] == 'disabled'
                                            else info['heartbeat_status'].capitalize()))
    if info['emergency']:
        print(style.rtxt('EMERGENCY SHUTDOWN ACTIVE: {}'.format(info['emergency_time'])))
        print(style.rtxt('REASON(S): {}'.format(info['emergency_reasons'])))


def print_instructions():
    """Print instructions for using the daemon."""
    print('Usage: dome command [options]',
          'Daemon commands:',
          '  start                          start the daemon',
          '  shutdown                       shutdown the daemon',
          '  restart                        restart the daemon',
          '  kill                           kill the daemon',
          '  check/ping                     check the daemon for errors',
          'Dome commands:',
          '  open north|south [frac]        open the dome (optional frac 0-1)',
          '  close north|south [frac]       close the dome (optional frac 0-1)',
          '  stop/halt/abort                stop the dome moving',
          '  reset                          reset the bumper guard sensor',
          '  autoclose [on|off] [timeout]   automatically close in bad weather? (timeout in min)',
          '  dehumidifier [on|off]          manually turn the dehumidifier on/off',
          '  autodehum [on|off]             automatically turn the dehumidifier on/off?',
          '  windshield [on|off]            manually turn wind shielding on/off',
          '  autoshield [on|off]            automatically shield in high wind?',
          '  alarm [on|off]                 automatically sound the alarm when moving?',
          '  heartbeat [on|off]             automatically close if the daemon fails?',
          '  info/status [-r|-v] [-f]       report current status [raw/verbose/force-update]',
          '  log/status [stdout]            print daemon log (tail alias)',
          'Control commands:',
          '  i                              enter interactive mode',
          '  q/exit                         quit interactive mode',
          '  ?/help                         print these instructions',
          sep='\n')


if __name__ == '__main__':
    if len(sys.argv) == 1:
        print_instructions()
    else:
        command, *args = sys.argv[1:]
        if command == 'i':
            while True:
                interactive_input = input('{}> '.format(DAEMON_ID)).split()
                if len(interactive_input) > 0:
                    command, *args = interactive_input
                    if command in ['q', 'exit']:
                        break
                    else:
                        with misc.print_errors():
                            query(command, args, DAEMON_ID)
        else:
            with misc.print_errors():
                query(command, args, DAEMON_ID)
