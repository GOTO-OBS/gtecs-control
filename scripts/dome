#!/usr/bin/env python

########################################################################
#                                dome.py                               #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#           G-TeCS script to provide control over dome_daemon          #
#                     Martin Dyer, Sheffield, 2015                     #
#           ~~~~~~~~~~~~~~~~~~~~~~~##~~~~~~~~~~~~~~~~~~~~~~~           #
#                   Based on the SLODAR/pt5m system                    #
########################################################################

### Import ###
# Python modules
from __future__ import absolute_import
from __future__ import print_function
import os, sys
import readline
import time
import Pyro4
from six.moves import input
import json
# TeCS modules
from gtecs.tecs_modules import misc
from gtecs.tecs_modules import params
from gtecs.tecs_modules import flags
from gtecs.tecs_modules import daemons

########################################################################
# Interactive functions

def interactive():
    while True:
        i_in = input('{}> '.format(daemon_ID)).split()
        if len(i_in) > 0:
            command, *args = i_in
            if command == 'q' or command == 'exit':
                return
            else:
                with misc.print_errors():
                    query(command, args)

def query(command, args):
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise misc.InputError('Already in interactive mode')

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Primary daemon control
    elif command == 'start':
        reply = daemons.start_daemon(daemon_ID)
        print(reply)

    elif command == 'shutdown':
        reply = daemons.shutdown_daemon(daemon_ID)
        print(reply)

    elif command == 'restart':
        reply = daemons.restart_daemon(daemon_ID)
        print(reply)

    elif command == 'kill':
        reply = daemons.kill_daemon(daemon_ID)
        print(reply)

    elif command == 'ping':
        reply = daemons.ping_daemon(daemon_ID)
        print(reply)

    elif command == 'info':
        # parse arguments
        if len(args) == 0:
            info_type = 'simple'
        elif len(args) == 1 and args[0] in ['v','V','-v','-V']:
            info_type = 'verbose'
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_ID, 'get_info')
        # print response
        if not reply:
            raise ValueError('No info returned, check daemon')
        elif info_type == 'simple':
            print_info_s(reply)
        elif info_type == 'verbose':
            print_info(reply)

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            log_path = params.LOG_PATH + daemon_ID + '-stdout.log'
            args.remove('stdout')
        else:
            log_path = params.LOG_PATH + daemon_ID + '.log'
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        # send command
        misc.execute_command(tail_command)

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Daemon functions
    elif command == 'open':
        # parse arguments
        if len(args) == 0:
            side = 'both'
            fraction = 1
        elif len(args) == 1 and not misc.is_num(args[0]):
            side = args[0]
            fraction = 1
        elif len(args) == 1 and misc.is_num(args[0]):
            side = 'both'
            fraction = float(args[0])
        elif len(args) == 2 and misc.is_num(args[1]):
            side = args[0]
            fraction = float(args[1])
        else:
            raise misc.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_ID, 'open_dome', [side, fraction])
        print(reply)

    elif command == 'close':
        # parse arguments
        if len(args) == 0:
            side  = 'both'
            fraction = 1
        elif len(args) == 1 and not misc.is_num(args[0]):
            side = args[0]
            fraction = 1
        elif len(args) == 1 and misc.is_num(args[0]):
            side = 'both'
            fraction = float(args[0])
        elif len(args) == 2 and misc.is_num(args[1]):
            side = args[0]
            fraction = float(args[1])
        else:
            raise misc.InputError('Invalid arguments')
        # check arguments
        if not 0 < fraction <= 1:
            raise misc.InputError('Fraction must be between 0 and 1')
        # send command
        reply = daemons.daemon_function(daemon_ID, 'close_dome', [side, fraction])
        print(reply)

    elif command in ['halt', 'stop', 'abort']:
        # send command
        reply = daemons.daemon_function(daemon_ID, 'halt_dome')
        print(reply)

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Other functions
    elif command == 'autoclose':
        # parse arguments
        if args[0] == 'on':
            override = False
        elif args[0] == 'off':
            override = True
        else:
            raise misc.InputError('Invalid arguments')
        # command
        overrides = flags.load_json(params.CONFIG_PATH + 'overrides_flags')
        if override:
            overrides['autoclose'] = 0
            print('Dome will autoclose in bad weather')
        else:
            overrides['autoclose'] = 1
            print('Autoclose override set: Dome will NOT close in bad weather')
        with open(params.CONFIG_PATH + 'overrides_flags', 'w') as f:
            json.dump(overrides, f)

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    # Unrecognized function
    else:
        raise misc.InputError('Unrecognized command "{}"'.format(command))

########################################################################
# Output formatting functions

def print_info(info):
    print('######## DOME INFO ########')
    print('North:       %s' %info['north'].capitalize())
    print('South:       %s' %info['south'].capitalize())
    print('Hatch:       %s' %info['hatch'].capitalize())
    print('~~~~~~~')
    print('Uptime: %.1fs' %info['uptime'])
    print('Ping: %.5fs' %info['ping'])
    print('Timestamp: %s' %info['timestamp'])
    print('###########################')

def print_info_s(info):
    if (('open' in info['north']) or ('open' in info['south']) or
        ('ing'  in info['north']) or ('ing' in info['south'])):
        print('DOME:    [Open]')
    else:
        print('DOME:    [%s]' %info['north'].capitalize())
    print('HATCH:   [%s]' %info['hatch'].capitalize())

def print_instructions():
    help_str = misc.bold('Usage:') + ' dome [command]' + '\n' +\
    ' ' + misc.undl('Daemon commands') + ':' + '\n' +\
    '  dome ' + misc.bold('start') + '                       - start the daemon' + '\n' +\
    '  dome ' + misc.bold('shutdown') + '                    - shutdown the daemon' + '\n' +\
    '  dome ' + misc.bold('restart') + '                     - restart the daemon' + '\n' +\
    '  dome ' + misc.bold('kill') + '                        - kill the daemon (' + misc.rtxt('emergency use') + ')' + '\n' +\
    '  dome ' + misc.bold('ping') + '                        - ping the daemon' + '\n' +\
    ' ' + misc.undl('Dome commands') + ':' + '\n' +\
    '  dome ' + misc.bold('open') + ' [north|south]        ' + '  - open the dome' + '\n' +\
    '  dome ' + misc.bold('close') + ' [north|south]        ' + ' - close the dome' + '\n' +\
    '  dome ' + misc.bold('halt') + '/' + misc.bold('stop')+ '                   - stop the dome moving' + '\n' +\
    '  dome ' + misc.bold('autoclose') + ' [on|off]          - auto close in bad weather?' + '\n' +\
    '  dome ' + misc.bold('info') + ' [v]' + '                    - report current status' + '\n' +\
    '  dome ' + misc.bold('log') + ' [stdout]' + '                - print daemon log (tail alias)' + '\n' +\
    ' ' + misc.undl('Control commands') + ':' + '\n' +\
    '  dome ' + misc.bold('i') + '                           - enter interactive mode' + '\n' +\
    '  dome ' + misc.bold('q') + '/' + misc.bold('exit') + '                      - quit interactive mode' + '\n' +\
    '  dome ' + misc.bold('?') + '/' + misc.bold('help') + '                      - print these instructions'
    print(help_str)

########################################################################

daemon_ID = os.path.basename(__file__)

if len(sys.argv) == 1:
    print_instructions()
else:
    command, *args = sys.argv[1:]
    if command == 'i':
        interactive()
    else:
        with misc.print_errors():
            query(command, args)
