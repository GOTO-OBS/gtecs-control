#!/usr/bin/env python
"""
A script to provide control over the conditions daemon
"""

import os
import sys
import time
import readline
import Pyro4

from astropy.time import Time

from gtecs import misc
from gtecs import params
from gtecs import style
from gtecs import daemons
from gtecs.astronomy import sun_alt


DAEMON_ID = os.path.basename(__file__)


def query(command, args, daemon_ID):
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise misc.InputError('Already in interactive mode')

    # Primary daemon control
    elif command == 'start':
        reply = daemons.start_daemon(daemon_ID)
        print(reply)

    elif command == 'shutdown':
        reply = daemons.shutdown_daemon(daemon_ID)
        print(reply)

    elif command == 'restart':
        reply = daemons.restart_daemon(daemon_ID)
        print(reply)

    elif command == 'kill':
        reply = daemons.kill_daemon(daemon_ID)
        print(reply)

    elif command == 'ping':
        reply = daemons.ping_daemon(daemon_ID)
        print(reply)

    elif command in ['info', 'status']:
        # send command
        reply = daemons.daemon_function(daemon_ID, 'get_info')
        if not reply:
            raise ValueError('No info returned, check daemon')
        else:
            print_info(reply)

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            log_path = params.LOG_PATH + daemon_ID + '-stdout.log'
            args.remove('stdout')
        else:
            log_path = params.LOG_PATH + daemon_ID + '.log'
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        # send command
        misc.execute_command(tail_command, handle_ctrlc=True)

    # Unrecognized function
    else:
        raise misc.InputError('Unrecognized command "{}"'.format(command))


def print_info(info):
    if info['flags'] is None or info['weather'] is None:
        print('CONDITIONS:')
        print('  None yet, try again')
    else:
        flags = info['flags']
        weather = info['weather']
        print('FLAGS ({}):'.format(flags['update_time'][:-4]))
        del flags['update_time']
        for flag in sorted(flags.keys()):
            if flags[flag] == 0:
                status = style.gtxt('Good')
            elif flags[flag] == 1:
                status = style.rtxt('Bad')
            else:
                status = style.rtxt('ERROR')
            print('  {: >12} : {: <16} ({})'.format(flag, status, flags[flag]))
        print('WEATHER:')

        sunalt = sun_alt(Time.now())
        if sunalt < 0:
            sunalt_str = style.ytxt('{:>5.1f}'.format(sunalt))
            if sunalt < params.SUN_ELEVATION_LIMIT:
                sunalt_str = style.gtxt('{:>5.1f}'.format(sunalt))
        else:
            sunalt_str = style.rtxt('{:>5.1f}'.format(sunalt))
        print('  {: <10}   {} degrees'.format('sun_alt', sunalt_str))

        # SuperWASP doesn't have a rain sensor
        weather['superwasp']['rain'] = 'NA'
        # SuperWASP wind readings aren't trustworthy
        weather['superwasp']['windspeed'] = 'NA'

        for source in ['goto', 'onemetre', 'superwasp']:
            temperature = weather[source]['temperature']
            humidity = weather[source]['humidity']
            windspeed = weather[source]['windspeed']
            rain = weather[source]['rain']
            dt = weather[source]['dt']

            if temperature == -999:
                temperature_str = style.rtxt(' ERR')
            elif (temperature < params.MAX_TEMPERATURE and
                  temperature > params.MIN_TEMPERATURE):
                temperature_str = style.ytxt('{:>4.1f}'.format(temperature))
                if (temperature < params.MAX_TEMPERATURE - 1 and
                    temperature > params.MIN_TEMPERATURE + 1):
                    temperature_str = style.gtxt('{:>4.1f}'.format(temperature))
            else:
                temperature_str = style.rtxt('{:>4.1f}'.format(temperature))

            if humidity == -999:
                humidity_str = style.rtxt('  ERR')
            elif (humidity < params.MAX_HUMIDITY):
                humidity_str = style.ytxt('{:>5.1f}'.format(humidity))
                if (humidity < params.MAX_HUMIDITY*0.9):
                    humidity_str = style.gtxt('{:>5.1f}'.format(humidity))
            else:
                humidity_str = style.rtxt('{:>5.1f}'.format(humidity))

            if windspeed == -999:
                windspeed_str = style.rtxt('  ERR')
            elif windspeed == 'NA':
                windspeed_str = '  N/A'
            elif (windspeed < params.MAX_WINDSPEED):
                windspeed_str = style.ytxt('{:>5.1f}'.format(windspeed))
                if (windspeed < params.MAX_WINDSPEED*0.9):
                    windspeed_str = style.gtxt('{:>5.1f}'.format(windspeed))
            else:
                windspeed_str = style.rtxt('{:>5.1f}'.format(windspeed))

            if rain == -999:
                rain_str = style.rtxt('  ERR')
            elif rain == 'NA':
                rain_str = '  N/A'
            elif rain:
                rain_str = style.rtxt(' True')
            else:
                rain_str = style.gtxt('False')

            if dt == -999:
                dt_str = style.rtxt('ERR')
            elif dt > params.WEATHER_TIMEOUT:
                dt_str = style.rtxt('{:>3.0f}'.format(dt))
            else:
                dt_str = style.gtxt('{:>3.0f}'.format(dt))


            print('  {: <10}'.format(source), end='\t')
            weather_str = '{}C  {}%  {} km/h  {}  dt={}'.format(temperature_str,
                                                                humidity_str,
                                                                windspeed_str,
                                                                rain_str,
                                                                dt_str)
            print(weather_str)

        for source in ['dome', 'pier']:
            int_temperature = weather[source]['int_temperature']
            int_humidity = weather[source]['int_humidity']
            dt = weather[source]['dt']

            if int_temperature == -999:
                int_temperature_str = style.rtxt(' ERR')
            elif (int_temperature < params.MAX_INTERNAL_TEMPERATURE and
                  int_temperature > params.MIN_INTERNAL_TEMPERATURE):
                int_temperature_str = style.ytxt('{:>4.1f}'.format(int_temperature))
                if (int_temperature < params.MAX_INTERNAL_TEMPERATURE - 1 and
                    int_temperature > params.MIN_INTERNAL_TEMPERATURE + 1):
                    int_temperature_str = style.gtxt('{:>4.1f}'.format(int_temperature))
            else:
                int_temperature_str = style.rtxt('{:>4.1f}'.format(int_temperature))

            if int_humidity == -999:
                int_humidity_str = style.rtxt(' ERR')
            elif (int_humidity < params.MAX_INTERNAL_HUMIDITY):
                int_humidity_str = style.ytxt('{:>5.1f}'.format(int_humidity))
                if (int_humidity < params.MAX_INTERNAL_HUMIDITY*0.9):
                    int_humidity_str = style.gtxt('{:>5.1f}'.format(int_humidity))
            else:
                int_humidity_str = style.rtxt('{:>5.1f}'.format(int_humidity))

            if dt == -999:
                dt_str = style.rtxt('ERR')
            elif dt > params.WEATHER_TIMEOUT:
                dt_str = style.rtxt('{:>3.0f}'.format(dt))
            else:
                dt_str = style.gtxt('{:>3.0f}'.format(dt))

            print('  {: <10}'.format(source+'_int'), end='\t')
            weather_str = '{}C  {}%                     dt={}'.format(
                                                        int_temperature_str,
                                                        int_humidity_str,
                                                        dt_str)
            print(weather_str)


def print_instructions():
    help_str = style.bold('Usage:') + ' conditions [command]' + '\n' +\
    ' ' + style.undl('Interface commands') + ':' + '\n' +\
    '  conditions ' + style.bold('start') + '             - start the daemon' + '\n' +\
    '  conditions ' + style.bold('shutdown') + '          - shutdown the daemon' + '\n' +\
    '  conditions ' + style.bold('restart') + '           - restart the daemon' + '\n' +\
    '  conditions ' + style.bold('kill') + '              - kill the daemon (' + style.rtxt('emergency use') + ')' + '\n' +\
    '  conditions ' + style.bold('ping') + '              - ping the daemon' + '\n' +\
    '  conditions ' + style.bold('info') + '/' + style.bold('status') + ' [v]' + '   - report current status' + '\n' +\
    '  conditions ' + style.bold('log') + ' [stdout]' + '      - print daemon log (tail alias)' + '\n' +\
    ' ' + style.undl('Control commands') + ':' + '\n' +\
    '  conditions ' + style.bold('i') + '                 - enter interactive mode' + '\n' +\
    '  conditions ' + style.bold('q') + '/' + style.bold('exit') + '            - quit interactive mode' + '\n' +\
    '  conditions ' + style.bold('?') + '/' + style.bold('help') + '            - print these instructions'
    print(help_str)


if __name__ == "__main__":
    if len(sys.argv) == 1:
        print_instructions()
    else:
        command, *args = sys.argv[1:]
        if command == 'i':
            while True:
                interactive_input = input('{}> '.format(DAEMON_ID)).split()
                if len(interactive_input) > 0:
                    command, *args = interactive_input
                    if command in ['q', 'exit']:
                        break
                    else:
                        with misc.print_errors():
                            query(command, args, DAEMON_ID)
        else:
            with misc.print_errors():
                query(command, args, DAEMON_ID)
