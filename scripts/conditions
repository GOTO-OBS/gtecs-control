#!/usr/bin/env python3
"""A script to provide control over the conditions daemon."""

import os
import sys

from gtecs import daemons
from gtecs import errors
from gtecs import misc
from gtecs import params
from gtecs import style


DAEMON_ID = os.path.basename(__file__)


def query(command, args, daemon_id):
    """Process a query."""
    # Command functions
    if command in ['help', '?']:
        print_instructions()

    elif command == 'i':
        raise errors.InputError('Already in interactive mode')

    # Primary daemon control
    elif command == 'start':
        reply = daemons.start_daemon(daemon_id)
        print(reply)

    elif command == 'shutdown':
        reply = daemons.shutdown_daemon(daemon_id)
        print(reply)

    elif command == 'restart':
        reply = daemons.restart_daemon(daemon_id)
        print(reply)

    elif command == 'kill':
        reply = daemons.kill_daemon(daemon_id)
        print(reply)

    elif command in ['check', 'ping']:
        reply = daemons.check_daemon(daemon_id)
        print(reply)

    elif command in ['info', 'status']:
        # parse arguments
        if len(args) == 0:
            force = False
        elif len(args) == 1 and args[0] in ['f', 'F', '-f', '-F', '--force-update']:
            force = True
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_id, 'get_info', args=[force])
        # print response
        if not reply:
            raise ValueError('No info returned, check daemon')
        else:
            print_info(reply)

    elif command in ['log', 'tail']:
        # parse arguments
        if 'stdout' in args:
            log_file = daemon_id + '-stdout.log'
            args.remove('stdout')
        else:
            log_file = daemon_id + '.log'
        log_path = os.path.join(params.LOG_PATH, log_file)
        tail_command = 'tail {} {}'.format(log_path, ' '.join(args))
        # send command
        misc.execute_long_command(tail_command)

    # Daemon functions
    elif command == 'update':
        # send command
        reply = daemons.daemon_function(daemon_id, 'update')
        print(reply)

    elif command == 'limits':
        # parse arguments
        if len(args) == 0:
            force = False
        elif len(args) == 1 and args[0] in ['f', 'F', '-f', '-F', '--force-update']:
            force = True
        else:
            raise errors.InputError('Invalid arguments')
        # send command
        reply = daemons.daemon_function(daemon_id, 'get_info', args=[force])
        # print response
        if not reply:
            raise ValueError('No info returned, check daemon')
        else:
            print_limits(reply)

    # Unrecognized function
    else:
        raise errors.InputError('Unrecognized command "{}"'.format(command))


def print_info(info):
    """Print the full info dict."""
    if info['flags'] is None or info['weather'] is None:
        print('CONDITIONS:')
        print('  None yet, try again')
    else:
        print('FLAGS ({}):'.format(info['timestamp']))
        flags = info['flags']
        n_flags = sorted(info['normal_flags'])
        c_flags = sorted(info['critical_flags'])
        for i in range(max(len(n_flags), len(c_flags))):
            # Print normal flags on the left, and critical flags on the right
            if len(n_flags) >= i + 1:
                n_flag = n_flags[i]
                if flags[n_flag] == 0:
                    status = style.gtxt('Good')
                elif flags[n_flag] == 1:
                    status = style.rtxt('Bad')
                else:
                    status = style.rtxt('ERROR')
                print('  {: >12} : {: <16} ({})'.format(n_flag, status, flags[n_flag]), end='')
            else:
                print('                          ', end='')

            if len(c_flags) >= i + 1:
                c_flag = c_flags[i]
                if flags[c_flag] == 0:
                    status = style.gtxt('Good')
                elif flags[c_flag] == 1:
                    status = style.rtxt('Bad')
                else:
                    status = style.rtxt('ERROR')
                print('  {: >12} : {: <16} ({})'.format(c_flag, status, flags[c_flag]))
            else:
                print('')

        print('WEATHER:          temp   humid    dewpt  wind (gust)        rain')
        weather = info['weather']
        # If we're using thr W1m boards then we're ignoring the GOTO rain sensors
        if params.USE_W1M_RAINBOARDS:
            weather['goto']['rain'] = 'NA'

        # for source in ['goto', 'w1m', 'superwasp']:  # The SuperWASP weather isn't reliable
        for source in ['goto', 'w1m']:
            temperature = weather[source]['temperature']
            humidity = weather[source]['humidity']
            dewpoint = weather[source]['dew_point']
            windspeed = weather[source]['windspeed']
            windgust = weather[source]['windgust']
            rain = weather[source]['rain']
            dt = weather[source]['dt']

            if temperature == -999:
                temperature_str = style.rtxt(' ERR')
            elif (temperature < params.MAX_TEMPERATURE and
                  temperature > params.MIN_TEMPERATURE):
                temperature_str = style.ytxt('{:>4.1f}'.format(temperature))
                if (temperature < params.MAX_TEMPERATURE - 1 and
                        temperature > params.MIN_TEMPERATURE + 1):
                    temperature_str = style.gtxt('{:>4.1f}'.format(temperature))
            else:
                temperature_str = style.rtxt('{:>4.1f}'.format(temperature))

            if dewpoint == -999:
                dewpoint_str = style.rtxt('  ERR')
            elif (dewpoint > params.MIN_DEWPOINT):
                dewpoint_str = style.ytxt('{:>+5.1f}'.format(dewpoint))
                if (dewpoint > params.MIN_DEWPOINT + 1):
                    dewpoint_str = style.gtxt('{:>+5.1f}'.format(dewpoint))
            else:
                dewpoint_str = style.rtxt('{:>+5.1f}'.format(dewpoint))

            if humidity == -999:
                humidity_str = style.rtxt('  ERR')
            elif (humidity < params.MAX_HUMIDITY):
                humidity_str = style.ytxt('{:>5.1f}'.format(humidity))
                if (humidity < params.MAX_HUMIDITY * 0.9):
                    humidity_str = style.gtxt('{:>5.1f}'.format(humidity))
            else:
                humidity_str = style.rtxt('{:>5.1f}'.format(humidity))

            if windspeed == -999:
                windspeed_str = style.rtxt(' ERR')
            elif windspeed == 'NA':
                windspeed_str = ' N/A'
            elif (windspeed < params.MAX_WINDSPEED):
                windspeed_str = style.ytxt('{:>4.1f}'.format(windspeed))
                if (windspeed < params.MAX_WINDSPEED * 0.9):
                    windspeed_str = style.gtxt('{:>4.1f}'.format(windspeed))
            else:
                windspeed_str = style.rtxt('{:>4.1f}'.format(windspeed))

            if windgust == -999:
                windgust_str = style.rtxt(' ERR')
            elif windgust == 'NA':
                windgust_str = ' N/A'
            elif (windgust < params.MAX_WINDGUST):
                windgust_str = style.ytxt('{:>4.1f}'.format(windgust))
                if (windgust < params.MAX_WINDGUST * 0.9):
                    windgust_str = style.gtxt('{:>4.1f}'.format(windgust))
            else:
                windgust_str = style.rtxt('{:>4.1f}'.format(windgust))

            if rain == -999:
                rain_str = style.rtxt('  ERR')
            elif rain == 'NA':
                rain_str = '  N/A'
            elif rain:
                rain_str = style.rtxt(' True')
            else:
                rain_str = style.gtxt('False')

            if dt == -999:
                dt_str = style.rtxt('ERR')
            elif dt > params.WEATHER_TIMEOUT:
                dt_str = style.rtxt('{:>3.0f}'.format(dt))
            else:
                dt_str = style.gtxt('{:>3.0f}'.format(dt))

            print('  {: <10}'.format(source), end='\t')
            weather_str = '{}°C  {}%  {}°C  {} ({}) km/h  {}  dt={}'.format(temperature_str,
                                                                            humidity_str,
                                                                            dewpoint_str,
                                                                            windspeed_str,
                                                                            windgust_str,
                                                                            rain_str,
                                                                            dt_str)
            print(weather_str)

        # for source in ['dome', 'pier']:  # Disable dome sensor for dome 2
        for source in ['pier']:
            int_temperature = weather[source]['int_temperature']
            int_humidity = weather[source]['int_humidity']
            dt = weather[source]['dt']

            if int_temperature == -999:
                int_temperature_str = style.rtxt(' ERR')
            elif (int_temperature < params.MAX_INTERNAL_TEMPERATURE and
                  int_temperature > params.MIN_INTERNAL_TEMPERATURE):
                int_temperature_str = style.ytxt('{:>4.1f}'.format(int_temperature))
                if (int_temperature < params.MAX_INTERNAL_TEMPERATURE - 1 and
                        int_temperature > params.MIN_INTERNAL_TEMPERATURE + 1):
                    int_temperature_str = style.gtxt('{:>4.1f}'.format(int_temperature))
            else:
                int_temperature_str = style.rtxt('{:>4.1f}'.format(int_temperature))

            if int_humidity == -999:
                int_humidity_str = style.rtxt('  ERR')
            elif (int_humidity < params.MAX_INTERNAL_HUMIDITY):
                int_humidity_str = style.ytxt('{:>5.1f}'.format(int_humidity))
                if (int_humidity < params.MAX_INTERNAL_HUMIDITY * 0.9):
                    int_humidity_str = style.gtxt('{:>5.1f}'.format(int_humidity))
            else:
                int_humidity_str = style.rtxt('{:>5.1f}'.format(int_humidity))

            if dt == -999:
                dt_str = style.rtxt('ERR')
            elif dt > params.WEATHER_TIMEOUT:
                dt_str = style.rtxt('{:>3.0f}'.format(dt))
            else:
                dt_str = style.gtxt('{:>3.0f}'.format(dt))

            print('  {: <10}'.format(source + '_int'), end='\t')
            weather_str = '{}°C  {}%                                    dt={}'.format(
                int_temperature_str, int_humidity_str, dt_str)
            print(weather_str)

        dust = info['dust']
        if dust == -999:
            dust_str = style.rtxt('  ERR')
        elif dust < params.MAX_DUSTLEVEL:
            dust_str = style.ytxt('{:>5.1f}'.format(dust))
            if dust < params.MAX_DUSTLEVEL - 10:
                dust_str = style.gtxt('{:>5.1f}'.format(dust))
        else:
            dust_str = style.rtxt('{:>5.1f}'.format(dust))
        print('  {: <10}   {} μg/m³'.format('dust_level', dust_str))

        clouds = info['clouds']
        if clouds == -999:
            clouds_str = style.rtxt('  ERR')
        elif clouds < params.MAX_SATCLOUDS:
            clouds_str = style.ytxt('{:>5.1f}'.format(clouds))
            if clouds < params.MAX_SATCLOUDS - 5:
                clouds_str = style.gtxt('{:>5.1f}'.format(clouds))
        else:
            clouds_str = style.rtxt('{:>5.1f}'.format(clouds))
        print('  {: <10}   {}%'.format('sat_clouds', clouds_str))

        sunalt = info['sunalt']
        if sunalt < 0:
            sunalt_str = style.ytxt('{:>+5.1f}'.format(sunalt))
            if sunalt < params.SUN_ELEVATION_LIMIT:
                sunalt_str = style.gtxt('{:>+5.1f}'.format(sunalt))
        else:
            sunalt_str = style.rtxt('{:>+5.1f}'.format(sunalt))
        print('  {: <10}   {}°'.format('sunalt', sunalt_str))

        seeing = info['seeing']
        if seeing == -999:
            seeing_str = style.rtxt('ERR')
        else:
            seeing_str = style.boldtxt('{:>3.1f}'.format(seeing))
        print('  {: <12}   {}"'.format('seeing (TNG)', seeing_str))

        print('OTHER:')
        ups_percents = info['ups_percent']
        ups_strings = []
        for ups_percent in ups_percents:
            if ups_percent < params.MIN_UPSBATTERY:
                ups_strings.append(style.rtxt('{:>5.1f}'.format(ups_percent)))
            else:
                ups_strings.append(style.gtxt('{:>5.1f}'.format(ups_percent)))
        print('  {: <10}   {}%'.format('ups', '%  '.join(ups_strings)))

        free_diskspace = info['free_diskspace']
        if free_diskspace < (params.MIN_DISKSPACE * 2):
            diskspace_str = style.ytxt('{:>5.1f}'.format(free_diskspace))
            if free_diskspace < params.MIN_DISKSPACE:
                diskspace_str = style.rtxt('{:>5.1f}'.format(free_diskspace))
        else:
            diskspace_str = style.gtxt('{:>5.1f}'.format(free_diskspace))
        print('  {: <10}   {}%'.format('diskspace', diskspace_str))


def print_limits(info):
    """Print the weather readings and limits."""
    if info['weather'] is None:
        print('WEATHER:')
        print('  None yet, try again')
    else:
        weather = info['weather']

        print('TEMPERATURE:')
        # for source in ['goto', 'w1m', 'superwasp']:  # The SuperWASP weather isn't reliable
        for source in ['goto', 'w1m']:
            print('  {: <10}'.format(source), end='\t')

            temperature = weather[source]['temperature']
            if temperature == -999:
                status = style.rtxt('ERROR')
                temperature_str = style.rtxt(' ERR')
            elif (temperature < params.MAX_TEMPERATURE and
                  temperature > params.MIN_TEMPERATURE):
                status = style.gtxt('Good')
                temperature_str = style.ytxt('{:>4.1f}'.format(temperature))
                if (temperature < params.MAX_TEMPERATURE - 1 and
                        temperature > params.MIN_TEMPERATURE + 1):
                    temperature_str = style.gtxt('{:>4.1f}'.format(temperature))
            else:
                status = style.rtxt('Bad')
                temperature_str = style.rtxt('{:>4.1f}'.format(temperature))

            print(' {}°C       (min={:.1f}°C max={:.1f}°C) \t : {}'.format(
                temperature_str, params.MIN_TEMPERATURE, params.MAX_TEMPERATURE, status))

        print('HUMIDITY:')
        # for source in ['goto', 'w1m', 'superwasp']:  # The SuperWASP weather isn't reliable
        for source in ['goto', 'w1m']:
            print('  {: <10}'.format(source), end='\t')

            humidity = weather[source]['humidity']
            if humidity == -999:
                status = style.rtxt('ERROR')
                humidity_str = style.rtxt('  ERR')
            elif (humidity < params.MAX_HUMIDITY):
                status = style.gtxt('Good')
                humidity_str = style.ytxt('{:>5.1f}'.format(humidity))
                if (humidity < params.MAX_HUMIDITY * 0.9):
                    humidity_str = style.gtxt('{:>5.1f}'.format(humidity))
            else:
                status = style.rtxt('Bad')
                humidity_str = style.rtxt('{:>5.1f}'.format(humidity))

            print('{}%        (max={:.1f}%)            \t : {}'.format(
                humidity_str, params.MAX_HUMIDITY, status))

        print('DEW POINT:')
        # for source in ['goto', 'w1m', 'superwasp']:  # The SuperWASP weather isn't reliable
        for source in ['goto', 'w1m']:
            print('  {: <10}'.format(source), end='\t')

            dewpoint = weather[source]['dew_point']
            if dewpoint == -999:
                status = style.rtxt('ERROR')
                dewpoint_str = style.rtxt('  ERR')
            elif (dewpoint > params.MIN_DEWPOINT):
                status = style.gtxt('Good')
                dewpoint_str = style.ytxt('{:>+5.1f}'.format(dewpoint))
                if (dewpoint > params.MIN_DEWPOINT + 1):
                    dewpoint_str = style.gtxt('{:>+5.1f}'.format(dewpoint))
            else:
                status = style.rtxt('Bad')
                dewpoint_str = style.rtxt('{:>+5.1f}'.format(dewpoint))

            print('{}°C       (min={:+.1f}°C)           \t : {}'.format(
                dewpoint_str, params.MIN_DEWPOINT, status))

        print('WIND SPEED:')
        for source in ['goto', 'w1m']:
            print('  {: <10}'.format(source), end='\t')

            windspeed = weather[source]['windspeed']
            if windspeed == -999:
                status = style.rtxt('ERROR')
                windspeed_str = style.rtxt(' ERR')
            elif (windspeed < params.MAX_WINDSPEED):
                status = style.gtxt('Good')
                windspeed_str = style.ytxt('{:>4.1f}'.format(windspeed))
                if (windspeed < params.MAX_WINDSPEED * 0.9):
                    windspeed_str = style.gtxt('{:>4.1f}'.format(windspeed))
            else:
                status = style.rtxt('Bad')
                windspeed_str = style.rtxt('{:>4.1f}'.format(windspeed))

            print(' {} km/h    (max={:.1f} km/h)        \t : {}'.format(
                windspeed_str, params.MAX_WINDSPEED, status))

        print('WIND GUST ({:.0f} min maximum):'.format(params.WINDGUST_PERIOD / 60))
        for source in ['goto', 'w1m']:
            print('  {: <10}'.format(source), end='\t')

            windgust = weather[source]['windgust']
            if windgust == -999:
                status = style.rtxt('ERROR')
                windgust_str = style.rtxt(' ERR')
            elif (windgust < params.MAX_WINDGUST):
                status = style.gtxt('Good')
                windgust_str = style.ytxt('{:>4.1f}'.format(windgust))
                if (windgust < params.MAX_WINDGUST * 0.9):
                    windgust_str = style.gtxt('{:>4.1f}'.format(windgust))
            else:
                status = style.rtxt('Bad')
                windgust_str = style.rtxt('{:>4.1f}'.format(windgust))

            print(' {} km/h    (max={:.1f} km/h)        \t : {}'.format(
                windgust_str, params.MAX_WINDGUST, status))

        print('INTERNAL:')
        for source in ['pier']:
            print('  {: <10}'.format('temperature'), end='\t')
            int_temperature = weather[source]['int_temperature']

            if int_temperature == -999:
                status = style.rtxt('ERROR')
                int_temperature_str = style.rtxt(' ERR')
            elif (int_temperature < params.MAX_INTERNAL_TEMPERATURE and
                  int_temperature > params.MIN_INTERNAL_TEMPERATURE):
                status = style.gtxt('Good')
                int_temperature_str = style.ytxt('{:>4.1f}'.format(int_temperature))
                if (int_temperature < params.MAX_INTERNAL_TEMPERATURE - 1 and
                        int_temperature > params.MIN_INTERNAL_TEMPERATURE + 1):
                    int_temperature_str = style.gtxt('{:>4.1f}'.format(int_temperature))
            else:
                status = style.rtxt('Bad')
                int_temperature_str = style.rtxt('{:>4.1f}'.format(int_temperature))

            print(' {}°C       (min={:.1f}°C max={:.1f}°C) \t : {}'.format(
                int_temperature_str, params.MIN_INTERNAL_TEMPERATURE,
                params.MAX_INTERNAL_TEMPERATURE, status))

            print('  {: <10}'.format('humidity'), end='\t')
            int_humidity = weather[source]['int_humidity']

            if int_humidity == -999:
                status = style.rtxt('ERROR')
                int_humidity_str = style.rtxt('  ERR')
            elif (int_humidity < params.MAX_INTERNAL_HUMIDITY):
                status = style.gtxt('Good')
                int_humidity_str = style.ytxt('{:>5.1f}'.format(int_humidity))
                if (int_humidity < params.MAX_INTERNAL_HUMIDITY * 0.9):
                    int_humidity_str = style.gtxt('{:>5.1f}'.format(int_humidity))
            else:
                status = style.rtxt('Bad')
                int_humidity_str = style.rtxt('{:>5.1f}'.format(int_humidity))

            print('{}%        (max={:.1f}%)            \t : {}'.format(
                int_humidity_str, params.MAX_INTERNAL_HUMIDITY, status))

        print('OTHER:')

        print('  {: <10}'.format('dust_level'), end='\t')
        dust = info['dust']
        if dust == -999:
            status = style.rtxt('ERROR')
            dust_str = style.rtxt('  ERR')
        elif dust < params.MAX_DUSTLEVEL:
            status = style.gtxt('Good')
            dust_str = style.ytxt('{:>5.1f}'.format(dust))
            if dust < params.MAX_DUSTLEVEL - 10:
                dust_str = style.gtxt('{:>5.1f}'.format(dust))
        else:
            status = style.rtxt('Bad')
            dust_str = style.rtxt('{:>5.1f}'.format(dust))

        print('{} μg/m³   (max={:.1f} μg/m³)      \t : {}'.format(
            dust_str, params.MAX_DUSTLEVEL, status))

        print('  {: <10}'.format('sat_clouds'), end='\t')
        clouds = info['clouds']
        if clouds == -999:
            status = style.rtxt('ERROR')
            clouds_str = style.rtxt('  ERR')
        elif clouds < params.MAX_SATCLOUDS:
            status = style.gtxt('Good')
            clouds_str = style.ytxt('{:>5.1f}'.format(clouds))
            if clouds < params.MAX_SATCLOUDS - 5:
                clouds_str = style.gtxt('{:>5.1f}'.format(clouds))
        else:
            status = style.rtxt('Bad')
            clouds_str = style.rtxt('{:>5.1f}'.format(clouds))

        print('{}%        (max={:.1f}%)            \t : {}'.format(
            clouds_str, params.MAX_SATCLOUDS, status))

        print('  {: <10}'.format('sunalt'), end='\t')
        sunalt = info['sunalt']
        if sunalt < 0:
            status = style.rtxt('Bad')
            sunalt_str = style.ytxt('{:>+5.1f}'.format(sunalt))
            if sunalt < params.SUN_ELEVATION_LIMIT:
                status = style.gtxt('Good')
                sunalt_str = style.gtxt('{:>+5.1f}'.format(sunalt))
        else:
            status = style.rtxt('Bad')
            sunalt_str = style.rtxt('{:>+5.1f}'.format(sunalt))

        print('{}°        (max={:.1f}°)           \t : {}'.format(
            sunalt_str, params.SUN_ELEVATION_LIMIT, status))


def print_instructions():
    """Print instructions for using the daemon."""
    print('Usage: conditions command [options]',
          'Daemon commands:',
          '  start                          start the daemon',
          '  shutdown                       shutdown the daemon',
          '  restart                        restart the daemon',
          '  kill                           kill the daemon',
          '  check/ping                     check the daemon for errors',
          'Conditions commands:',
          '  update                         force update the conditions',
          '  info/status [-f]               report current status [force-update]',
          '  limits [-f]                    report values and limits [force-update]',
          '  log [stdout]                   print daemon log (tail alias)',
          'Control commands:',
          '  i                              enter interactive mode',
          '  q/exit                         quit interactive mode',
          '  ?/help                         print these instructions',
          sep='\n')


if __name__ == '__main__':
    if len(sys.argv) == 1:
        print_instructions()
    else:
        command, *args = sys.argv[1:]
        if command == 'i':
            while True:
                interactive_input = input('{}> '.format(DAEMON_ID)).split()
                if len(interactive_input) > 0:
                    command, *args = interactive_input
                    if command in ['q', 'exit']:
                        break
                    else:
                        with misc.print_errors():
                            query(command, args, DAEMON_ID)
        else:
            with misc.print_errors():
                query(command, args, DAEMON_ID)
